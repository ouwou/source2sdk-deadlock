#pragma once
#include <cstdint>
#include "!GlobalTypes.hpp"

// /////////////////////////////////////////////////////////////
// Binary: server.dll
// Classes count: 2,133 (Allocated) | 2,210 (Unallocated)
// Enums count: 6 (Allocated) | 59 (Unallocated)
// Created using source2gen - github.com/neverlosecc/source2gen
// /////////////////////////////////////////////////////////////

// Registered binary: server.dll (project 'server')
// Enumerator count: 7
// Alignment: 4
// Size: 0x4
enum class CBaseNPCMaker__VisibilityCriterion_t : std::uint32_t
{
	VC_YES_LOS = 0x0,
	VC_NO_LOS = 0x1,
	VC_DONT_CARE = 0x2,
	VC_YES_IN_VIEWCONE = 0x3,
	VC_NO_IN_VIEWCONE = 0x4,
	VC_YES_LOS_VIEWCONE = 0x5,
	VC_NO_LOS_VIEWCONE = 0x6,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class CBaseNPCMaker__ThreeStateDist_t : std::uint32_t
{
	TS_DIST_NEAREST = 0x0,
	TS_DIST_FARTHEST = 0x1,
	TS_DIST_DONT_CARE = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 2
// Alignment: 4
// Size: 0x4
enum class CAI_GoalEntity__SearchType_t : std::uint32_t
{
	ST_ENTNAME = 0x0,
	ST_CLASSNAME = 0x1,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 4
// Alignment: 4
// Size: 0x4
enum class CLogicBranchList__LogicBranchListenerLastState_t : std::uint32_t
{
	LOGIC_BRANCH_LISTENER_NOT_INIT = 0x0,
	LOGIC_BRANCH_LISTENER_ALL_TRUE = 0x1,
	LOGIC_BRANCH_LISTENER_ALL_FALSE = 0x2,
	LOGIC_BRANCH_LISTENER_MIXED = 0x3,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 2
// Alignment: 4
// Size: 0x4
enum class CPhysicsProp__CrateType_t : std::uint32_t
{
	CRATE_SPECIFIC_ITEM = 0x0,
	CRATE_TYPE_COUNT = 0x1,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class CFuncMover__Move_t : std::uint32_t
{
	MOVE_LOOP = 0x0,
	MOVE_OSCILLATE = 0x1,
	MOVE_STOP_AT_END = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class PropDoorRotatingOpenDirection_e : std::uint32_t
{
	DOOR_ROTATING_OPEN_BOTH_WAYS = 0x0,
	DOOR_ROTATING_OPEN_FORWARD = 0x1,
	DOOR_ROTATING_OPEN_BACKWARD = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 2
// Alignment: 4
// Size: 0x4
enum class SceneOnPlayerDeath_t : std::uint32_t
{
	SCENE_ONPLAYERDEATH_DO_NOTHING = 0x0,
	SCENE_ONPLAYERDEATH_CANCEL = 0x1,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class LessonPanelLayoutFileTypes_t : std::uint32_t
{
	LAYOUT_HAND_DEFAULT = 0x0,
	LAYOUT_WORLD_DEFAULT = 0x1,
	LAYOUT_CUSTOM = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 4
// Alignment: 4
// Size: 0x4
enum class EAIScheduleFlags : std::uint32_t
{
	SCHEDULE_FLAGS_NONE = 0x0,
	SCHEDULE_FLAGS_ABILITY = 0x1,
	SCHEDULE_FLAGS_INTERRUPT_ACTIVE_HANDSHAKES = 0x2,
	SCHEDULE_FLAGS_CANNOT_BE_INTERRUPTED_BY_SYNCHRONIZED_ABILITY = 0x4,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class Explosions : std::uint32_t
{
	expRandom = 0x0,
	expDirected = 0x1,
	expUsePrecise = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 7
// Alignment: 4
// Size: 0x4
enum class GoalType_t : std::uint32_t
{
	GOALTYPE_NONE = 0x0,
	GOALTYPE_ENTITY = 0x1,
	GOALTYPE_PATHCORNER = 0x2,
	GOALTYPE_LOCATION = 0x3,
	GOALTYPE_COVER = 0x4,
	GOALTYPE_LOS = 0x5,
	GOALTYPE_INVALID = 0x6,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 4
// Alignment: 4
// Size: 0x4
enum class TrainOrientationType_t : std::uint32_t
{
	TrainOrientation_Fixed = 0x0,
	TrainOrientation_AtPathTracks = 0x1,
	TrainOrientation_LinearBlend = 0x2,
	TrainOrientation_EaseInEaseOut = 0x3,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 14
// Alignment: 2
// Size: 0x2
enum class SoundTypes_t : std::uint16_t
{
	SOUND_NONE = 0x0,
	SOUND_COMBAT = 0x1,
	SOUND_PLAYER = 0x2,
	SOUND_DANGER = 0x3,
	SOUND_BULLET_IMPACT = 0x4,
	SOUND_THUMPER = 0x5,
	SOUND_PHYSICS_DANGER = 0x6,
	SOUND_MOVE_AWAY = 0x7,
	SOUND_PLAYER_VEHICLE = 0x8,
	SOUND_GLASS_BREAK = 0x9,
	SOUND_PHYSICS_OBJECT = 0xa,
	SOUND_WARN_FRIENDS = 0xb,
	SOUND_FOOD = 0xc,
	NUM_AI_SOUND_TYPES = 0xd,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 2
// Alignment: 4
// Size: 0x4
enum class TestHullMode_t : std::uint32_t
{
	TEST_HULL_EVER_PASSABLE = 0x0,
	TEST_HULL_CURRENTLY_PASSABLE = 0x1,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 1
// Size: 0x1
enum class LaneSide_t : std::uint8_t
{
	Center = 0,
	Left = 1,
	Right = 2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 7
// Alignment: 4
// Size: 0x4
enum class ET3BossActivity : std::uint32_t
{
	IdleShielded = 0x0,
	Idle = 0x1,
	Moving = 0x2,
	ElectricBeamWindup = 0x3,
	ElectricBeamShoot = 0x4,
	BecomingWeakenedLoop = 0x5,
	Weakened = 0x6,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 5
// Alignment: 4
// Size: 0x4
enum class AIMotorTransitionState_t : std::uint32_t
{
	eNone = 0x0,
	eFacingNotStarted = 0x1,
	eFacingStarted = 0x2,
	eFacingSuccessful = 0x3,
	eExecuting = 0x4,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 12
// Alignment: 4
// Size: 0x4
enum class Materials : std::uint32_t
{
	matGlass = 0x0,
	matWood = 0x1,
	matMetal = 0x2,
	matFlesh = 0x3,
	matCinderBlock = 0x4,
	matCeilingTile = 0x5,
	matComputer = 0x6,
	matUnbreakableGlass = 0x7,
	matRocks = 0x8,
	matWeb = 0x9,
	matNone = 0xa,
	matLastMaterial = 0xb,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 10
// Alignment: 2
// Size: 0x2
enum class SoundFlags_t : std::uint16_t
{
	// MPropertySuppressEnumerator
	// MEnumeratorIsNotAFlag
	SOUND_FLAGS_NONE = 0x0,
	SOUND_FLAG_GUNFIRE = 0x1,
	SOUND_FLAG_COMBINE_ONLY = 0x2,
	SOUND_FLAG_REACT_TO_SOURCE = 0x4,
	SOUND_FLAG_EXPLOSION = 0x8,
	SOUND_FLAG_EXCLUDE_COMBINE = 0x10,
	SOUND_FLAG_DANGER_APPROACH = 0x20,
	SOUND_FLAG_ALLIES_ONLY = 0x40,
	SOUND_FLAG_PANIC_NPCS = 0x80,
	SOUND_FLAG_SQUAD_ONLY = 0x100,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 2
// Alignment: 4
// Size: 0x4
enum class filter_t : std::uint32_t
{
	FILTER_AND = 0x0,
	FILTER_OR = 0x1,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 7
// Alignment: 4
// Size: 0x4
enum class EBotTestNodeType : std::uint32_t
{
	// MPropertySuppressEnumerator
	// MEnumeratorIsNotAFlag
	EBotTestNode_NotSet = 0x0,
	EBotTestNode_StandingMantleStart = 0x1,
	EBotTestNode_MovingMantleStart = 0x2,
	EBotTestNode_Dest = 0x4,
	EBotTestNode_ShootTarget = 0x8,
	EBotTestNode_TargetDummy = 0x10,
	EBotTestNode_GunDPSTest = 0x20,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 5
// Alignment: 4
// Size: 0x4
enum class Touch_t : std::uint32_t
{
	touch_none = 0x0,
	touch_player_only = 0x1,
	touch_npc_only = 0x2,
	touch_player_or_npc = 0x3,
	touch_player_or_npc_or_physicsprop = 0x4,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class TrainVelocityType_t : std::uint32_t
{
	TrainVelocity_Instantaneous = 0x0,
	TrainVelocity_LinearBlend = 0x1,
	TrainVelocity_EaseInEaseOut = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class EntFinderMethod_t : std::uint32_t
{
	ENT_FIND_METHOD_NEAREST = 0x0,
	ENT_FIND_METHOD_FARTHEST = 0x1,
	ENT_FIND_METHOD_RANDOM = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 4
// Alignment: 4
// Size: 0x4
enum class HintPriority_t : std::uint32_t
{
	HINT_PRIORITY_LOW = 0x0,
	HINT_PRIORITY_MEDIUM = 0x1,
	HINT_PRIORITY_HIGH = 0x2,
	HINT_PRIORITY_CRITICAL = 0x3,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 7
// Alignment: 4
// Size: 0x4
enum class ET1BossActivity : std::uint32_t
{
	IdleShielded = 0x0,
	Stunned = 0x1,
	Disarmed = 0x2,
	Alert = 0x3,
	RangeAttack = 0x4,
	MeleeAttack = 0x5,
	Dying = 0x6,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 4
// Alignment: 4
// Size: 0x4
enum class PropDoorRotatingSpawnPos_t : std::uint32_t
{
	DOOR_SPAWN_CLOSED = 0x0,
	DOOR_SPAWN_OPEN_FORWARD = 0x1,
	DOOR_SPAWN_OPEN_BACK = 0x2,
	DOOR_SPAWN_AJAR = 0x3,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class ForcedCrouchState_t : std::uint32_t
{
	FORCEDCROUCH_NONE = 0x0,
	FORCEDCROUCH_CROUCHED = 0x1,
	FORCEDCROUCH_UNCROUCHED = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 8
// Alignment: 4
// Size: 0x4
enum class TOGGLE_STATE : std::uint32_t
{
	TS_AT_TOP = 0x0,
	TS_AT_BOTTOM = 0x1,
	TS_GOING_UP = 0x2,
	TS_GOING_DOWN = 0x3,
	DOOR_OPEN = 0x0,
	DOOR_CLOSED = 0x1,
	DOOR_OPENING = 0x2,
	DOOR_CLOSING = 0x3,
};

// Registered binary: server.dll (project 'navlib')
// Enumerator count: 20
// Alignment: 4
// Size: 0x4
enum class NavAttributeEnum : std::uint32_t
{
	NAV_MESH_AVOID = 0x80,
	NAV_MESH_STAIRS = 0x1000,
	NAV_MESH_NON_ZUP = 0x8000,
	NAV_MESH_SHORT_HEIGHT = 0x10000,
	NAV_MESH_NON_ZUP_TRANSITION = 0x20000,
	NAV_MESH_CROUCH = 0x10000,
	NAV_MESH_JUMP = 0x2,
	NAV_MESH_PRECISE = 0x4,
	NAV_MESH_NO_JUMP = 0x8,
	NAV_MESH_STOP = 0x10,
	NAV_MESH_RUN = 0x20,
	NAV_MESH_WALK = 0x40,
	NAV_MESH_TRANSIENT = 0x100,
	NAV_MESH_DONT_HIDE = 0x200,
	NAV_MESH_STAND = 0x400,
	NAV_MESH_NO_HOSTAGES = 0x800,
	NAV_MESH_NO_MERGE = 0x2000,
	NAV_MESH_OBSTACLE_TOP = 0x4000,
	NAV_ATTR_FIRST_GAME_INDEX = 0x13,
	NAV_ATTR_LAST_INDEX = 0x1f,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class MoveLinearAuthoredPos_t : std::uint32_t
{
	MOVELINEAR_AUTHORED_AT_START_POSITION = 0x0,
	MOVELINEAR_AUTHORED_AT_OPEN_POSITION = 0x1,
	MOVELINEAR_AUTHORED_AT_CLOSED_POSITION = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 15
// Alignment: 4
// Size: 0x4
enum class WaypointFlags_t : std::uint32_t
{
	// MEnumeratorIsNotAFlag
	WP_NONE = 0x0,
	WP_TO_DETOUR = 0x1,
	WP_TO_PATHCORNER = 0x2,
	WP_TO_NODE = 0x4,
	WP_TO_GOAL = 0x8,
	WP_TO_DOOR = 0x10,
	WP_DONT_SIMPLIFY = 0x20,
	WP_INTERRUPTED_STOP = 0x40,
	WP_FROM_NAVMESH = 0x80,
	WP_FROM_NAVSPACE = 0x100,
	WP_LOCAL_PATH = 0x200,
	WP_RETURN_PATH = 0x400,
	WP_GOAL_FROM_BLOCKED = 0x800,
	WP_PLACED_ON_GROUND = 0x1000,
	WP_PATH_INCOMPLETE_FROM_PROCESSING = 0x2000,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 7
// Alignment: 4
// Size: 0x4
enum class HandshakeState_t : std::uint32_t
{
	eInactive = 0x0,
	eWaitingToBecomeInactive = 0x1,
	eWaitingToBecomeActive = 0x2,
	eWaitingToFinish = 0x3,
	eWaitingForScriptedSequence = 0x4,
	eRestartingFromScriptedSequence = 0x5,
	eFinished = 0x6,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 9
// Alignment: 4
// Size: 0x4
enum class Navigation_t : std::uint32_t
{
	AI_NAV_NONE = 0xffffffff,
	AI_NAV_GROUND = 0x0,
	AI_NAV_JUMP = 0x1,
	AI_NAV_FLY = 0x2,
	AI_NAV_CLIMB = 0x3,
	AI_NAV_LINK = 0x5,
	AI_NAV_NAVLINK = 0x5,
	AI_NAV_TRANSITION = 0x6,
	AI_NAV_ORIENTED = 0x7,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 8
// Alignment: 4
// Size: 0x4
enum class CitadelNPCDamageState_t : std::uint32_t
{
	INVALID = 0xffffffff,
	NONE = 0x0,
	LIGHT = 0x1,
	MEDIUM = 0x2,
	HEAVY = 0x3,
	NEAR_DEATH = 0x4,
	DEAD = 0x5,
	COUNT = 0x6,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 4
// Alignment: 4
// Size: 0x4
enum class AI_MotorForceFacingOwner_t : std::uint32_t
{
	eNone = 0xffffffff,
	eLookTarget = 0x0,
	eMotor = 0x1,
	eCount = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 7
// Alignment: 4
// Size: 0x4
enum class EPointType : std::uint32_t
{
	EPointType_MoveTarget = 0x0,
	EPointType_EnemyBot = 0x1,
	EPointType_EnemyTrooper = 0x2,
	EPointType_FriendlyBot = 0x3,
	EPointType_FriendlyTrooper = 0x4,
	EPointType_DamageZone = 0x5,
	EPointType_MovingEnemyBot = 0x6,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 4
// Alignment: 4
// Size: 0x4
enum class ScriptedMoveType_t : std::uint32_t
{
	SCRIPTED_MOVETYPE_NONE = 0x0,
	SCRIPTED_MOVETYPE_TO_WITH_DURATION = 0x1,
	SCRIPTED_MOVETYPE_TO_WITH_MOVESPEED = 0x2,
	SCRIPTED_MOVETYPE_SWEEP_TO_AT_MOVEMENT_SPEED = 0x3,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 2
// Alignment: 4
// Size: 0x4
enum class ScriptedConflictResponse_t : std::uint32_t
{
	SS_CONFLICT_ENQUEUE = 0x0,
	SS_CONFLICT_INTERRUPT = 0x1,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 4
// Alignment: 4
// Size: 0x4
enum class CAI_InterestTarget__Type_t : std::uint32_t
{
	eDisabled = 0x0,
	eEntity = 0x1,
	ePosition = 0x2,
	eDirection = 0x3,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class doorCheck_e : std::uint32_t
{
	DOOR_CHECK_FORWARD = 0x0,
	DOOR_CHECK_BACKWARD = 0x1,
	DOOR_CHECK_FULL = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class HintIgnoreFacing_t : std::uint32_t
{
	HIF_NO = 0x0,
	HIF_YES = 0x1,
	HIF_DEFAULT = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class TrackOrientationType_t : std::uint32_t
{
	TrackOrientation_Fixed = 0x0,
	TrackOrientation_FacePath = 0x1,
	TrackOrientation_FacePathAngles = 0x2,
};

// Registered binary: server.dll (project 'navlib')
// Enumerator count: 5
// Alignment: 4
// Size: 0x4
enum class NavDirType : std::uint32_t
{
	NORTH = 0x0,
	EAST = 0x1,
	SOUTH = 0x2,
	WEST = 0x3,
	NUM_NAV_DIR_TYPE_DIRECTIONS = 0x4,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 13
// Alignment: 4
// Size: 0x4
enum class AI_NavGoalFlags_t : std::uint32_t
{
	eYawToDest = 0x1,
	eDisableUpdateGoalPos = 0x2,
	eLocalSucceedOnWithinTolerance = 0x4,
	eGoalOffsetInLocalYaw = 0x8,
	eGoalOffsetInLocalSpace = 0x10,
	eDestInWorldSpace = 0x20,
	eDontLimitGoalOffset = 0x40,
	eInterruptPath = 0x80,
	eDisablePathSmoothing = 0x100,
	eClearGoalOffsetOnRepathForMovement = 0x200,
	eUseTargetPredictedPosition = 0x400,
	eDisableTargetPredictedPositionForDynamicPathing = 0x800,
	// MEnumeratorIsNotAFlag
	eDefault = 0x0,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class SimpleConstraintSoundProfile__SimpleConstraintsSoundProfileKeypoints_t : std::uint32_t
{
	kMIN_THRESHOLD = 0x0,
	kMIN_FULL = 0x1,
	kHIGHWATER = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 1
// Alignment: 4
// Size: 0x4
enum class navproperties_t : std::uint32_t
{
	NAV_IGNORE = 0x1,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 57
// Alignment: 4
// Size: 0x4
enum class Hint_e : std::uint32_t
{
	HINT_ANY = 0xffffffff,
	HINT_NONE = 0x0,
	HINT_NOT_USED_WORLD_DOOR = 0x1,
	HINT_WORLD_WINDOW = 0x2,
	HINT_NOT_USED_WORLD_BUTTON = 0x3,
	HINT_NOT_USED_WORLD_MACHINERY = 0x4,
	HINT_NOT_USED_WORLD_LEDGE = 0x5,
	HINT_NOT_USED_WORLD_LIGHT_SOURCE = 0x6,
	HINT_NOT_USED_WORLD_HEAT_SOURCE = 0x7,
	HINT_NOT_USED_WORLD_BLINKING_LIGHT = 0x8,
	HINT_NOT_USED_WORLD_BRIGHT_COLORS = 0x9,
	HINT_NOT_USED_WORLD_HUMAN_BLOOD = 0xa,
	HINT_NOT_USED_WORLD_ALIEN_BLOOD = 0xb,
	HINT_WORLD_WORK_POSITION = 0xc,
	HINT_WORLD_VISUALLY_INTERESTING = 0xd,
	HINT_WORLD_VISUALLY_INTERESTING_DONT_AIM = 0xe,
	HINT_WORLD_INHIBIT_COMBINE_MINES = 0xf,
	HINT_WORLD_VISUALLY_INTERESTING_STEALTH = 0x10,
	HINT_GENERIC = 0x11,
	HINT_TACTICAL_COVER_MED_DEPRECATED = 0x64,
	HINT_TACTICAL_COVER_CENTER = 0x65,
	HINT_TACTICAL_HIDE = 0x66,
	HINT_TACTICAL_PINCH = 0x67,
	HINT_TACTICAL_SENTRY = 0x68,
	HINT_TACTICAL_ENEMY_DISADVANTAGED = 0x69,
	HINT_NOT_USED_HEALTH_KIT = 0x6a,
	HINT_TACTICAL_HIGH_GROUND = 0x6b,
	HINT_TACTICAL_COVER_LEFT = 0x6c,
	HINT_TACTICAL_COVER_RIGHT = 0x6d,
	HINT_TACTICAL_COVER_NARROW = 0x6e,
	HINT_TACTICAL_CREATE_COVER = 0x6f,
	HINT_NOT_USED_URBAN_STREETCORNER = 0xc8,
	HINT_NOT_USED_URBAN_STREETLAMP = 0xc9,
	HINT_NOT_USED_URBAN_DARK_SPOT = 0xca,
	HINT_NOT_USED_URBAN_POSTER = 0xcb,
	HINT_NOT_USED_URBAN_SHELTER = 0xcc,
	HINT_NOT_USED_ASSASSIN_SECLUDED = 0x12c,
	HINT_NOT_USED_ASSASSIN_RAFTERS = 0x12d,
	HINT_NOT_USED_ASSASSIN_GROUND = 0x12e,
	HINT_NOT_USED_ASSASSIN_MONKEYBARS = 0x12f,
	HINT_ANTLION_BURROW_POINT = 0x190,
	HINT_ANTLION_THUMPER_FLEE_POINT = 0x191,
	HINT_HEADCRAB_BURROW_POINT = 0x1c2,
	HINT_HEADCRAB_EXIT_POD_POINT = 0x1c3,
	HINT_NOT_USED_ROLLER_PATROL_POINT = 0x1f4,
	HINT_NOT_USED_ROLLER_CLEANUP_POINT = 0x1f5,
	HINT_NOT_USED_PSTORM_ROCK_SPAWN = 0x258,
	HINT_CROW_FLYTO_POINT = 0x2bc,
	HINT_BUG_PATROL_POINT = 0x320,
	HINT_FOLLOW_WAIT_POINT = 0x384,
	HINT_JUMP_OVERRIDE = 0x385,
	HINT_PLAYER_SQUAD_TRANSITON_POINT = 0x386,
	HINT_NPC_EXIT_POINT = 0x387,
	HINT_STRIDER_NODE = 0x388,
	HINT_PLAYER_ALLY_MOVE_AWAY_DEST = 0x3b6,
	HINT_PLAYER_ALLY_FEAR_DEST = 0x3b7,
	HINT_CSTRIKE_HOSTAGE_ESCAPE = 0x44c,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 2
// Alignment: 4
// Size: 0x4
enum class HandshakeScope_t : std::uint32_t
{
	eTask = 0x0,
	eSchedule = 0x1,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class eSplinePushType : std::uint32_t
{
	// MPropertyFriendlyName "Along Spline Direction"
	k_eSplinePushAlong = 0x0,
	// MPropertyFriendlyName "Away from closest point"
	k_eSplinePushAway = 0x1,
	// MPropertyFriendlyName "Towards closest point"
	k_eSplinePushTowards = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 12
// Alignment: 4
// Size: 0x4
enum class ET2BossActivity : std::uint32_t
{
	IdleShielded = 0x0,
	Staggered = 0x1,
	Stunned = 0x2,
	Wander = 0x3,
	Shooting = 0x4,
	RocketBarrage = 0x5,
	ElectricBeamWindup = 0x6,
	ElectricBeamShoot = 0x7,
	Stomp = 0x8,
	Stomp_Left = 0x9,
	Stomp_Right = 0xa,
	Dying = 0xb,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class TRAIN_CODE : std::uint32_t
{
	TRAIN_SAFE = 0x0,
	TRAIN_BLOCKING = 0x1,
	TRAIN_FOLLOWING = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 4
// Alignment: 4
// Size: 0x4
enum class EMidBossActivity : std::uint32_t
{
	IdleShielded = 0x0,
	Alert = 0x1,
	AlertShooting = 0x2,
	Dying = 0x3,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 4
// Alignment: 4
// Size: 0x4
enum class TaskStatus_t : std::uint32_t
{
	TASKSTATUS_NEW = 0x0,
	TASKSTATUS_RUN_MOVE_AND_TASK = 0x1,
	TASKSTATUS_RUN_TASK = 0x2,
	TASKSTATUS_COMPLETE = 0x3,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class UnreachableTargetType_t : std::uint32_t
{
	UTT_ENTITY = 0x0,
	UTT_WORLDPOS = 0x1,
	UTT_GLOBALSYMBOL = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 2
// Alignment: 4
// Size: 0x4
enum class FuncDoorSpawnPos_t : std::uint32_t
{
	FUNC_DOOR_SPAWN_CLOSED = 0x0,
	FUNC_DOOR_SPAWN_OPEN = 0x1,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class EOverrideBlockLOS_t : std::uint32_t
{
	BLOCK_LOS_DEFAULT = 0x0,
	BLOCK_LOS_FORCE_FALSE = 0x1,
	BLOCK_LOS_FORCE_TRUE = 0x2,
};

// Registered binary: server.dll (project 'server')
// Enumerator count: 3
// Alignment: 4
// Size: 0x4
enum class DevTriggerType_t : std::uint32_t
{
	Invalid = 0x0,
	SpawnIdol = 0x1,
	SpawnNeutrals = 0x2,
};

struct GameTime_t;
struct CEntityIOOutput;
struct fogparams_t;
struct ice_path_shard_model_desc_t;
struct CSkeletonInstance;
struct CPathSimple;
struct CNetworkVelocityVector;
struct AttachmentHandle_t;
struct CCitadelAbilityComponent;
struct CPhysicsNPCSolver;
struct attrib_definition_index_t;
struct ParticleIndex_t;
struct CRemapFloat;
struct CitadelCameraOperationsSequence_t;
struct CAI_Path;
struct CAI_WaypointList;
struct CSimTimer;
struct GameTick_t;
struct fogplayerparams_t;
struct audioparams_t;
struct CModifierLevelFloat;
struct CGameSceneNode;
struct CNetworkVarChainer;
struct CCitadelRegenComponent;
struct HullFlags_t;
struct HintNodeData;
struct CModelState;
struct CBaseAnimGraphController;
struct CPhysicsShake;
struct CPathKeyFrame;
struct CCitadelPayload_PathMarker;
struct DOFDesc_t;
struct CCitadelMinimapComponent;
struct CRangeFloat;
struct CEconItemView;
struct ShotID_t;
struct locksound_t;
struct CountdownTimer;
struct CCitadelModifier;
struct HeroID_t;
struct HeroStatsUI_t;
struct HeroStatsDisplay_t;
struct CitadelStatsDisplay_t;
struct CFootstepTableHandle;
struct CSimpleSimTimer;
struct CAI_MotorNavLink;
struct CAI_MotorTransition;
struct CPathTrack;
struct CFuncTrackTrain;
struct CAI_ScheduleBits;
struct CAI_BehaviorHost;
struct CAI_EnemyServices;
struct CRandStopwatch;
struct CUnreachableTargetList;
struct CAI_AnimGraphServices;
struct CAI_Scheduler;
struct CAI_Navigator;
struct CAI_Motor;
struct CTakeDamageResult;
struct CAnimGraphNetworkedVariables;
struct HSequence;
struct IChoreoServices;
struct PhysicsRagdollPose_t;
struct AttackData_t;
struct ragdoll_t;
struct CAI_ProxTester;
struct AmmoIndex_t;
struct dynpitchvol_t;
struct CitadelAbilityProjectileCreateInfo_t;
struct ModelConfigHandle_t;
struct IncompatibleFilter_t;
struct CCitadelWeaponInfo;
struct ProjectileInfo_t;
struct DeploymentInfo_t;
struct AbilityTooltipDetails_t;
struct CitadelAbilityHUDPanel_t;
struct AdditionalAbilities_t;
struct CCitadelHeroComponent;
struct CCitadelPlayerBot;
struct sky3dparams_t;
struct CSkyCamera;
struct CCitadelAutoScaledTime;
struct CPointCamera;
struct CAttributeManager;
struct CMotorController;
struct CInButtonState;
struct CSkillFloat;
struct AbilityResource_t;
struct CSprite;
struct CCitadelModifierResponseRules_t;
struct ConstraintSoundInfo;
struct CLightComponent;
struct CRenderComponent;
struct CHitboxComponent;
struct CCollisionProperty;
struct CGlowProperty;
struct CNetworkViewOffsetVector;
struct CEnvWindShared;
struct LastIncomingHit_t;
struct SatVolumeIndex_t;
struct CCitadelPlayerClipComponent;
struct NPCStatusEffectMap_t;
struct CSkillInt;
struct CAI_MoveMonitor;
struct AI_FreePassParams_t;
struct ModifierSerialNumber_t;
struct CModifierHandleBase;
struct ModifierQueuedRefreshHandle_t;
struct ModifierRuntimeHandle_t;
struct CConstantForceController;
struct CBreakableStageHelper;
struct CSound;
struct CPropDataComponent;
struct CAttributeContainer;
struct VPhysicsCollisionAttribute_t;
struct ModifierPropRuntimeHandle_t;
struct hudtextparms_t;
struct shard_model_desc_t;
struct ChangeAccessorFieldPathIndex_t;
struct CEntityIdentity;
struct SceneEventId_t;
struct item_definition_index_t;
struct itemid_t;
struct style_index_t;
struct CAttributeList;
struct MatchID_t;
struct CCitadelPlayerPawn;
struct CPlayer_WeaponServices;
struct CPlayer_ItemServices;
struct CPlayer_AutoaimServices;
struct CPlayer_ObserverServices;
struct CPlayer_WaterServices;
struct CPlayer_UseServices;
struct CPlayer_FlashlightServices;
struct CPlayer_CameraServices;
struct CPlayer_MovementServices;
struct CAI_Expresser;
struct CCitadelGameRules;
struct constraint_hingeparams_t;
struct AIScheduleState_t;
struct FireUserEntityIO_t;
struct CScriptComponent;
struct PlayerDataGlobal_t;
struct CitadelLobbyPlayerSlot_t;
struct CEntityInstance;
struct CGameSceneNodeHandle;
struct CNetworkOriginCellCoordQuantizedVector;
struct ModifierTrackedParticle_t;
struct CBodyComponent;
struct CNetworkTransmitComponent;
struct CModifierProperty;
struct AISound_t;
struct CBaseFlex;
struct VelocitySampler;
struct SimpleConstraintSoundProfile;
struct CAI_Behavior;
struct CAI_BaseNPC;
struct NavGravity_t;
struct ResponseFollowup;
struct AI_Waypoint_t;
struct CResponseCriteriaSet;
struct CRR_Response;

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "uint64 m_hStableHandle"
class CModifierHandleBase
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	// MNetworkSerializer "modifier_handle"
	uint64_t m_hStableHandle; // 0x8	
	
	// Datamap fields:
	// void CModifierHandleBase; // 0x0
	// void m_hRuntimeListHandle; // 0x10
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x3e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyStartGroup "Time"
	CModifierLevelFloat m_flDuration; // 0x28	
	// MPropertyStartGroup "Time"
	// MPropertyDescription "If set, the duration will not get reduced from a refresh with a shorter duration"
	bool m_bKeepMaximumDurationOnRefresh; // 0x38	
private:
	[[maybe_unused]] uint8_t __pad0039[0x7]; // 0x39
public:
	// MPropertyStartGroup "Visuals"
	// MPropertyDescription "Particle system to attach to the parent of the modifier"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strParticleEffect; // 0x40	
	// MPropertyStartGroup "Visuals"
	// MPropertyDescription "Name of particle control point config to use for ambient effect (empty means use 'preview' config)"
	CUtlString m_strParticleEffectConfig; // 0x120	
	// MPropertyGroupName "Visuals"
	// MPropertyDescription "Status Effect to apply to the parent of the modifier"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strParticleStatusEffect; // 0x128	
	// MPropertyStartGroup "Visuals"
	// MPropertyDescription "Name of particle control point config to use for status effect (empty means use 'preview' config)"
	CUtlString m_strParticleStatusEffectConfig; // 0x208	
	// MPropertyGroupName "Visuals"
	// MPropertyDescription "Screen-space particle system to create if the parent of the modifier is the local player"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strScreenParticleEffect; // 0x210	
	// MPropertyStartGroup "Visuals"
	// MPropertyDescription "Name of particle control point config to use for screen-space effect (empty means use 'preview' config)"
	CUtlString m_strScreenParticleEffectConfig; // 0x2f0	
	// MPropertyGroupName "Visuals"
	// MPropertyDescription "Priority of this status effect relative to others"
	int32_t m_nStatusEffectPriority; // 0x2f8	
private:
	[[maybe_unused]] uint8_t __pad02fc[0x4]; // 0x2fc
public:
	// MPropertyGroupName "Visuals"
	CUtlVector< ModifierRenderAttribute_t > m_vecRenderAttributes; // 0x300	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_sStartSound; // 0x318	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_sAmbientLoopingSound; // 0x328	
	// MPropertyGroupName "Sounds"
	ModifierSoundRecipients_t m_nAmbientLoopingSoundRecipients; // 0x338	
private:
	[[maybe_unused]] uint8_t __pad033c[0x4]; // 0x33c
public:
	// MPropertyGroupName "Sounds"
	CSoundEventName m_sEndSound; // 0x340	
	// MPropertyGroupName "Scripted Settings"
	CBitVecEnum< EModifierState > m_nEnabledStateMask; // 0x350	
	// MPropertyGroupName "Scripted Settings"
	CBitVecEnum< EModifierState > m_nDisabledStateMask; // 0x368	
	// MPropertyGroupName "Scripted Settings"
	ModifierAttribute_t m_nAttributes; // 0x380	
private:
	[[maybe_unused]] uint8_t __pad0384[0x4]; // 0x384
public:
	// MPropertyGroupName "Scripted Settings"
	// MPropertyDescription "Scripted Modifier Values"
	CUtlVector< ModifierScriptValue_t > m_vecScriptValues; // 0x388	
	// MPropertyGroupName "Scripted Settings"
	// MPropertyDescription "Scripted Event Handlers"
	CUtlVector< ModifierScriptedEventHandler_t > m_vecScriptEventHandlers; // 0x3a0	
	ModifierDisableGroup_t m_nDisableGroupsMask; // 0x3b8	
	// MPropertyDescription "When set, the modifier only provides data to requests made directly to the attached entity and not to other modifier properties that the owner provides to."
	bool m_bPrivateAccess; // 0x3bc	
	// MPropertyGroupName "UI"
	// MPropertyDescription "When set, the modifier will not be visible to UI or visible modifier list."
	bool m_bIsHidden; // 0x3bd	
private:
	[[maybe_unused]] uint8_t __pad03be[0x2]; // 0x3be
public:
	// MPropertyGroupName "UI"
	// MPropertySuppressExpr "m_bIsHidden != true"
	ModifierHiddenType_t m_eHiddenType; // 0x3c0	
private:
	[[maybe_unused]] uint8_t __pad03c4[0x4]; // 0x3c4
public:
	// MPropertyGroupName "UI"
	// MPropertyDescription "When set, use the value as localization key."
	CUtlString m_sLocalizationName; // 0x3c8	
	// MPropertyDescription "When to consider the modifier a debuff."
	ModifierDebuffType_t m_eDebuffType; // 0x3d0	
	// MPropertyDescription "When set, stacks will automatically be decayed after a duration's worth of time has passed.  Only makes sense if adding a stack refreshed the modifier."
	bool m_bAutomaticallyDecayStacks; // 0x3d4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x90
// Has VTable
// Is Abstract
class CBaseModifier
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x28]; // 0x0
public:
	ModifierSerialNumber_t m_nSerialNumber; // 0x28	
	GameTime_t m_flLastAppliedTime; // 0x2c	
	GameTime_t m_flCreationTime; // 0x30	
	float m_flDuration; // 0x34	
	CHandle< CBaseEntity > m_hCaster; // 0x38	
	CHandle< CBaseEntity > m_hAbility; // 0x3c	
	CModifierHandleBase m_hAuraProvider; // 0x40	
	ModifierQueuedRefreshHandle_t m_nQueuedModifierRefreshHandle; // 0x58	
	uint8_t m_iAttributes; // 0x5a	
	uint8_t m_iTeam; // 0x5b	
	int16_t m_iStackCount; // 0x5c	
	int16_t m_iMaxStackCount; // 0x5e	
	CUtlVector< GameTime_t >* m_pVecStackDecayTimes; // 0x60	
	uint8_t m_eDestroyReason; // 0x68	
	bool m_bDisabled; // 0x69	
	bool m_bSuppressSendModifier; // 0x6a	
private:
	[[maybe_unused]] uint8_t __pad006b[0x1]; // 0x6b
public:
	float m_flThinkInterval; // 0x6c	
	GameTime_t m_flThinkIntervalStartTime; // 0x70	
	float m_flTimeScale; // 0x74	
	CUtlVector< IModifierTrackedObject* >* m_pVecTrackedObjects; // 0x78	
	ModifierRuntimeHandle_t m_hModifierListHandle; // 0x80	
	int32_t m_iStringIndex; // 0x84	
	uint8_t m_nDebugHelperFlags; // 0x88	
	
	// Datamap fields:
	// void m_pModifierProp; // 0x20
	// void m_pSubclassVData; // 0x10
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x58
// Has VTable
// 
// MNetworkVarNames "int32 m_iGlowType"
// MNetworkVarNames "int32 m_iGlowTeam"
// MNetworkVarNames "int32 m_nGlowRange"
// MNetworkVarNames "int32 m_nGlowRangeMin"
// MNetworkVarNames "Color m_glowColorOverride"
// MNetworkVarNames "bool m_bFlashing"
// MNetworkVarNames "float m_flGlowTime"
// MNetworkVarNames "float m_flGlowStartTime"
class CGlowProperty
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	Vector m_fGlowColor; // 0x8	
private:
	[[maybe_unused]] uint8_t __pad0014[0x1c]; // 0x14
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnGlowTypeChanged"
	int32_t m_iGlowType; // 0x30	
	// MNetworkEnable
	int32_t m_iGlowTeam; // 0x34	
	// MNetworkEnable
	int32_t m_nGlowRange; // 0x38	
	// MNetworkEnable
	int32_t m_nGlowRangeMin; // 0x3c	
	// MNetworkEnable
	// MNetworkChangeCallback "OnGlowColorChanged"
	Color m_glowColorOverride; // 0x40	
	// MNetworkEnable
	bool m_bFlashing; // 0x44	
private:
	[[maybe_unused]] uint8_t __pad0045[0x3]; // 0x45
public:
	// MNetworkEnable
	float m_flGlowTime; // 0x48	
	// MNetworkEnable
	float m_flGlowStartTime; // 0x4c	
	bool m_bGlowing; // 0x50	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
// Is Abstract
class CCitadelModifier : public CBaseModifier
{
public:
	// Datamap fields:
	// void m_pVecAbilityValues; // 0xa0
	// float m_flEffectiveness; // 0xa8
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x198
// Has VTable
class CCitadel_Modifier_Rutger_ForceField_PushOut : public CCitadelModifier
{
public:
	Vector m_vStart; // 0xc8	
	Vector m_vDest; // 0xd4	
	Vector m_vCenter; // 0xe0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
// MPropertySuppressBaseClassField
// MPropertySuppressBaseClassField
class CCitadelModifierVData : public CModifierVData
{
public:
	bool m_bIsBuildup; // 0x3e8	
	// MPropertySuppressField
	bool m_bNetworkValuesForStatsPreview; // 0x3e9	
private:
	[[maybe_unused]] uint8_t __pad03ea[0x6]; // 0x3ea
public:
	CUtlVector< CUtlString > m_vecAutoRegisterModifierValueFromAbilityPropertyName; // 0x3f0	
	// MPropertyStartGroup "Kill & Assist Credit"
	bool m_bCasterCountsAsAssister; // 0x408	
private:
	[[maybe_unused]] uint8_t __pad0409[0x3]; // 0x409
public:
	// MPropertyDescription "When set, an additional, invisible modifier will be left on the parent when this modifier expires.  This is to aid in giving assist credit for modifiers that deal no damage (ex. Astro's Lasso)"
	float m_flLingeringAssistWindow; // 0x40c	
	// MPropertyStartGroup "Time"
	// MPropertyDescription "When set, the duration will get scaled depending on the owner's timescale"
	bool m_bDurationCanBeTimeScaled; // 0x410	
	bool m_bDurationReducible; // 0x411	
private:
	[[maybe_unused]] uint8_t __pad0412[0x2]; // 0x412
public:
	// MPropertyDescription "Whose timescale to use when adjusting duration."
	ModifierTimeScaleSource_t m_eTimeScaleSource; // 0x414	
	// MPropertyDescription "When true, the 'effectiveness' value for the modifier will be used to scale the duration. You most likely want 'Keep Maximum Duration On Refresh' to match this value"
	bool m_bDurationAffectedByEffectiveness; // 0x418	
private:
	[[maybe_unused]] uint8_t __pad0419[0x7]; // 0x419
public:
	// MPropertyStartGroup "Visuals"
	// MPropertyDescription "A list of AnimGraph parameters whose values will get set to a specific value when this modifier is applied, and restored when the modifier is destroyed."
	CUtlVector< CCitadelTrackedAnimGraphModifierState_t > m_vecSetAndTrackedAnimGraphParams; // 0x420	
	// MPropertyDescription "A list of Bodygroups whose values will get set to a specific value when this modifier is applied, and restored when the modifier is destroyed."
	CUtlVector< CCitadelTrackedBodygroupModifierState_t > m_vecSetAndTrackedBodyGroups; // 0x438	
	// MPropertyStartGroup "UI"
	ModifierOverheadDrawType_t m_eDrawOverheadStatus; // 0x450	
	bool m_bReverseHudProgressBar; // 0x454	
private:
	[[maybe_unused]] uint8_t __pad0455[0x3]; // 0x455
public:
	CUtlString m_strSmallIconCssClass; // 0x458	
	CUtlString m_strHintText; // 0x460	
	CPanoramaImageName m_strHudIcon; // 0x468	
	HudDisplayLocation_t m_eHudDisplayLocation; // 0x478	
private:
	[[maybe_unused]] uint8_t __pad047c[0x4]; // 0x47c
public:
	// MPropertyDescription "When set, the message will appear in the middle of the HUD for the target player."
	CUtlString m_strHudMessageText; // 0x480	
	// MPropertyDescription "When set, the modifier will not be visible overhead of the casting player for the other players"
	bool m_bIsHiddenOverhead; // 0x488	
private:
	[[maybe_unused]] uint8_t __pad0489[0x7]; // 0x489
public:
	// MPropertyDescription "A set of modifier values that will be forced tp show in the UI if they have a value (normally requires a limited duration set)"
	CUtlVector< EModifierValue > m_vecAlwaysShowInStatModifierUI; // 0x490	
	// MPropertyStartGroup "Responses"
	CCitadelModifierResponseRules_t m_OnCreateResponse; // 0x4a8	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceCreated; // 0x4e0	
	// MPropertyDescription "By default, we stop the sequence from 'Sequence Created' once the modifier is removed.  Un-check this to allow it to continue past the modifier's lifetime."
	bool m_bEndCreatedSequenceOnRemove; // 0x560	
private:
	[[maybe_unused]] uint8_t __pad0561[0x7]; // 0x561
public:
	CitadelCameraOperationsSequence_t m_cameraSequenceRemoved; // 0x568	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_sExpiredSound; // 0x5e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_LingeringAssist : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'entity2')
// Alignment: 8
// Size: 0x8
// Has VTable
// Is Abstract
// Has Trivial Destructor
class CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
// Has Trivial Destructor
class CPropDataComponent : public CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0008[0x8]; // 0x8
public:
	float m_flDmgModBullet; // 0x10	
	float m_flDmgModClub; // 0x14	
	float m_flDmgModExplosive; // 0x18	
	float m_flDmgModFire; // 0x1c	
	CUtlSymbolLarge m_iszPhysicsDamageTableName; // 0x20	
	CUtlSymbolLarge m_iszBasePropData; // 0x28	
	int32_t m_nInteractions; // 0x30	
	bool m_bSpawnMotionDisabled; // 0x34	
private:
	[[maybe_unused]] uint8_t __pad0035[0x3]; // 0x35
public:
	int32_t m_nDisableTakePhysicsDamageSpawnFlag; // 0x38	
	int32_t m_nMotionDisabledSpawnFlag; // 0x3c	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CPropDataComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_referenced_but_impl_is_contained(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CPropDataComponent")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'entity2')
// Alignment: 8
// Size: 0x38
// Has VTable
// 
// MNetworkVarNames "CEntityIdentity * m_pEntity"
// MNetworkVarNames "CScriptComponent::Storage_t m_CScriptComponent"
class CEntityInstance
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkDisable
	CUtlSymbolLarge m_iszPrivateVScripts; // 0x8	
	// MNetworkEnable
	// MNetworkPriority "56"
	CEntityIdentity* m_pEntity; // 0x10	
private:
	[[maybe_unused]] uint8_t __pad0018[0x10]; // 0x18
public:
	// MNetworkEnable
	// MNetworkDisable
	CScriptComponent* m_CScriptComponent; // 0x28	
	bool m_bVisibleinPVS; // 0x30	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
// MVDataOverlayType "2"
class CitadelAbilityVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyStartGroup "Meta"
	EAbilityType_t m_eAbilityType; // 0x28	
	// MPropertyStartGroup "Meta"
	EItemSlotTypes_t m_eItemSlotType; // 0x29	
	bool m_bDisabled; // 0x2a	
	bool m_bInDevelopment; // 0x2b	
	bool m_bStartTrained; // 0x2c	
private:
	[[maybe_unused]] uint8_t __pad002d[0x3]; // 0x2d
public:
	int32_t m_iMaxLevel; // 0x30	
	int32_t m_nAbilityPointsCost; // 0x34	
	int32_t m_nAbillityUnlocksCost; // 0x38	
private:
	[[maybe_unused]] uint8_t __pad003c[0x4]; // 0x3c
public:
	uint64_t m_iUpdateTime; // 0x40	
private:
	[[maybe_unused]] uint8_t __pad0048[0x8]; // 0x48
public:
	// MPropertyStartGroup "Behavior"
	EAbilityBehavior_t m_nAbilityBehaviors; // 0x50	
	EAbilityTargetingLocation_t m_eAbilityTargetingLocation; // 0x58	
	EAbilityTargetingShape_t m_eAbilityTargetingShape; // 0x5c	
	// MPropertySuppressExpr "m_eAbilityTargetingShape != CITADEL_ABILITY_TARGETING_SHAPE_CONE"
	float m_flTargetingConeAngle; // 0x60	
	// MPropertySuppressExpr "m_eAbilityTargetingShape != CITADEL_ABILITY_TARGETING_SHAPE_CONE"
	float m_flTargetingConeHalfWidth; // 0x64	
	// MPropertyDescription "When true, we will do an extra trace with the same cone shape, but with the cone laying flat in XY"
	// MPropertySuppressExpr "m_eAbilityTargetingShape != CITADEL_ABILITY_TARGETING_SHAPE_CONE"
	bool m_bIncludeExtra2DCone; // 0x68	
private:
	[[maybe_unused]] uint8_t __pad0069[0x3]; // 0x69
public:
	EAbilityActivation_t m_eAbilityActivation; // 0x6c	
	// MPropertyDescription "If set, this button must be down in addition to our trigger button (be default the slot button) in order to activate this ability."
	InputBitMask_t m_TriggerButtonPreReqButton; // 0x70	
	// MPropertyDescription "If set, this is the button requierd to be pressed to activate this ability."
	InputBitMask_t m_TriggerButtonOverride; // 0x78	
	EAbilitySpectatePriority m_eAbilitySpectatePriority; // 0x80	
private:
	[[maybe_unused]] uint8_t __pad0081[0x3]; // 0x81
public:
	CBitVecEnum< EModifierState > m_bitsInterruptingStates; // 0x84	
private:
	[[maybe_unused]] uint8_t __pad009c[0x4]; // 0x9c
public:
	IncompatibleFilter_t m_IncompatibleFilter; // 0xa0	
	CITADEL_UNIT_TARGET_TYPE m_nAbilityTargetTypes; // 0xb0	
	CITADEL_UNIT_TARGET_FLAGS m_nAbilityTargetFlags; // 0xb4	
	// MPropertyDescription "During post-cast, what modifier states are set."
	CBitVecEnum< EModifierState > m_bitsPostCastEnabledStateMask; // 0xb8	
	// MPropertyDescription "This ability provides these types of ability target effects."
	ECitadelTargetAbilityEffects m_TargetAbilityEffectsToApply; // 0xd0	
	bool m_bShowTargetingPreviewWhileChanneling; // 0xd4	
	bool m_bShowTargetingPreviewWhileCasting; // 0xd5	
private:
	[[maybe_unused]] uint8_t __pad00d6[0x2]; // 0xd6
public:
	// MPropertyStartGroup
	// MPropertyFriendlyName "Weapon Info"
	CCitadelWeaponInfo m_WeaponInfo; // 0xd8	
	// MPropertyFriendlyName "Projectile Info"
	ProjectileInfo_t m_projectileInfo; // 0x730	
	// MPropertyFriendlyName "Deployment Info"
	DeploymentInfo_t m_deploymentInfo; // 0xaa0	
	// MPropertyStartGroup
	CUtlOrderedMap< CUtlString, CitadelAbilityProperty_t > m_mapAbilityProperties; // 0xc80	
	CUtlVector< CSubclassName< 4 > > m_vecDependentAbilities; // 0xca8	
	CUtlVector< AbilityUpgrade_t > m_vecAbilityUpgrades; // 0xcc0	
private:
	[[maybe_unused]] uint8_t __pad0cd8[0x20]; // 0xcd8
public:
	// MPropertyStartGroup "AnimGraph"
	// MPropertyLeafSuggestionProviderFn
	CGlobalSymbol m_strCastAnimGraphParam; // 0xcf8	
	// MPropertyDescription "If set, this will be the value passed to the animgraph when this ability is selected instead of the ability name."
	CUtlString m_strSelectionNameOverride; // 0xd00	
	CUtlString m_strCastAnimSequenceName; // 0xd08	
	// MPropertyStartGroup "UI"
	// MPropertySuppressExpr "m_bIsSignatureAbility == false"
	AbilityTooltipDetails_t m_AbilityTooltipDetails; // 0xd10	
	CUtlString m_strCSSClass; // 0xd40	
	CPanoramaImageName m_strAbilityImage; // 0xd48	
	CUtlString m_strMoviePreviewPath; // 0xd58	
	CitadelAbilityHUDPanel_t m_HUDPanel; // 0xd60	
	bool m_bShowInPassiveItemsArea; // 0xd98	
	bool m_bForceShowHUDPanel; // 0xd99	
private:
	[[maybe_unused]] uint8_t __pad0d9a[0x6]; // 0xd9a
public:
	// MPropertyFriendlyName "Additional Abilities"
	AdditionalAbilities_t m_additionalAbilities; // 0xda0	
	CUtlString m_strCancelAbilityKey; // 0xdc0	
	CUtlString m_strSecondaryStatName; // 0xdc8	
	// MPropertyStartGroup "Camera"
	// MPropertyDescription "Camera sequence that plays when casting starts and stops when casting completes, unless the bool below is un-checked"
	CitadelCameraOperationsSequence_t m_cameraSequenceCastStart; // 0xdd0	
	// MPropertyDescription "By default, we stop the sequence from 'Sequence Cast Start' once the cast completes successfully.  Un-check this to allow it to continue past the cast."
	bool m_bEndCastStartSequenceOnCastComplete; // 0xe50	
private:
	[[maybe_unused]] uint8_t __pad0e51[0x7]; // 0xe51
public:
	// MPropertyDescription "Camera sequence that plays when casting completes."
	CitadelCameraOperationsSequence_t m_cameraSequenceCastComplete; // 0xe58	
	// MPropertyDescription "Camera sequence that plays when channeling starts and is stopped when channeling ends, unless the bool below is un-checked."
	CitadelCameraOperationsSequence_t m_cameraSequenceChannelStart; // 0xed8	
	// MPropertyDescription "By default, we stop the sequence from 'Sequence Channel Start' once the channel completes successfully.  Un-check this to allow it to continue past the channel duration."
	bool m_bEndChannelStartSequenceOnChannelComplete; // 0xf58	
private:
	[[maybe_unused]] uint8_t __pad0f59[0x3]; // 0xf59
public:
	float m_flCameraPreviewOffset; // 0xf5c	
	float m_flCameraPreviewDistance; // 0xf60	
	float m_flCameraPreviewSpeed; // 0xf64	
	// MPropertyStartGroup "Visuals"
	// MPropertyDescription "Preview particle attaching to the caster before cast"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_previewParticle; // 0xf68	
	// MPropertyDescription "Preview path particle shows ability's custom path"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PreviewPathParticle; // 0x1048	
	// MPropertyDescription "Particle attaching to the caster on cast event"
	CUtlOrderedMap< AbilityCastEvent_t, CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > > m_mapCastEventParticles; // 0x1128	
	// MPropertyDescription "Trace particle when hit an enemy with targeted ability"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_skillshotHitParticle; // 0x1150	
	// MPropertyDescription "Trace particle when missed an enemy with targeted ability"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_skillshotMissParticle; // 0x1230	
	// MPropertyDescription "Preview particle on attaching to targets of this ability"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetingPreviewParticle; // 0x1310	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strSelectedSound; // 0x13f0	
	CSoundEventName m_strUnselectedSound; // 0x1400	
	CSoundEventName m_strSelectedLoopSound; // 0x1410	
	CSoundEventName m_strCastSound; // 0x1420	
	CSoundEventName m_strChannelSound; // 0x1430	
	CSoundEventName m_strChannelLoopSound; // 0x1440	
	CSoundEventName m_strCastDelaySound; // 0x1450	
	CSoundEventName m_strCastDelayLoopSound; // 0x1460	
	// MPropertyDescription "plays for local player attacker dealing damage with this ability"
	CSoundEventName m_strHitConfirmationSound; // 0x1470	
	// MPropertyDescription "plays for local player victim taking damage from this ability"
	CSoundEventName m_strDamageTakenSound; // 0x1480	
	CSoundEventName m_strAbilityOffCooldownSound; // 0x1490	
	CSoundEventName m_strAbilityChargeReadySound; // 0x14a0	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_AutoChannelModifier; // 0x14b0	
	CEmbeddedSubclass< CBaseModifier > m_AutoCastDelayModifier; // 0x14c0	
	CUtlVector< CEmbeddedSubclass< CBaseModifier > > m_AutoIntrinsicModifiers; // 0x14d0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Tokamak_CrimsonCannonVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaserShot; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChargeParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CasterOnlyTargetParticle; // 0x16a8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EnemyTargetedParticle; // 0x1788	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strEnemyBeenTargetedSound; // 0x1868	
	CSoundEventName m_strCasterTargetSelectedSound; // 0x1878	
	CSoundEventName m_strFireSound; // 0x1888	
	CSoundEventName m_strImpactSound; // 0x1898	
	CSoundEventName m_strBlockedSound; // 0x18a8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_HollowPoint_Proc : public CCitadelModifier
{
public:
	int32_t m_nStacksPerBullet; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x628
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BaseEventProcVData : public CCitadelModifierVData
{
public:
	bool m_bProcChanceAffectedByEffectiveness; // 0x5f8	
	bool m_bShouldApplyAbilityCooldown; // 0x5f9	
	// MPropertySuppressExpr "m_bCanProcMultipleTimesFromSameShot != true"
	bool m_bCanProcMultipleTimesOnOneTarget; // 0x5fa	
	bool m_bCanProcByOtherObjects; // 0x5fb	
	CITADEL_UNIT_TARGET_TYPE m_nAbilityTargetTypes; // 0x5fc	
	CITADEL_UNIT_TARGET_FLAGS m_nAbilityTargetFlags; // 0x600	
private:
	[[maybe_unused]] uint8_t __pad0604[0x4]; // 0x604
public:
	CUtlVector< ECitadelDamageType > m_vecProcDamageTypes; // 0x608	
	TakeDamageFlags_t m_nRequiredDamageFlags; // 0x620	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x68
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "Vector dirPrimary"
// MNetworkVarNames "Color colorPrimary"
// MNetworkVarNames "Color colorSecondary"
// MNetworkVarNames "Color colorPrimaryLerpTo"
// MNetworkVarNames "Color colorSecondaryLerpTo"
// MNetworkVarNames "float32 start"
// MNetworkVarNames "float32 end"
// MNetworkVarNames "float32 farz"
// MNetworkVarNames "float32 maxdensity"
// MNetworkVarNames "float32 exponent"
// MNetworkVarNames "float32 HDRColorScale"
// MNetworkVarNames "float32 skyboxFogFactor"
// MNetworkVarNames "float32 skyboxFogFactorLerpTo"
// MNetworkVarNames "float32 startLerpTo"
// MNetworkVarNames "float32 endLerpTo"
// MNetworkVarNames "float32 maxdensityLerpTo"
// MNetworkVarNames "GameTime_t lerptime"
// MNetworkVarNames "float32 duration"
// MNetworkVarNames "float32 blendtobackground"
// MNetworkVarNames "float32 scattering"
// MNetworkVarNames "float32 locallightscale"
// MNetworkVarNames "bool enable"
// MNetworkVarNames "bool blend"
// MNetworkVarNames "bool m_bNoReflectionFog"
struct fogparams_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector dirPrimary; // 0x8	
	// MNetworkEnable
	Color colorPrimary; // 0x14	
	// MNetworkEnable
	Color colorSecondary; // 0x18	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	Color colorPrimaryLerpTo; // 0x1c	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	Color colorSecondaryLerpTo; // 0x20	
	// MNetworkEnable
	float start; // 0x24	
	// MNetworkEnable
	float end; // 0x28	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	float farz; // 0x2c	
	// MNetworkEnable
	float maxdensity; // 0x30	
	// MNetworkEnable
	float exponent; // 0x34	
	// MNetworkEnable
	float HDRColorScale; // 0x38	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	float skyboxFogFactor; // 0x3c	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	float skyboxFogFactorLerpTo; // 0x40	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	float startLerpTo; // 0x44	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	float endLerpTo; // 0x48	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	float maxdensityLerpTo; // 0x4c	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	GameTime_t lerptime; // 0x50	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	float duration; // 0x54	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	float blendtobackground; // 0x58	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	float scattering; // 0x5c	
	// MNetworkEnable
	// MNetworkUserGroup "FogController"
	float locallightscale; // 0x60	
	// MNetworkEnable
	bool enable; // 0x64	
	// MNetworkEnable
	bool blend; // 0x65	
	// MNetworkEnable
	bool m_bNoReflectionFog; // 0x66	
	bool m_bPadding; // 0x67	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x28
// Has VTable
// 
// MNetworkVarNames "uint32 m_bvDisabledHitGroups"
class CHitboxComponent : public CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0008[0x1c]; // 0x8
public:
	// MNetworkEnable
	uint32_t m_bvDisabledHitGroups[1]; // 0x24	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CHitboxComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_referenced_but_impl_is_contained(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CHitboxComponent")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
// 
// MNetworkExcludeByName "m_bClientSideRagdoll"
// MNetworkExcludeByName "m_iMaxHealth"
// MNetworkExcludeByUserGroup "Water"
// MNetworkExcludeByUserGroup "Player"
// MNetworkExcludeByUserGroup "LocalPlayerExclusive"
// MNetworkExcludeByName "m_spawnflags"
// MNetworkExcludeByName "m_bTakesDamage"
// MNetworkExcludeByName "m_nTakeDamageFlags"
// MNetworkExcludeByName "m_flSpeed"
// MNetworkVarNames "CBodyComponent::Storage_t m_CBodyComponent"
// MNetworkVarNames "int32 m_iHealth"
// MNetworkVarNames "int32 m_iMaxHealth"
// MNetworkVarNames "uint8 m_lifeState"
// MNetworkVarNames "bool m_bTakesDamage"
// MNetworkVarNames "TakeDamageFlags_t m_nTakeDamageFlags"
// MNetworkVarNames "EntityPlatformTypes_t m_nPlatformType"
// MNetworkVarNames "MoveCollide_t m_MoveCollide"
// MNetworkVarNames "MoveType_t m_MoveType"
// MNetworkVarNames "EntitySubclassID_t m_nSubclassID"
// MNetworkVarNames "float32 m_flAnimTime"
// MNetworkVarNames "float32 m_flSimulationTime"
// MNetworkVarNames "GameTime_t m_flCreateTime"
// MNetworkVarNames "bool m_bClientSideRagdoll"
// MNetworkVarNames "uint8 m_ubInterpolationFrame"
// MNetworkVarNames "uint8 m_iTeamNum"
// MNetworkVarNames "float m_flSpeed"
// MNetworkVarNames "uint32 m_spawnflags"
// MNetworkVarNames "GameTick_t m_nNextThinkTick"
// MNetworkVarNames "uint32 m_fFlags"
// MNetworkVarNames "CNetworkVelocityVector m_vecVelocity"
// MNetworkVarNames "CModifierProperty * m_pModifierProp"
// MNetworkVarNames "CHandle< CBaseEntity> m_hEffectEntity"
// MNetworkVarNames "CHandle< CBaseEntity> m_hOwnerEntity"
// MNetworkVarNames "uint32 m_fEffects"
// MNetworkVarNames "CHandle< CBaseEntity> m_hGroundEntity"
// MNetworkVarNames "int m_nGroundBodyIndex"
// MNetworkVarNames "float32 m_flFriction"
// MNetworkVarNames "float32 m_flElasticity"
// MNetworkVarNames "float32 m_flGravityScale"
// MNetworkVarNames "float32 m_flTimeScale"
// MNetworkVarNames "float m_flWaterLevel"
// MNetworkVarNames "bool m_bAnimatedEveryTick"
// MNetworkVarNames "GameTime_t m_flNavIgnoreUntilTime"
class CBaseEntity : public CEntityInstance
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CBodyComponent"
	// MNetworkAlias "CBodyComponent"
	// MNetworkTypeAlias "CBodyComponent"
	// MNetworkPriority "48"
	CBodyComponent* m_CBodyComponent; // 0x38	
	CNetworkTransmitComponent m_NetworkTransmitComponent; // 0x40	
private:
	[[maybe_unused]] uint8_t __pad01e0[0x40]; // 0x1e0
public:
	CUtlVector< thinkfunc_t > m_aThinkFunctions; // 0x220	
	int32_t m_iCurrentThinkContext; // 0x238	
	GameTick_t m_nLastThinkTick; // 0x23c	
	bool m_bDisabledContextThinks; // 0x240	
private:
	[[maybe_unused]] uint8_t __pad0241[0xf]; // 0x241
public:
	CBitVec< 64 > m_isSteadyState; // 0x250	
	float m_lastNetworkChange; // 0x258	
private:
	[[maybe_unused]] uint8_t __pad025c[0xc]; // 0x25c
public:
	CUtlVector< ResponseContext_t > m_ResponseContexts; // 0x268	
	CUtlSymbolLarge m_iszResponseContext; // 0x280	
private:
	[[maybe_unused]] uint8_t __pad0288[0x20]; // 0x288
public:
	// MNetworkEnable
	// MNetworkSerializer "ClampHealth"
	// MNetworkUserGroup "Player"
	// MNetworkPriority "32"
	int32_t m_iHealth; // 0x2a8	
	// MNetworkEnable
	int32_t m_iMaxHealth; // 0x2ac	
	// MNetworkEnable
	// MNetworkUserGroup "Player"
	// MNetworkPriority "32"
	uint8_t m_lifeState; // 0x2b0	
private:
	[[maybe_unused]] uint8_t __pad02b1[0x3]; // 0x2b1
public:
	float m_flDamageAccumulator; // 0x2b4	
	// MNetworkEnable
	bool m_bTakesDamage; // 0x2b8	
private:
	[[maybe_unused]] uint8_t __pad02b9[0x7]; // 0x2b9
public:
	// MNetworkEnable
	TakeDamageFlags_t m_nTakeDamageFlags; // 0x2c0	
	// MNetworkEnable
	EntityPlatformTypes_t m_nPlatformType; // 0x2c8	
private:
	[[maybe_unused]] uint8_t __pad02c9[0x1]; // 0x2c9
public:
	// MNetworkEnable
	MoveCollide_t m_MoveCollide; // 0x2ca	
	// MNetworkEnable
	MoveType_t m_MoveType; // 0x2cb	
	MoveType_t m_nActualMoveType; // 0x2cc	
	uint8_t m_nWaterTouch; // 0x2cd	
	uint8_t m_nSlimeTouch; // 0x2ce	
	bool m_bRestoreInHierarchy; // 0x2cf	
	CUtlSymbolLarge m_target; // 0x2d0	
	CHandle< CBaseFilter > m_hDamageFilter; // 0x2d8	
private:
	[[maybe_unused]] uint8_t __pad02dc[0x4]; // 0x2dc
public:
	CUtlSymbolLarge m_iszDamageFilterName; // 0x2e0	
	float m_flMoveDoneTime; // 0x2e8	
	// MNetworkEnable
	// MNetworkSendProxyRecipientsFilter
	CUtlStringToken m_nSubclassID; // 0x2ec	
private:
	[[maybe_unused]] uint8_t __pad02f0[0x8]; // 0x2f0
public:
	// MNetworkEnable
	// MNetworkPriority "0"
	// MNetworkSerializer "animTimeSerializer"
	// MNetworkSendProxyRecipientsFilter
	float m_flAnimTime; // 0x2f8	
	// MNetworkEnable
	// MNetworkPriority "1"
	// MNetworkSerializer "simulationTimeSerializer"
	// MNetworkSendProxyRecipientsFilter
	float m_flSimulationTime; // 0x2fc	
	// MNetworkEnable
	GameTime_t m_flCreateTime; // 0x300	
	// MNetworkEnable
	bool m_bClientSideRagdoll; // 0x304	
	// MNetworkEnable
	uint8_t m_ubInterpolationFrame; // 0x305	
private:
	[[maybe_unused]] uint8_t __pad0306[0x2]; // 0x306
public:
	Vector m_vPrevVPhysicsUpdatePos; // 0x308	
	// MNetworkEnable
	uint8_t m_iTeamNum; // 0x314	
private:
	[[maybe_unused]] uint8_t __pad0315[0x3]; // 0x315
public:
	CUtlSymbolLarge m_iGlobalname; // 0x318	
	int32_t m_iSentToClients; // 0x320	
	// MNetworkEnable
	float m_flSpeed; // 0x324	
	CUtlString m_sUniqueHammerID; // 0x328	
	// MNetworkEnable
	uint32_t m_spawnflags; // 0x330	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	GameTick_t m_nNextThinkTick; // 0x334	
	int32_t m_nSimulationTick; // 0x338	
private:
	[[maybe_unused]] uint8_t __pad033c[0x4]; // 0x33c
public:
	CEntityIOOutput m_OnKilled; // 0x340	
	// MNetworkEnable
	// MNetworkPriority "32"
	// MNetworkUserGroup "Player"
	uint32_t m_fFlags; // 0x368	
	Vector m_vecAbsVelocity; // 0x36c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	// MNetworkPriority "32"
	CNetworkVelocityVector m_vecVelocity; // 0x378	
private:
	[[maybe_unused]] uint8_t __pad03a0[0x8]; // 0x3a0
public:
	int32_t m_nPushEnumCount; // 0x3a8	
private:
	[[maybe_unused]] uint8_t __pad03ac[0x4]; // 0x3ac
public:
	CCollisionProperty* m_pCollision; // 0x3b0	
	// MNetworkEnable
	CModifierProperty* m_pModifierProp; // 0x3b8	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hEffectEntity; // 0x3c0	
	// MNetworkEnable
	// MNetworkPriority "32"
	CHandle< CBaseEntity > m_hOwnerEntity; // 0x3c4	
	// MNetworkEnable
	// MNetworkChangeCallback "OnEffectsChanged"
	uint32_t m_fEffects; // 0x3c8	
	// MNetworkEnable
	// MNetworkPriority "32"
	// MNetworkUserGroup "Player"
	CHandle< CBaseEntity > m_hGroundEntity; // 0x3cc	
	// MNetworkEnable
	// MNetworkPriority "32"
	// MNetworkUserGroup "Player"
	int32_t m_nGroundBodyIndex; // 0x3d0	
	// MNetworkEnable
	// MNetworkBitCount "8"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "4.000000"
	// MNetworkEncodeFlags "1"
	// MNetworkUserGroup "LocalPlayerExclusive"
	float m_flFriction; // 0x3d4	
	// MNetworkEnable
	// MNetworkEncoder "coord"
	float m_flElasticity; // 0x3d8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	float m_flGravityScale; // 0x3dc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	float m_flTimeScale; // 0x3e0	
	// MNetworkEnable
	// MNetworkUserGroup "Water"
	// MNetworkBitCount "8"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "1.000000"
	// MNetworkEncodeFlags "8"
	float m_flWaterLevel; // 0x3e4	
	// MNetworkEnable
	bool m_bAnimatedEveryTick; // 0x3e8	
	bool m_bDisableLowViolence; // 0x3e9	
	uint8_t m_nWaterType; // 0x3ea	
private:
	[[maybe_unused]] uint8_t __pad03eb[0x1]; // 0x3eb
public:
	int32_t m_iEFlags; // 0x3ec	
	CEntityIOOutput m_OnUser1; // 0x3f0	
	CEntityIOOutput m_OnUser2; // 0x418	
	CEntityIOOutput m_OnUser3; // 0x440	
	CEntityIOOutput m_OnUser4; // 0x468	
	int32_t m_iInitialTeamNum; // 0x490	
	// MNetworkEnable
	GameTime_t m_flNavIgnoreUntilTime; // 0x494	
	QAngle m_vecAngVelocity; // 0x498	
	bool m_bNetworkQuantizeOriginAndAngles; // 0x4a4	
	bool m_bLagCompensate; // 0x4a5	
private:
	[[maybe_unused]] uint8_t __pad04a6[0x2]; // 0x4a6
public:
	float m_flOverriddenFriction; // 0x4a8	
	CHandle< CBaseEntity > m_pBlocker; // 0x4ac	
	float m_flLocalTime; // 0x4b0	
	float m_flVPhysicsUpdateLocalTime; // 0x4b4	
	
	// Static fields:
	static Relationship_t** &Get_sm_DefaultRelationship(){return *reinterpret_cast<Relationship_t***>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBaseEntity")->GetStaticFields()[0]->m_pInstance);};
	static bool &Get_sm_bAccurateTriggerBboxChecks(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBaseEntity")->GetStaticFields()[1]->m_pInstance);};
	static bool &Get_sm_bDisableTouchFuncs(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBaseEntity")->GetStaticFields()[2]->m_pInstance);};
	static bool &Get_m_bAllowPrecache(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBaseEntity")->GetStaticFields()[3]->m_pInstance);};
	static bool &Get_s_bAbsQueriesValid(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBaseEntity")->GetStaticFields()[4]->m_pInstance);};
	static bool &Get_s_bPreventingSetAnimRunAnimEvents(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBaseEntity")->GetStaticFields()[5]->m_pInstance);};
	static int32_t &Get_m_nPredictionRandomSeed(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBaseEntity")->GetStaticFields()[6]->m_pInstance);};
	static int32_t &Get_m_nPredictionRandomSeedServer(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBaseEntity")->GetStaticFields()[7]->m_pInstance);};
	static CBasePlayerController* &Get_m_pPredictionPlayerController(){return *reinterpret_cast<CBasePlayerController**>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBaseEntity")->GetStaticFields()[8]->m_pInstance);};
	static bool &Get_sm_bDatadescValidating(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBaseEntity")->GetStaticFields()[9]->m_pInstance);};
	
	// Datamap fields:
	// CUtlSymbolLarge m_iszPrivateVScripts; // 0x8
	// void m_CScriptComponent; // 0x28
	// CUtlSymbolLarge subclass_name; // 0x7fffffff
	// void m_pSubclassVData; // 0x2f0
	// void* m_think; // 0x260
	// void* m_pfnTouch; // 0x288
	// void* m_pfnUse; // 0x290
	// void* m_pfnBlocked; // 0x298
	// void* m_pfnMoveDone; // 0x2a0
	// int32_t InputSetTeam; // 0x0
	// void InputKill; // 0x0
	// void InputKillHierarchy; // 0x0
	// void InputKillConstrained; // 0x0
	// int32_t InputUse; // 0x0
	// bool InputAlternativeSorting; // 0x0
	// CUtlSymbolLarge InputSetParent; // 0x0
	// CUtlSymbolLarge InputSetParentAttachment; // 0x0
	// CUtlSymbolLarge InputSetParentAttachmentMaintainOffset; // 0x0
	// void InputClearParent; // 0x0
	// CUtlSymbolLarge InputFollowEntity; // 0x0
	// CUtlSymbolLarge InputSetDamageFilter; // 0x0
	// void InputEnableDamageForces; // 0x0
	// void InputDisableDamageForces; // 0x0
	// CUtlSymbolLarge InputDispatchResponse; // 0x0
	// CUtlSymbolLarge InputAddContext; // 0x0
	// CUtlSymbolLarge InputRemoveContext; // 0x0
	// void InputClearContext; // 0x0
	// CUtlSymbolLarge InputAddAttribute; // 0x0
	// CUtlSymbolLarge InputRemoveAttribute; // 0x0
	// CUtlSymbolLarge InputAddModifier; // 0x0
	// CUtlSymbolLarge InputRemoveModifier; // 0x0
	// void InputDisableShadow; // 0x0
	// void InputEnableShadow; // 0x0
	// CUtlSymbolLarge InputFireUser1; // 0x0
	// CUtlSymbolLarge InputFireUser2; // 0x0
	// CUtlSymbolLarge InputFireUser3; // 0x0
	// CUtlSymbolLarge InputFireUser4; // 0x0
	// CUtlSymbolLarge InputChangeSubclass; // 0x0
	// void InputPlatformEnable; // 0x0
	// void InputPlatformDisable; // 0x0
	// void CBaseEntitySUB_Remove; // 0x0
	// void CBaseEntitySUB_RemoveIfUncarried; // 0x0
	// void CBaseEntitySUB_DoNothing; // 0x0
	// void CBaseEntitySUB_Vanish; // 0x0
	// void CBaseEntitySUB_CallUseToggle; // 0x0
	// void CBaseEntitySUB_KillSelf; // 0x0
	// void CBaseEntitySUB_KillSelfIfUncarried; // 0x0
	// void CBaseEntityFrictionRevertThink; // 0x0
	// void CBaseEntityFakeScriptThinkFunc; // 0x0
	// void CBaseEntityClearNavIgnoreContentsThink; // 0x0
	// void m_pGameSceneNode; // 0x248
	// void m_nEntityType; // 0x2c9
	// QAngle angles; // 0x7fffffff
	// Vector origin; // 0x7fffffff
	// CStrongHandle< InfoForResourceTypeCModel > model; // 0x7fffffff
	// CUtlString ownername; // 0x7fffffff
	// int32_t disableshadows; // 0x7fffffff
	// int32_t disablereceiveshadows; // 0x7fffffff
	// int32_t nodamageforces; // 0x7fffffff
	// float angle; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x38
// Has VTable
// 
// MNetworkVarNames "int32 m_nModelID"
// MNetworkVarNames "Vector2D m_vecPanelSize"
// MNetworkVarNames "Vector m_vecPanelVertices"
// MNetworkVarNames "float m_flThickness"
// MNetworkVarNames "CUtlStringToken m_SurfacePropStringToken"
struct ice_path_shard_model_desc_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	int32_t m_nModelID; // 0x8	
	// MNetworkEnable
	Vector2D m_vecPanelSize; // 0xc	
private:
	[[maybe_unused]] uint8_t __pad0014[0x4]; // 0x14
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< Vector > m_vecPanelVertices; // 0x18	
	// MNetworkEnable
	float m_flThickness; // 0x30	
	// MNetworkEnable
	CUtlStringToken m_SurfacePropStringToken; // 0x34	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x30
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "uint64 m_nInteractsAs"
// MNetworkVarNames "uint64 m_nInteractsWith"
// MNetworkVarNames "uint64 m_nInteractsExclude"
// MNetworkVarNames "uint32 m_nEntityId"
// MNetworkVarNames "uint32 m_nOwnerId"
// MNetworkVarNames "uint16 m_nHierarchyId"
// MNetworkVarNames "uint8 m_nCollisionGroup"
// MNetworkVarNames "uint8 m_nCollisionFunctionMask"
struct VPhysicsCollisionAttribute_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	uint64_t m_nInteractsAs; // 0x8	
	// MNetworkEnable
	uint64_t m_nInteractsWith; // 0x10	
	// MNetworkEnable
	uint64_t m_nInteractsExclude; // 0x18	
	// MNetworkEnable
	uint32_t m_nEntityId; // 0x20	
	// MNetworkEnable
	uint32_t m_nOwnerId; // 0x24	
	// MNetworkEnable
	uint16_t m_nHierarchyId; // 0x28	
	// MNetworkEnable
	uint8_t m_nCollisionGroup; // 0x2a	
	// MNetworkEnable
	uint8_t m_nCollisionFunctionMask; // 0x2b	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CServerOnlyEntity : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb0
// Has VTable
// 
// MNetworkVarNames "VPhysicsCollisionAttribute_t m_collisionAttribute"
// MNetworkVarNames "Vector m_vecMins"
// MNetworkVarNames "Vector m_vecMaxs"
// MNetworkVarNames "uint8 m_usSolidFlags"
// MNetworkVarNames "SolidType_t m_nSolidType"
// MNetworkVarNames "uint8 m_triggerBloat"
// MNetworkVarNames "SurroundingBoundsType_t m_nSurroundType"
// MNetworkVarNames "uint8 m_CollisionGroup"
// MNetworkVarNames "uint8 m_nEnablePhysics"
// MNetworkVarNames "Vector m_vecSpecifiedSurroundingMins"
// MNetworkVarNames "Vector m_vecSpecifiedSurroundingMaxs"
// MNetworkVarNames "Vector m_vCapsuleCenter1"
// MNetworkVarNames "Vector m_vCapsuleCenter2"
// MNetworkVarNames "float m_flCapsuleRadius"
class CCollisionProperty
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x10]; // 0x0
public:
	// MNetworkEnable
	// MNetworkChangeCallback "CollisionAttributeChanged"
	// -> m_nInteractsAs - 0x18
	// -> m_nInteractsWith - 0x20
	// -> m_nInteractsExclude - 0x28
	// -> m_nEntityId - 0x30
	// -> m_nOwnerId - 0x34
	// -> m_nHierarchyId - 0x38
	// -> m_nCollisionGroup - 0x3a
	// -> m_nCollisionFunctionMask - 0x3b
	VPhysicsCollisionAttribute_t m_collisionAttribute; // 0x10	
	// MNetworkEnable
	// MNetworkChangeCallback "OnUpdateOBB"
	Vector m_vecMins; // 0x40	
	// MNetworkEnable
	// MNetworkChangeCallback "OnUpdateOBB"
	Vector m_vecMaxs; // 0x4c	
private:
	[[maybe_unused]] uint8_t __pad0058[0x2]; // 0x58
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnUpdateSolidFlags"
	uint8_t m_usSolidFlags; // 0x5a	
	// MNetworkEnable
	// MNetworkChangeCallback "OnUpdateSolidType"
	SolidType_t m_nSolidType; // 0x5b	
	// MNetworkEnable
	// MNetworkChangeCallback "MarkSurroundingBoundsDirty"
	uint8_t m_triggerBloat; // 0x5c	
	// MNetworkEnable
	// MNetworkChangeCallback "MarkSurroundingBoundsDirty"
	SurroundingBoundsType_t m_nSurroundType; // 0x5d	
	// MNetworkEnable
	uint8_t m_CollisionGroup; // 0x5e	
	// MNetworkEnable
	// MNetworkChangeCallback "OnUpdateEnablePhysics"
	uint8_t m_nEnablePhysics; // 0x5f	
	float m_flBoundingRadius; // 0x60	
	// MNetworkEnable
	// MNetworkChangeCallback "MarkSurroundingBoundsDirty"
	Vector m_vecSpecifiedSurroundingMins; // 0x64	
	// MNetworkEnable
	// MNetworkChangeCallback "MarkSurroundingBoundsDirty"
	Vector m_vecSpecifiedSurroundingMaxs; // 0x70	
	Vector m_vecSurroundingMaxs; // 0x7c	
	Vector m_vecSurroundingMins; // 0x88	
	// MNetworkEnable
	// MNetworkChangeCallback "OnUpdateCapsule"
	Vector m_vCapsuleCenter1; // 0x94	
	// MNetworkEnable
	// MNetworkChangeCallback "OnUpdateCapsule"
	Vector m_vCapsuleCenter2; // 0xa0	
	// MNetworkEnable
	// MNetworkChangeCallback "OnUpdateCapsule"
	float m_flCapsuleRadius; // 0xac	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
// 
// MNetworkVarNames "CRenderComponent::Storage_t m_CRenderComponent"
// MNetworkVarNames "CHitboxComponent::Storage_t m_CHitboxComponent"
// MNetworkVarNames "RenderMode_t m_nRenderMode"
// MNetworkVarNames "RenderFx_t m_nRenderFX"
// MNetworkVarNames "Color m_clrRender"
// MNetworkVarNames "EntityRenderAttribute_t m_vecRenderAttributes"
// MNetworkVarNames "bool m_bRenderToCubemaps"
// MNetworkVarNames "bool m_bNoInterpolate"
// MNetworkVarNames "CCollisionProperty m_Collision"
// MNetworkVarNames "CGlowProperty m_Glow"
// MNetworkVarNames "float m_flGlowBackfaceMult"
// MNetworkVarNames "float32 m_fadeMinDist"
// MNetworkVarNames "float32 m_fadeMaxDist"
// MNetworkVarNames "float32 m_flFadeScale"
// MNetworkVarNames "float32 m_flShadowStrength"
// MNetworkVarNames "uint8 m_nObjectCulling"
// MNetworkVarNames "int m_nAddDecal"
// MNetworkVarNames "Vector m_vDecalPosition"
// MNetworkVarNames "Vector m_vDecalForwardAxis"
// MNetworkVarNames "float m_flDecalHealBloodRate"
// MNetworkVarNames "float m_flDecalHealHeightRate"
// MNetworkVarNames "CHandle< CBaseModelEntity > m_ConfigEntitiesToPropagateMaterialDecalsTo"
// MNetworkVarNames "CNetworkViewOffsetVector m_vecViewOffset"
class CBaseModelEntity : public CBaseEntity
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CRenderComponent"
	// MNetworkAlias "CRenderComponent"
	// MNetworkTypeAlias "CRenderComponent"
	CRenderComponent* m_CRenderComponent; // 0x4b8	
	// MNetworkEnable
	// MNetworkUserGroup "CHitboxComponent"
	// MNetworkAlias "CHitboxComponent"
	// MNetworkTypeAlias "CHitboxComponent"
	CHitboxComponent m_CHitboxComponent; // 0x4c0	
	GameTime_t m_flDissolveStartTime; // 0x4e8	
private:
	[[maybe_unused]] uint8_t __pad04ec[0x4]; // 0x4ec
public:
	CEntityIOOutput m_OnIgnite; // 0x4f0	
	// MNetworkEnable
	RenderMode_t m_nRenderMode; // 0x518	
	// MNetworkEnable
	RenderFx_t m_nRenderFX; // 0x519	
private:
	[[maybe_unused]] uint8_t __pad051a[0x6]; // 0x51a
public:
	CUtlString m_szAddModifier; // 0x520	
	bool m_bAllowFadeInView; // 0x528	
private:
	[[maybe_unused]] uint8_t __pad0529[0x1f]; // 0x529
public:
	bool m_bHasCollision; // 0x548	
private:
	[[maybe_unused]] uint8_t __pad0549[0x3]; // 0x549
public:
	Vector m_vSupport; // 0x54c	
	// MNetworkEnable
	// MNetworkChangeCallback "OnColorChanged"
	Color m_clrRender; // 0x558	
private:
	[[maybe_unused]] uint8_t __pad055c[0x4]; // 0x55c
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnRenderAttributesChanged"
	CUtlVectorEmbeddedNetworkVar< EntityRenderAttribute_t > m_vecRenderAttributes; // 0x560	
	// MNetworkEnable
	bool m_bRenderToCubemaps; // 0x5b0	
	// MNetworkEnable
	bool m_bNoInterpolate; // 0x5b1	
private:
	[[maybe_unused]] uint8_t __pad05b2[0x6]; // 0x5b2
public:
	// MNetworkEnable
	CCollisionProperty m_Collision; // 0x5b8	
	// MNetworkEnable
	// -> m_fGlowColor - 0x670
	// -> m_iGlowType - 0x698
	// -> m_iGlowTeam - 0x69c
	// -> m_nGlowRange - 0x6a0
	// -> m_nGlowRangeMin - 0x6a4
	// -> m_glowColorOverride - 0x6a8
	// -> m_bFlashing - 0x6ac
	// -> m_flGlowTime - 0x6b0
	// -> m_flGlowStartTime - 0x6b4
	// -> m_bGlowing - 0x6b8
	CGlowProperty m_Glow; // 0x668	
	// MNetworkEnable
	float m_flGlowBackfaceMult; // 0x6c0	
	// MNetworkEnable
	float m_fadeMinDist; // 0x6c4	
	// MNetworkEnable
	float m_fadeMaxDist; // 0x6c8	
	// MNetworkEnable
	float m_flFadeScale; // 0x6cc	
	// MNetworkEnable
	float m_flShadowStrength; // 0x6d0	
	// MNetworkEnable
	uint8_t m_nObjectCulling; // 0x6d4	
private:
	[[maybe_unused]] uint8_t __pad06d5[0x3]; // 0x6d5
public:
	// MNetworkEnable
	int32_t m_nAddDecal; // 0x6d8	
	// MNetworkEnable
	Vector m_vDecalPosition; // 0x6dc	
	// MNetworkEnable
	Vector m_vDecalForwardAxis; // 0x6e8	
	// MNetworkEnable
	float m_flDecalHealBloodRate; // 0x6f4	
	// MNetworkEnable
	float m_flDecalHealHeightRate; // 0x6f8	
private:
	[[maybe_unused]] uint8_t __pad06fc[0x4]; // 0x6fc
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< CHandle< CBaseModelEntity > > m_ConfigEntitiesToPropagateMaterialDecalsTo; // 0x700	
	// MNetworkEnable
	// MNetworkPriority "32"
	// MNetworkUserGroup "Player"
	CNetworkViewOffsetVector m_vecViewOffset; // 0x718	
	
	// Datamap fields:
	// int32_t InputAlpha; // 0x0
	// Color InputColor; // 0x0
	// int32_t InputSkin; // 0x0
	// void CBaseModelEntitySUB_DissolveIfUncarried; // 0x0
	// void InputIgnite; // 0x0
	// float InputIgniteLifetime; // 0x0
	// int32_t InputIgnite; // 0x0
	// float InputIgnite; // 0x0
	// void InputExtinguish; // 0x0
	// CUtlString add_attribute; // 0x7fffffff
	// void CBaseModelEntitySUB_StartFadeOut; // 0x0
	// void CBaseModelEntitySUB_StartFadeOutInstant; // 0x0
	// void CBaseModelEntitySUB_FadeOut; // 0x0
	// void CBaseModelEntitySUB_StartShadowFadeOut; // 0x0
	// void CBaseModelEntitySUB_PerformShadowFadeOut; // 0x0
	// void CBaseModelEntitySUB_StartShadowFadeIn; // 0x0
	// void CBaseModelEntitySUB_PerformShadowFadeIn; // 0x0
	// void CBaseModelEntitySUB_StopShadowFade; // 0x0
	// Color rendercolor32; // 0x7fffffff
	// Color rendercolor; // 0x7fffffff
	// int32_t renderamt; // 0x7fffffff
	// Vector mins; // 0x7fffffff
	// Vector maxs; // 0x7fffffff
	// const char * skin; // 0x7fffffff
	// CUtlString bodygroups; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
// Is Abstract
// 
// MNetworkIncludeByName "m_flTimeScale"
// MNetworkExcludeByName "m_angRotation"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByName "m_cellX"
// MNetworkExcludeByName "m_cellY"
// MNetworkExcludeByName "m_cellZ"
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByName "m_flEncodedController"
// MNetworkExcludeByName "m_flPoseParameter"
// MNetworkExcludeByName "m_flSimulationTime"
// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_nForceBone"
// MNetworkExcludeByName "m_nHitboxSet"
// MNetworkExcludeByName "m_baseLayer.m_hSequence"
// MNetworkExcludeByName "m_vecForce"
// MNetworkExcludeByName "m_vecMaxs"
// MNetworkExcludeByName "m_vecMins"
// MNetworkExcludeByName "m_vecOrigin"
// MNetworkExcludeByName "m_vecSpecifiedSurroundingMaxs"
// MNetworkExcludeByName "m_vecSpecifiedSurroundingMins"
// MNetworkExcludeByName "m_vLookTargetPosition"
// MNetworkExcludeByName "m_MoveCollide"
// MNetworkExcludeByName "m_MoveType"
// MNetworkExcludeByName "m_Gender"
// MNetworkExcludeByName "m_flElasticity"
// MNetworkExcludeByName "m_nMinCPULevel"
// MNetworkExcludeByName "m_nMinGPULevel"
// MNetworkExcludeByName "m_nMaxCPULevel"
// MNetworkExcludeByName "m_nMaxGPULevel"
// MNetworkExcludeByName "m_flNavIgnoreUntilTime"
// MNetworkExcludeByName "m_ubInterpolationFrame"
// MNetworkExcludeByName "m_flScale"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkUserGroupProxy "CCitadelBaseAbility"
// MNetworkUserGroupProxy "CCitadelBaseAbility"
// MNetworkOverride "m_flTimeScale"
// MNetworkVarNames "bool m_bChanneling"
// MNetworkVarNames "bool m_bInCastDelay"
// MNetworkVarNames "EntitySubclassID_t m_vecImbuedByAbilitiyIDs"
// MNetworkVarNames "int m_nUpgradeBits"
// MNetworkVarNames "int m_iBucketID"
// MNetworkVarNames "bool m_bToggleState"
// MNetworkVarNames "GameTime_t m_flToggledTime"
// MNetworkVarNames "GameTime_t m_flCooldownStart"
// MNetworkVarNames "GameTime_t m_flCooldownEnd"
// MNetworkVarNames "GameTime_t m_flChannelStartTime"
// MNetworkVarNames "GameTime_t m_flCastDelayStartTime"
// MNetworkVarNames "EAbilitySlots_t m_eAbilitySlot"
// MNetworkVarNames "int m_iRemainingCharges"
// MNetworkVarNames "GameTime_t m_flChargeRechargeStart"
// MNetworkVarNames "GameTime_t m_flChargeRechargeEnd"
// MNetworkVarNames "GameTime_t m_flMovementControlActiveTime"
// MNetworkVarNames "GameTime_t m_flSelectedChangedTime"
// MNetworkVarNames "GameTime_t m_flAltCastHoldStartTime"
// MNetworkVarNames "AbilityID_t m_nImbuedAbilityID"
class CCitadelBaseAbility : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0xd0]; // 0x4b8
public:
	CUtlVector< CModifierHandleTyped< CCitadelModifier > > m_vecIntrinsicModifiers; // 0x588	
	CModifierHandleTyped< CCitadelModifier > m_pCastDelayAutoModifier; // 0x5a0	
	CModifierHandleTyped< CCitadelModifier > m_pChannelAutoModifier; // 0x5b8	
	CGlobalSymbol m_strUsedCastGraphParam; // 0x5d0	
	int32_t m_nCastParamNeedsResetTick; // 0x5d8	
	bool m_bIsCoolingDownInternal; // 0x5dc	
private:
	[[maybe_unused]] uint8_t __pad05dd[0x1b]; // 0x5dd
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnChannelingChanged"
	bool m_bChanneling; // 0x5f8	
	// MNetworkEnable
	// MNetworkChangeCallback "OnInCastDelayChanged"
	bool m_bInCastDelay; // 0x5f9	
private:
	[[maybe_unused]] uint8_t __pad05fa[0x6]; // 0x5fa
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnAbilityImbuedChanged"
	CNetworkUtlVectorBase< CUtlStringToken > m_vecImbuedByAbilitiyIDs; // 0x600	
	// MNetworkEnable
	// MNetworkChangeCallback "OnUpgradeBitsChanged"
	// MNetworkPriority "32"
	int32_t m_nUpgradeBits; // 0x618	
	// MNetworkEnable
	int32_t m_iBucketID; // 0x61c	
	// MNetworkEnable
	bool m_bToggleState; // 0x620	
private:
	[[maybe_unused]] uint8_t __pad0621[0x3]; // 0x621
public:
	// MNetworkEnable
	GameTime_t m_flToggledTime; // 0x624	
	// MNetworkEnable
	// MNetworkPriority "32"
	GameTime_t m_flCooldownStart; // 0x628	
	// MNetworkEnable
	// MNetworkPriority "32"
	GameTime_t m_flCooldownEnd; // 0x62c	
	// MNetworkEnable
	GameTime_t m_flChannelStartTime; // 0x630	
	// MNetworkEnable
	GameTime_t m_flCastDelayStartTime; // 0x634	
	// MNetworkEnable
	// MNetworkChangeCallback "OnAbilitySlotChanged"
	EAbilitySlots_t m_eAbilitySlot; // 0x638	
private:
	[[maybe_unused]] uint8_t __pad063a[0x2]; // 0x63a
public:
	GameTime_t m_flPostCastDelayEndTime; // 0x63c	
	// MNetworkEnable
	// MNetworkPriority "32"
	int32_t m_iRemainingCharges; // 0x640	
	// MNetworkEnable
	// MNetworkPriority "32"
	GameTime_t m_flChargeRechargeStart; // 0x644	
	// MNetworkEnable
	// MNetworkPriority "32"
	GameTime_t m_flChargeRechargeEnd; // 0x648	
	// MNetworkEnable
	GameTime_t m_flMovementControlActiveTime; // 0x64c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flSelectedChangedTime; // 0x650	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flAltCastHoldStartTime; // 0x654	
	// MNetworkEnable
	CUtlStringToken m_nImbuedAbilityID; // 0x658	
private:
	[[maybe_unused]] uint8_t __pad065c[0x4]; // 0x65c
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecEnemyHeroesDamaged; // 0x660	
	float m_flPreviousEffectiveCooldown; // 0x678	
	
	// Datamap fields:
	// int32_t slot; // 0x7fffffff
	// int32_t bucket_id; // 0x7fffffff
	// float time_scale; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_CloakingDevice_Active_Ambush_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_InvisRevealedParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AmbushParticle; // 0x6d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strActivateAmbushSound; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Tech_Defender_Shredders_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7c8
// Has VTable
class CBaseToggle : public CBaseModelEntity
{
public:
	TOGGLE_STATE m_toggle_state; // 0x748	
	float m_flMoveDistance; // 0x74c	
	float m_flWait; // 0x750	
	float m_flLip; // 0x754	
	bool m_bAlwaysFireBlockedOutputs; // 0x758	
private:
	[[maybe_unused]] uint8_t __pad0759[0x3]; // 0x759
public:
	Vector m_vecPosition1; // 0x75c	
	Vector m_vecPosition2; // 0x768	
	QAngle m_vecMoveAng; // 0x774	
	QAngle m_vecAngle1; // 0x780	
	QAngle m_vecAngle2; // 0x78c	
	float m_flHeight; // 0x798	
	CHandle< CBaseEntity > m_hActivator; // 0x79c	
	Vector m_vecFinalDest; // 0x7a0	
	QAngle m_vecFinalAngle; // 0x7ac	
	int32_t m_movementType; // 0x7b8	
private:
	[[maybe_unused]] uint8_t __pad07bc[0x4]; // 0x7bc
public:
	CUtlSymbolLarge m_sMaster; // 0x7c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f0
// Has VTable
class CBasePlatTrain : public CBaseToggle
{
public:
	CUtlSymbolLarge m_NoiseMoving; // 0x7c8	
	CUtlSymbolLarge m_NoiseArrived; // 0x7d0	
private:
	[[maybe_unused]] uint8_t __pad07d8[0x8]; // 0x7d8
public:
	float m_volume; // 0x7e0	
	float m_flTWidth; // 0x7e4	
	float m_flTLength; // 0x7e8	
	
	// Datamap fields:
	// void m_pMovementSound; // 0x7d8
	// float rotation; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Synth_Blitz_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BlitzModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_TechAmpModifier; // 0x14f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SlowParticle; // 0x1508	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strProcSound; // 0x15e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
class CCitadel_Ability_Dust_Storm : public CCitadelBaseAbility
{
public:
	CHandle< CCitadel_Ability_Spinning_Blade > m_hSpinningBladeAbility; // 0xab0	
private:
	[[maybe_unused]] uint8_t __pad0ab4[0x4]; // 0xab4
public:
	CUtlVector< CHandle< CBaseEntity > > m_vTargets; // 0xab8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_ImmobilizeTrap : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
// MPropertySuppressBaseClassField
class CCitadel_Modifier_BaseBulletPreRollProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyDescription "When true, we roll for a proc once per shot and apply that result to all bullets in the shot.  When false, we roll independently for each bullet in the shot."
	bool m_bRollOnceForAllBulletsInAShot; // 0x628	
private:
	[[maybe_unused]] uint8_t __pad0629[0x3]; // 0x629
public:
	// MPropertyDescription "When not rolling once for all shots, what's the max number of times we can proc in a single shot? 0 means no limit."
	float m_flMaxBulletsToProcInShot; // 0x62c	
	// MPropertyDescription "When true, each bullet can apply its proc to any entities hit.  When false, we only apply the first proc to the first entity."
	bool m_bCanProcMultipleTimesFromSameShot; // 0x630	
	// MPropertyDescription "When true, will only call OnProc if the target hit passes the unit filter."
	bool m_bRequiresTargetFilter; // 0x631	
private:
	[[maybe_unused]] uint8_t __pad0632[0x6]; // 0x632
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerAdditionParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_MagicShield_SpiritBuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityMedicHealVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HealBeamParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HealTargetParticle; // 0x15c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strHealCastSound; // 0x16a8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d8
// Has VTable
class CCitadelSpectateNode : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x630
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierVData_BaseAura : public CCitadelModifierVData
{
public:
	eAuraShapeType m_eAuraShapeType; // 0x5f8	
	// MPropertySuppressExpr "m_eAuraShapeType != k_eAuraShapeTypeSphere"
	CModifierLevelFloat m_flAuraRadius; // 0x5fc	
	// MPropertySuppressExpr "m_eAuraShapeType != k_eAuraShapeTypeEntityBased"
	CModifierLevelFloat m_flAuraEntityBoundsScale; // 0x60c	
	int32_t m_nAmbientParticleRadiusControlPoint; // 0x61c	
	// MPropertyDescription "Aura - Modifier to Apply"
	// MPropertyFriendlyName "Modifier Provided By Aura"
	CEmbeddedSubclass< CBaseModifier > m_modifierProvidedByAura; // 0x620	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CPointEntity : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x918
// Has VTable
// 
// MNetworkIncludeByName "m_spawnflags"
// MNetworkVarNames "bool m_bDisabled"
// MNetworkVarNames "bool m_bClientSidePredicted"
class CBaseTrigger : public CBaseToggle
{
public:
	// MNetworkEnable
	bool m_bDisabled; // 0x7c8	
private:
	[[maybe_unused]] uint8_t __pad07c9[0x7]; // 0x7c9
public:
	CUtlSymbolLarge m_iFilterName; // 0x7d0	
	CHandle< CBaseFilter > m_hFilter; // 0x7d8	
private:
	[[maybe_unused]] uint8_t __pad07dc[0x4]; // 0x7dc
public:
	CEntityIOOutput m_OnStartTouch; // 0x7e0	
	CEntityIOOutput m_OnStartTouchAll; // 0x808	
	CEntityIOOutput m_OnEndTouch; // 0x830	
	CEntityIOOutput m_OnEndTouchAll; // 0x858	
	CEntityIOOutput m_OnTouching; // 0x880	
	CEntityIOOutput m_OnTouchingEachEntity; // 0x8a8	
	CEntityIOOutput m_OnNotTouching; // 0x8d0	
	CUtlVector< CHandle< CBaseEntity > > m_hTouchingEntities; // 0x8f8	
	// MNetworkEnable
	bool m_bClientSidePredicted; // 0x910	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void InputToggle; // 0x0
	// void InputTouchTest; // 0x0
	// void InputStartTouch; // 0x0
	// void InputEndTouch; // 0x0
	// bool okifnomodel; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Thumper_BulletWatcherVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplodeSound; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Protection_RacketVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastOtherParticle; // 0x14e8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ArmorModifier; // 0x15c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CLogicalEntity : public CServerOnlyEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x500
// Has VTable
class CAI_Relationship : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CUtlSymbolLarge m_iszSubject; // 0x4c0	
	CUtlSymbolLarge m_iszSubjectClass; // 0x4c8	
	Class_T m_nSubjectClassifyAs; // 0x4d0	
private:
	[[maybe_unused]] uint8_t __pad04d4[0x4]; // 0x4d4
public:
	CUtlSymbolLarge m_iszTargetClass; // 0x4d8	
	Class_T m_nTargetClassifyAs; // 0x4e0	
	int32_t m_iDisposition; // 0x4e4	
	int32_t m_iRank; // 0x4e8	
	bool m_fStartActive; // 0x4ec	
	bool m_bIsActive; // 0x4ed	
private:
	[[maybe_unused]] uint8_t __pad04ee[0x2]; // 0x4ee
public:
	int32_t m_iPreviousDisposition; // 0x4f0	
	float m_flRadius; // 0x4f4	
	int32_t m_iPreviousRank; // 0x4f8	
	bool m_bReciprocal; // 0x4fc	
	
	// Datamap fields:
	// void CAI_RelationshipApplyRelationshipThink; // 0x0
	// void InputApplyRelationship; // 0x0
	// void InputRevertRelationship; // 0x0
	// void InputRevertToDefaultRelationship; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x50
// Has VTable
class CBodyComponent : public CEntityComponent
{
public:
	// MNetworkDisable
	CGameSceneNode* m_pSceneNode; // 0x8	
private:
	[[maybe_unused]] uint8_t __pad0010[0x10]; // 0x10
public:
	// MNetworkDisable
	// MNetworkChangeAccessorFieldPathIndex
	CNetworkVarChainer __m_pChainEntity; // 0x20	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBodyComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_contained_but_impl_is_referenced(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBodyComponent")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18
// Has VTable
// Has Trivial Destructor
class CCitadelMinimapComponent : public CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0008[0x8]; // 0x8
public:
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelMinimapComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_referenced_but_impl_is_contained(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelMinimapComponent")->GetStaticFields()[1]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x950
// Has VTable
class CTriggerPush : public CBaseTrigger
{
public:
	QAngle m_angPushEntitySpace; // 0x918	
	Vector m_vecPushDirEntitySpace; // 0x924	
	bool m_bTriggerOnStartTouch; // 0x930	
	bool m_bUsePathSimple; // 0x931	
private:
	[[maybe_unused]] uint8_t __pad0932[0x6]; // 0x932
public:
	CUtlSymbolLarge m_iszPathSimpleName; // 0x938	
	CPathSimple* m_PathSimple; // 0x940	
	uint32_t m_splinePushType; // 0x948	
	
	// Datamap fields:
	// Vector InputSetPushDirection; // 0x0
	// float InputSetPushSpeed; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x940
// Has VTable
class CTriggerMultiple : public CBaseTrigger
{
public:
	CEntityIOOutput m_OnTrigger; // 0x918	
	
	// Datamap fields:
	// void CTriggerMultipleMultiTouch; // 0x0
	// void CTriggerMultipleMultiWaitOver; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xac0
// Has VTable
// 
// MNetworkVarNames "CHandle< CCitadelBaseAbility> m_hAbilityToTrigger"
// MNetworkVarNames "GameTime_t m_SwappedToTime"
class CCitadelBaseTriggerAbility : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	CHandle< CCitadelBaseAbility > m_hAbilityToTrigger; // 0xab0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_SwappedToTime; // 0xab4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
class CBaseFilter : public CLogicalEntity
{
public:
	bool m_bNegated; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x7]; // 0x4b9
public:
	CEntityIOOutput m_OnPass; // 0x4c0	
	CEntityIOOutput m_OnFail; // 0x4e8	
	
	// Datamap fields:
	// void InputTestActivator; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1b0
// Has VTable
class CCitadel_Modifier_Chomp_Grapple : public CCitadelModifier
{
public:
	CHandle< CBaseEntity > m_hMoveToTarget; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe0
// Has VTable
class CCitadel_Modifier_Bull_Leap_Boosting_Crash : public CCitadelModifier
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecHitEntities; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityPowerSurgeVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChainParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastHitParticle; // 0x15c8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x16a8	
	CEmbeddedSubclass< CCitadelModifier > m_ChainModifier; // 0x16b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x658
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_AfterburnWatcherVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AfterburnDotModifier; // 0x628	
	CEmbeddedSubclass< CCitadel_Modifier_Base_Buildup > m_BuildUpModifier; // 0x638	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplodeSound; // 0x648	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_Item_Bleeding_Bullets_DamageOverTime : public CCitadelModifier
{
public:
	GameTime_t m_flLastTickTime; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x958
// Has VTable
class CTriggerProximity : public CBaseTrigger
{
public:
	CHandle< CBaseEntity > m_hMeasureTarget; // 0x918	
private:
	[[maybe_unused]] uint8_t __pad091c[0x4]; // 0x91c
public:
	CUtlSymbolLarge m_iszMeasureTarget; // 0x920	
	float m_fRadius; // 0x928	
	int32_t m_nTouchers; // 0x92c	
	CEntityOutputTemplate< float32 > m_NearestEntityDistance; // 0x930	
	
	// Datamap fields:
	// void CTriggerProximityMeasureThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x800
// Has VTable
// 
// MNetworkIncludeByName "m_flTimeScale"
// MNetworkOverride "m_flTimeScale"
// MNetworkOverride "m_flTimeScale"
// MNetworkVarNames "Vector m_vInitialVelocity"
// MNetworkVarNames "Vector m_vInitialPosition"
// MNetworkVarNames "AbilityID_t m_abilityID"
// MNetworkVarNames "EHANDLE m_hThrower"
// MNetworkVarNames "string_t m_sParticleName"
// MNetworkVarNames "Vector m_vecSpawnPosition"
// MNetworkVarNames "float m_flProjectileSpeed"
// MNetworkVarNames "float m_flMaxLifetime"
// MNetworkVarNames "float m_flParticleRadius"
class CCitadelProjectile : public CBaseModelEntity
{
public:
	CHandle< CBaseEntity > m_hTarget; // 0x748	
	float m_flMaxDistance; // 0x74c	
	float m_flArmingTime; // 0x750	
	float m_flChargeAmount; // 0x754	
	bool m_bCollideWithThrower; // 0x758	
	bool m_bNewCollideWithThrower; // 0x759	
private:
	[[maybe_unused]] uint8_t __pad075a[0xe]; // 0x75a
public:
	float m_flTickSoundInterval; // 0x768	
private:
	[[maybe_unused]] uint8_t __pad076c[0x4]; // 0x76c
public:
	Vector m_vLastAbsOrigin; // 0x770	
	Vector m_vLastAbsVelocity; // 0x77c	
private:
	[[maybe_unused]] uint8_t __pad0788[0x18]; // 0x788
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecTargetToIgnore; // 0x7a0	
	bool m_bDetonateStarted; // 0x7b8	
private:
	[[maybe_unused]] uint8_t __pad07b9[0x3]; // 0x7b9
public:
	// MNetworkEnable
	Vector m_vInitialVelocity; // 0x7bc	
	// MNetworkEnable
	Vector m_vInitialPosition; // 0x7c8	
	// MNetworkEnable
	CUtlStringToken m_abilityID; // 0x7d4	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hThrower; // 0x7d8	
private:
	[[maybe_unused]] uint8_t __pad07dc[0x4]; // 0x7dc
public:
	// MNetworkEnable
	CUtlSymbolLarge m_sParticleName; // 0x7e0	
	// MNetworkEnable
	Vector m_vecSpawnPosition; // 0x7e8	
	// MNetworkEnable
	float m_flProjectileSpeed; // 0x7f4	
	// MNetworkEnable
	float m_flMaxLifetime; // 0x7f8	
	// MNetworkEnable
	float m_flParticleRadius; // 0x7fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CBaseDMStart : public CPointEntity
{
public:
	CUtlSymbolLarge m_Master; // 0x4b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Tengu_LightningCrash_Regeneration : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_PowerSurge : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_PowerSurgeVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_WeaponFxParticle; // 0x6d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strWeaponShootSound; // 0x7b8	
	CSoundEventName m_strBulletWhizSound; // 0x7c8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x7d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1008
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flTimeStartZipping"
// MNetworkVarNames "GameTime_t m_flTimeForKnockdownProtection"
// MNetworkVarNames "GameTime_t m_flTimeStopZipping"
// MNetworkVarNames "float m_flCasterSpeed"
// MNetworkVarNames "CNetworkVelocityVector m_vecInitialVel"
// MNetworkVarNames "Vector m_vecAttachPoint"
// MNetworkVarNames "EHANDLE m_pPrevNode"
// MNetworkVarNames "EHANDLE m_pNextNode"
// MNetworkVarNames "GameTime_t m_flTimeEnterState"
// MNetworkVarNames "GameTime_t m_flLatchTime"
// MNetworkVarNames "GameTime_t m_flDamagedTime"
// MNetworkVarNames "EAttachState_t m_eAttachState"
// MNetworkVarNames "int m_iAttachedZipLineLane"
// MNetworkVarNames "bool m_bDroppedFromZipline"
// MNetworkVarNames "Vector m_vAttachZipLineOffset"
class CCitadel_Ability_ZipLine : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x4d0]; // 0xab0
public:
	GameTime_t m_flActivatePressTime; // 0xf80	
	bool m_bThinking; // 0xf84	
	bool m_bMoveCollidedPushUp; // 0xf85	
private:
	[[maybe_unused]] uint8_t __pad0f86[0x6]; // 0xf86
public:
	// MNetworkEnable
	GameTime_t m_flTimeStartZipping; // 0xf8c	
	// MNetworkEnable
	GameTime_t m_flTimeForKnockdownProtection; // 0xf90	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flTimeStopZipping; // 0xf94	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	float m_flCasterSpeed; // 0xf98	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	CNetworkVelocityVector m_vecInitialVel; // 0xf9c	
private:
	[[maybe_unused]] uint8_t __pad0fc4[0xc]; // 0xfc4
public:
	// MNetworkEnable
	Vector m_vecAttachPoint; // 0xfd0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	CHandle< CBaseEntity > m_pPrevNode; // 0xfdc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	CHandle< CBaseEntity > m_pNextNode; // 0xfe0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flTimeEnterState; // 0xfe4	
	// MNetworkEnable
	GameTime_t m_flLatchTime; // 0xfe8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flDamagedTime; // 0xfec	
	// MNetworkEnable
	// MNetworkChangeCallback "ZiplingAttachStateChanged"
	EAttachState_t m_eAttachState; // 0xff0	
	// MNetworkEnable
	int32_t m_iAttachedZipLineLane; // 0xff4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bDroppedFromZipline; // 0xff8	
	AttachmentHandle_t m_hAttachZipLine; // 0xff9	
private:
	[[maybe_unused]] uint8_t __pad0ffa[0x2]; // 0xffa
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vAttachZipLineOffset; // 0xffc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
// Is Abstract
class CCitadelBaseAbilityServerOnly : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TeamRelativeParticleVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ParentViewParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_OtherPlayerViewParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x180
// Has VTable
class CCitadelRegenComponent : public CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0008[0x8]; // 0x8
public:
	GameTime_t m_flLastRegenThinkTime; // 0x10	
	float m_flRegenAccumulator; // 0x14	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelRegenComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_referenced_but_impl_is_contained(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelRegenComponent")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierAuraVData : public CModifierVData_BaseAura
{
public:
	CITADEL_UNIT_TARGET_TYPE m_iAuraSearchType; // 0x630	
	CITADEL_UNIT_TARGET_FLAGS m_iAuraSearchFlags; // 0x634	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Silenced : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_BreakablePropCooldownReduction : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x520
// Has VTable
class FilterHealth : public CBaseFilter
{
public:
	bool m_bAdrenalineActive; // 0x510	
private:
	[[maybe_unused]] uint8_t __pad0511[0x3]; // 0x511
public:
	int32_t m_iHealthMin; // 0x514	
	int32_t m_iHealthMax; // 0x518	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierRapidFireChannelVData : public CCitadelModifierVData
{
public:
	float m_flAirDrag; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_BulletFlurryVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BulletFlurryModifier; // 0x15c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x928
// Has VTable
class CTriggerModifier : public CBaseTrigger
{
public:
	CUtlSymbolLarge m_iszModifierName; // 0x918	
	CUtlStringToken m_tModifier; // 0x920	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CGameModifier_SetModelScale : public CCitadelModifier
{
public:
	float m_flOldModelScale; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x800
// Has VTable
class CCitadel_Projectile_Bebop_Hook : public CCitadelProjectile
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Synth_Blitz_TechAmp_VData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_WreckingBall_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x218
// Has VTable
class CCitadel_Modifier_Puddle : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x88]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1530
// Has VTable
// 
// MGetKV3ClassDefaults
class CitadelItemVData : public CitadelAbilityVData
{
private:
	[[maybe_unused]] uint8_t __pad14e8[0x4]; // 0x14e8
public:
	EModTier_t m_iItemTier; // 0x14ec	
	int8_t m_nUpgradeSlotCost; // 0x14ed	
	bool m_bWarnIfNoAffectedAbilities; // 0x14ee	
	bool m_bRequiresChargedAbility; // 0x14ef	
	bool m_bRequiresChanelledAbility; // 0x14f0	
private:
	[[maybe_unused]] uint8_t __pad14f1[0x7]; // 0x14f1
public:
	CUtlVector< CSubclassName< 4 > > m_vecComponentItems; // 0x14f8	
	bool m_bShowTextDescription; // 0x1510	
	bool m_bIsDefensiveItem; // 0x1511	
	EShopFilters_t m_eShopFilters; // 0x1512	
private:
	[[maybe_unused]] uint8_t __pad1514[0x4]; // 0x1514
public:
	// MPropertyFriendlyName "Item Tooltips"
	CUtlVector< ItemSectionInfo_t > m_vecTooltipSectionInfo; // 0x1518	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_BulletArmorReduction : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x820
// Has VTable
// 
// MNetworkVarNames "CPropDataComponent::Storage_t m_CPropDataComponent"
class CBreakable : public CBaseModelEntity
{
private:
	[[maybe_unused]] uint8_t __pad0748[0x8]; // 0x748
public:
	// MNetworkEnable
	// MNetworkUserGroup "CPropDataComponent"
	// MNetworkAlias "CPropDataComponent"
	// MNetworkTypeAlias "CPropDataComponent"
	// -> m_flDmgModBullet - 0x760
	// -> m_flDmgModClub - 0x764
	// -> m_flDmgModExplosive - 0x768
	// -> m_flDmgModFire - 0x76c
	// -> m_iszPhysicsDamageTableName - 0x770
	// -> m_iszBasePropData - 0x778
	// -> m_nInteractions - 0x780
	// -> m_bSpawnMotionDisabled - 0x784
	// -> m_nDisableTakePhysicsDamageSpawnFlag - 0x788
	// -> m_nMotionDisabledSpawnFlag - 0x78c
	CPropDataComponent m_CPropDataComponent; // 0x750	
	Materials m_Material; // 0x790	
	CHandle< CBaseEntity > m_hBreaker; // 0x794	
	Explosions m_Explosion; // 0x798	
private:
	[[maybe_unused]] uint8_t __pad079c[0x4]; // 0x79c
public:
	CUtlSymbolLarge m_iszSpawnObject; // 0x7a0	
	float m_flPressureDelay; // 0x7a8	
	int32_t m_iMinHealthDmg; // 0x7ac	
	CUtlSymbolLarge m_iszPropData; // 0x7b0	
	float m_impactEnergyScale; // 0x7b8	
	EOverrideBlockLOS_t m_nOverrideBlockLOS; // 0x7bc	
	CEntityIOOutput m_OnBreak; // 0x7c0	
	CEntityOutputTemplate< float32 > m_OnHealthChanged; // 0x7e8	
	PerformanceMode_t m_PerformanceMode; // 0x810	
	CHandle< CBasePlayerPawn > m_hPhysicsAttacker; // 0x814	
	GameTime_t m_flLastPhysicsInfluenceTime; // 0x818	
	
	// Datamap fields:
	// void InputBreak; // 0x0
	// int32_t InputSetHealth; // 0x0
	// int32_t InputAddHealth; // 0x0
	// int32_t InputRemoveHealth; // 0x0
	// float InputSetMass; // 0x0
	// void CBreakableDie; // 0x0
	// int32_t material; // 0x7fffffff
	// int32_t spawnobject; // 0x7fffffff
	// int32_t propdata; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x928
// Has VTable
class CTonemapTrigger : public CBaseTrigger
{
public:
	CUtlSymbolLarge m_tonemapControllerName; // 0x918	
	CEntityHandle m_hTonemapController; // 0x920	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CServerOnlyPointEntity : public CServerOnlyEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x38
// Has VTable
// 
// MNetworkVarNames "attrib_definition_index_t m_iAttributeDefinitionIndex"
// MNetworkVarNames "float m_flValue"
class CEconItemAttribute
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x30]; // 0x0
public:
	// MNetworkEnable
	attrib_definition_index_t m_iAttributeDefinitionIndex; // 0x30	
private:
	[[maybe_unused]] uint8_t __pad0032[0x2]; // 0x32
public:
	// MNetworkEnable
	// MNetworkAlias "m_iRawValue32"
	float m_flValue; // 0x34	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Bolo_Leech : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_BulletFlurry : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x980
// Has VTable
class CFogTrigger : public CBaseTrigger
{
public:
	fogparams_t m_fog; // 0x918	
	
	// Datamap fields:
	// Color m_fog.colorPrimary; // 0x92c
	// Color m_fog.colorSecondary; // 0x930
	// Vector m_fog.dirPrimary; // 0x920
	// bool m_fog.enable; // 0x97c
	// bool m_fog.blend; // 0x97d
	// float m_fog.start; // 0x93c
	// float m_fog.end; // 0x940
	// float m_fog.farz; // 0x944
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierAirLiftExplodeAuraVData : public CCitadelModifierAuraVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_empWaveParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_BreakablePropExtraGoldPickup : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CLogicCollisionPair : public CLogicalEntity
{
public:
	CUtlSymbolLarge m_nameAttach1; // 0x4b8	
	CUtlSymbolLarge m_nameAttach2; // 0x4c0	
	bool m_supportMultipleEntitiesWithSameName; // 0x4c8	
	bool m_disabled; // 0x4c9	
	bool m_succeeded; // 0x4ca	
	
	// Datamap fields:
	// void InputDisableCollisions; // 0x0
	// CUtlSymbolLarge InputDisableCollisionsWith; // 0x0
	// void InputEnableCollisions; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_Rutger_Pulse : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierAerialAssaultWatcherVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AssaultModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_ColdFrontVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AOEModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_PreventHealing : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x20
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "GameTime_t m_flLatchTime"
// MNetworkVarNames "float m_flLatchValue"
struct AbilityResource_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	float m_flCurrentValue; // 0x8	
	float m_flPrevRegenRate; // 0xc	
	float m_flMaxValue; // 0x10	
	// MNetworkEnable
	GameTime_t m_flLatchTime; // 0x14	
	// MNetworkEnable
	float m_flLatchValue; // 0x18	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x938
// Has VTable
class CCitadelZiplineCaptureTrigger : public CBaseTrigger
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x928
// Has VTable
class CTriggerObscuredVolume : public CBaseTrigger
{
public:
	CUtlSymbolLarge m_iszModifierName; // 0x918	
	CUtlStringToken m_tModifier; // 0x920	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x800
// Has VTable
class CProjectile_Synth_PlasmaFlux : public CCitadelProjectile
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
// 
// MNetworkVarNames "EntitySubclassID_t m_vecComponentsConsumed"
class CCitadel_Item : public CCitadelBaseAbility
{
public:
	bool m_bEquipped; // 0xab0	
private:
	[[maybe_unused]] uint8_t __pad0ab1[0x7]; // 0xab1
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	CNetworkUtlVectorBase< CUtlStringToken > m_vecComponentsConsumed; // 0xab8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d8
// Has VTable
class CPointTeleport : public CServerOnlyPointEntity
{
public:
	Vector m_vSaveOrigin; // 0x4b8	
	QAngle m_vSaveAngles; // 0x4c4	
	bool m_bTeleportParentedEntities; // 0x4d0	
	bool m_bTeleportUseCurrentAngle; // 0x4d1	
	
	// Datamap fields:
	// void InputTeleport; // 0x0
	// CUtlSymbolLarge InputTeleportEntity; // 0x0
	// void InputTeleportToCurrentPos; // 0x0
	// CUtlSymbolLarge InputTeleportEntityToCurrentPos; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc48
// Has VTable
class CAbility_Mirage_DjinnsReach : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_ChannelParticle; // 0xab0	
	Vector m_vInitialCasterForward; // 0xab4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Cadence_Crescendo_PostAOE_VData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierRapidFireAirJuggleVData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityCrowdControlVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x14e8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x15c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16d0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_ProximityRitual_VData : public CitadelAbilityVData
{
public:
	float m_flThinkInterval; // 0x14e8	
private:
	[[maybe_unused]] uint8_t __pad14ec[0x4]; // 0x14ec
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_UnitTargetParticle; // 0x14f0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_PredatoryStatueModel; // 0x15d0	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_PredatoryStatueModifier; // 0x16b0	
	// MPropertyStartGroup "Gameplay"
	float m_flHeavyMeleeDmg; // 0x16c0	
	float m_flLightMeleeDmg; // 0x16c4	
	float m_flAbilityDamageScale; // 0x16c8	
	float m_flNPCDamageMax; // 0x16cc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb60
// Has VTable
// 
// MNetworkVarNames "bool m_bAirRaiding"
class CCitadel_Ability_PowerJump : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_nTargetingParticleIndex; // 0xab0	
	// MNetworkEnable
	bool m_bAirRaiding; // 0xab4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1550
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_WeaponUpgrade_SharpShooterVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_HeadShotVictimSound; // 0x1530	
	CSoundEventName m_HeadShotConfirmationSound; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierTier3BossLaserBeamVData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x258
// Has VTable
class CCitadel_Modifier_Warden_RiotProtocol : public CCitadelModifier
{
public:
	CUtlOrderedMap< CHandle< CBaseEntity >, GameTime_t > m_mapEntToTimeHit; // 0xc8	
	int32_t m_nNumPlayersAffected; // 0xf0	
	int32_t m_nNumPlayersKilled; // 0xf4	
	QAngle m_playerAngles; // 0xf8	
	ParticleIndex_t m_ConeParticle; // 0x104	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1500
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityMeleeVData : public CitadelAbilityVData
{
public:
	// MPropertyDescription "How long we'll buffer input to trigger another melee if we're already performing a melee"
	float m_flMeleeInputBufferTime; // 0x14e8	
	// MPropertyDescription "If we detect an enemy within this distance, forward attack movement will be suppressed so we don't move through them"
	float m_flCollisionDistance; // 0x14ec	
	// MPropertyDescription "A heavy attack will trigger after being charged up for this long"
	float m_flHeavyAttackRequiredHoldTime; // 0x14f0	
	// MPropertyDescription "A light attack will trigger if the melee button is pressed and released within this time.  After this time, a heavy melee will charge up"
	float m_flLightAttackMaxHoldTime; // 0x14f4	
	TakeDamageFlags_t m_MeleeDamageFlags; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Intrinsic_BaseVData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_SlowImmunity : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_VisibleDuration : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x200
// Has VTable
// 
// MGetKV3ClassDefaults
class CAI_BaseNPCVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_sModelName; // 0x28	
	// MPropertyGroupName "Sounds"
	CFootstepTableHandle m_hFootstepSounds; // 0x108	
	// MPropertyFriendlyName "Nav Link Movements"
	// MPropertyDescription "List of the kind of nav links movement this unit is capable of."
	// MPropertyCustomFGDType "vdata_choice:scripts/navlinks.vdata"
	CUtlVector< CGlobalSymbol > m_vecNavLinkMovementNames; // 0x110	
	int32_t m_nMaxHealth; // 0x128	
private:
	[[maybe_unused]] uint8_t __pad012c[0x4]; // 0x12c
public:
	CUtlVector< CEmbeddedSubclass< CCitadelModifier > > m_vecIntrinsicModifiers; // 0x130	
	// MPropertyFriendlyName "Status Effects"
	// MPropertyDescription "List of the status effects this NPC cares about"
	NPCStatusEffectMap_t m_statusEffectMap; // 0x148	
private:
	[[maybe_unused]] uint8_t __pad0149[0x7]; // 0x149
public:
	CUtlVector< NPCAttachmentDesc_t > m_vecAttachments; // 0x150	
	// MPropertyStartGroup "Damage"
	CSkillFloat m_flHeadDamageMultiplier; // 0x168	
	CSkillFloat m_flChestDamageMultiplier; // 0x178	
	CSkillFloat m_flStomachDamageMultiplier; // 0x188	
	CSkillFloat m_flArmDamageMultiplier; // 0x198	
	CSkillFloat m_flLegDamageMultiplier; // 0x1a8	
	CSkillInt m_nMaxAdditionalAmmoBalancingShots; // 0x1b8	
	bool m_bTakesDamage; // 0x1c8	
	// MPropertyStartGroup "Navigation"
	bool m_bAllowNonZUpMovement; // 0x1c9	
	// MPropertyDescription "If true, this NPC will use the capsule collision.  Capsule collision will also be used if m_bAllowNonZUpMovement is set."
	bool m_bRequestCapsuleCollision; // 0x1ca	
private:
	[[maybe_unused]] uint8_t __pad01cb[0x1]; // 0x1cb
public:
	// MPropertyDescription "Override the radius of the capsule. Requires m_bAllowNonZUpMovement or m_bRequestCapsuleCollision to be set. 0 to use collision prop OBB"
	float m_flCapsuleRadiusOverride; // 0x1cc	
	// MPropertyDescription "Override the height of the capsule. Requires m_bAllowNonZUpMovement or m_bRequestCapsuleCollision to be set. 0 to use collision prop height."
	float m_flCapsuleHeightOverride; // 0x1d0	
private:
	[[maybe_unused]] uint8_t __pad01d4[0x4]; // 0x1d4
public:
	// MPropertyStartGroup "Animation"
	// MPropertyFriendlyName "Enabled Shared Actions"
	// MPropertyDescription "List of the shared BaseNPC actions this NPC supports"
	// MPropertyAttributeEditor "VDataAnimGraphParamEnumValue( m_sModelName; literal; e_action_desired_shared )"
	CUtlVector< CGlobalSymbol > m_vecActionDesiredShared; // 0x1d8	
	// MPropertyStartGroup "Sounds"
	// MPropertyDescription "Player Killed NPC Sound"
	CSoundEventName m_sPlayerKilledNpcSound; // 0x1f0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcc0
// Has VTable
// 
// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "CGameSceneNode::m_angRotation"
// MNetworkIncludeByName "m_hOwnerEntity"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkIncludeByName "CGameSceneNode::m_hierarchyAttachName"
// MNetworkIncludeByName "m_nameStringableIndex"
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "char m_szSnapshotFileName"
// MNetworkVarNames "bool m_bActive"
// MNetworkVarNames "bool m_bFrozen"
// MNetworkVarNames "float m_flFreezeTransitionDuration"
// MNetworkVarNames "int m_nStopType"
// MNetworkVarNames "bool m_bAnimateDuringGameplayPause"
// MNetworkVarNames "HParticleSystemDefinitionStrong m_iEffectIndex"
// MNetworkVarNames "GameTime_t m_flStartTime"
// MNetworkVarNames "float32 m_flPreSimTime"
// MNetworkVarNames "Vector m_vServerControlPoints"
// MNetworkVarNames "uint8 m_iServerControlPointAssignments"
// MNetworkVarNames "CHandle< CBaseEntity > m_hControlPointEnts"
// MNetworkVarNames "bool m_bNoSave"
// MNetworkVarNames "bool m_bNoFreeze"
// MNetworkVarNames "bool m_bNoRamp"
class CParticleSystem : public CBaseModelEntity
{
public:
	// MNetworkEnable
	char m_szSnapshotFileName[512]; // 0x748	
	// MNetworkEnable
	bool m_bActive; // 0x948	
	// MNetworkEnable
	bool m_bFrozen; // 0x949	
private:
	[[maybe_unused]] uint8_t __pad094a[0x2]; // 0x94a
public:
	// MNetworkEnable
	float m_flFreezeTransitionDuration; // 0x94c	
	// MNetworkEnable
	int32_t m_nStopType; // 0x950	
	// MNetworkEnable
	bool m_bAnimateDuringGameplayPause; // 0x954	
private:
	[[maybe_unused]] uint8_t __pad0955[0x3]; // 0x955
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIParticleSystemDefinition > m_iEffectIndex; // 0x958	
	// MNetworkEnable
	GameTime_t m_flStartTime; // 0x960	
	// MNetworkEnable
	float m_flPreSimTime; // 0x964	
	// MNetworkEnable
	Vector m_vServerControlPoints[4]; // 0x968	
	// MNetworkEnable
	uint8_t m_iServerControlPointAssignments[4]; // 0x998	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hControlPointEnts[64]; // 0x99c	
	// MNetworkEnable
	bool m_bNoSave; // 0xa9c	
	// MNetworkEnable
	bool m_bNoFreeze; // 0xa9d	
	// MNetworkEnable
	bool m_bNoRamp; // 0xa9e	
	bool m_bStartActive; // 0xa9f	
	CUtlSymbolLarge m_iszEffectName; // 0xaa0	
	CUtlSymbolLarge m_iszControlPointNames[64]; // 0xaa8	
	int32_t m_nDataCP; // 0xca8	
	Vector m_vecDataCPValue; // 0xcac	
	int32_t m_nTintCP; // 0xcb8	
	Color m_clrTint; // 0xcbc	
	
	// Datamap fields:
	// void InputStart; // 0x0
	// void InputStop; // 0x0
	// void InputStopEndCap; // 0x0
	// void InputDestroy; // 0x0
	// CUtlSymbolLarge InputSetControlPoint; // 0x0
	// float InputSetDataControlPointX; // 0x0
	// float InputSetDataControlPointY; // 0x0
	// float InputSetDataControlPointZ; // 0x0
	// void CParticleSystemStartParticleSystemThink; // 0x0
	// CUtlString cpoint%d_value[64]; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CModifier_Mirage_SandPhantom_WhirlwindEvasion : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1f0
// Has VTable
class CCitadel_Modifier_LifeDrain : public CCitadelModifier
{
public:
	ParticleIndex_t m_nFXIndex; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_StaticChargeVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZapParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1610
// Has VTable
// 
// MGetKV3ClassDefaults
class CItemRefresherVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RefreshParticle; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Hero_Testing_Damage_AuraDebuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8
class CAI_WaypointList
{
public:
	AI_Waypoint_t* m_pFirstWaypoint; // 0x0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_AirLift_LandBuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_ChargingGun : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CItemSmokeBombPreCastModifierVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SmokeAreaParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CasterParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
// Is Abstract
class CCitadel_Modifier_BaseEventProc : public CCitadelModifier
{
public:
	CUtlVector< CBaseEntity* > m_vecProcdUnitsThisShot; // 0xc8	
	CUtlVector< CBaseEntity* > m_vecTrackedUnitsThisFrame; // 0xe0	
	ShotID_t m_nLastShotId; // 0xf8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x20
// Has Trivial Destructor
struct AIScheduleState_t
{
public:
	int32_t m_nCurTask; // 0x0	
	TaskStatus_t m_nTaskStatus; // 0x4	
	GameTime_t m_flTimeStarted; // 0x8	
	GameTime_t m_flTimeCurTaskStarted; // 0xc	
	int64_t m_taskFailureCode; // 0x10	
	int32_t m_nTaskInterrupt; // 0x18	
	bool m_bScheduleWasInterrupted; // 0x1c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xac8
// Has VTable
class CCitadel_Ability_WreckingBallThrow : public CCitadelBaseTriggerAbility
{
public:
	CHandle< CCitadel_Ability_WreckingBall > m_hWreckingBallAbility; // 0xac0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BreakablePropFireRatePickupVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Powerup Values"
	float m_flFireRate; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x508
// Has VTable
class CMoverPathNode : public CPointEntity
{
public:
	Vector m_vInTangentLocal; // 0x4b8	
	Vector m_vOutTangentLocal; // 0x4c4	
	CUtlSymbolLarge m_szParentPathUniqueID; // 0x4d0	
	CEntityIOOutput m_OnPassThrough; // 0x4d8	
	CHandle< CPathMover > m_hMover; // 0x500	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_Cadence_Crescendo : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Ult_ShadowVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ShadowModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_SpilledBloodThinker : public CCitadelModifier
{
public:
	float m_flRadius; // 0xc8	
	float m_flDPS; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Upgrade_StabilizingTripodVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SelfDebuffModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelBulletTimeWarpVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TimeWallHitParticle; // 0x28	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TimeWallHitTimerParticle; // 0x108	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x550
// Has VTable
class CEnvSoundscape : public CServerOnlyEntity
{
public:
	CEntityIOOutput m_OnPlay; // 0x4b8	
	float m_flRadius; // 0x4e0	
private:
	[[maybe_unused]] uint8_t __pad04e4[0x4]; // 0x4e4
public:
	CUtlSymbolLarge m_soundscapeName; // 0x4e8	
	CUtlSymbolLarge m_soundEventName; // 0x4f0	
	bool m_bOverrideWithEvent; // 0x4f8	
private:
	[[maybe_unused]] uint8_t __pad04f9[0x3]; // 0x4f9
public:
	int32_t m_soundscapeIndex; // 0x4fc	
	int32_t m_soundscapeEntityListId; // 0x500	
	uint32_t m_soundEventHash; // 0x504	
	CUtlSymbolLarge m_positionNames[8]; // 0x508	
	CHandle< CEnvSoundscape > m_hProxySoundscape; // 0x548	
	bool m_bDisabled; // 0x54c	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void InputToggleEnabled; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x610
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierItemPickupAuraTargetVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Timers"
	float m_PickupTimer; // 0x5f8	
private:
	[[maybe_unused]] uint8_t __pad05fc[0x4]; // 0x5fc
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_PickupTimerModifier; // 0x600	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16d0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Tokamak_DyingStarVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplosionParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FlameAuraParticle; // 0x15c8	
	// MPropertyLeafSuggestionProviderFn
	CGlobalSymbol m_strInFlightAnimGraphParam; // 0x16a8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x16b0	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_InFlightModifier; // 0x16c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1538
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_PrimaryWeaponVData : public CitadelAbilityVData
{
private:
	[[maybe_unused]] uint8_t __pad14e8[0x8]; // 0x14e8
public:
	// MPropertyDescription "The DOF settings to apply while zoomed in."
	DOFDesc_t m_DOFWhileZoomed; // 0x14f0	
	// MPropertyDescription "When true, the 'Far Crisp' and 'Far Blurry' are added on top of the gun's range.  When false, use the values directly."
	bool m_bDOFFarSettingsAreOffsetByGunRange; // 0x1500	
private:
	[[maybe_unused]] uint8_t __pad1501[0x7]; // 0x1501
public:
	// MPropertyStartGroup "Sounds"
	// MPropertyFriendlyName "Fire while disarmed sound"
	CSoundEventName m_sDisarmedSound; // 0x1508	
	float m_flMinDisarmedSoundInterval; // 0x1518	
private:
	[[maybe_unused]] uint8_t __pad151c[0x4]; // 0x151c
public:
	CSoundEventName m_sObstructedShotSound; // 0x1520	
	// MPropertyStartGroup "Action Reload"
	// MPropertyAttributeRange "0 1"
	// MPropertyDescription "If we have action reloads, at what fraction of our reload progress does the timing window start.  The window is centered on this time."
	float m_flActionReloadTimingStart; // 0x1530	
	// MPropertyDescription "If we have action reloads, how long is the window"
	float m_flActionReloadTimingDuration; // 0x1534	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x988
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ProjectMindVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportStartParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportEndParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportTrailParticle; // 0x7b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportModelParticle; // 0x898	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ShieldModifier; // 0x978	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x220
// Has VTable
class CModifier_SiphonBullets : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1630
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_BubbleVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x1530	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_CastTargetSound; // 0x1610	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_BubbleModifier; // 0x1620	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "CHandle< CFogController> m_hCtrl"
struct fogplayerparams_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	// MNetworkUserGroup "PlayerFogController"
	CHandle< CFogController > m_hCtrl; // 0x8	
	float m_flTransitionTime; // 0xc	
	Color m_OldColor; // 0x10	
	float m_flOldStart; // 0x14	
	float m_flOldEnd; // 0x18	
	float m_flOldMaxDensity; // 0x1c	
	float m_flOldHDRColorScale; // 0x20	
	float m_flOldFarZ; // 0x24	
	Color m_NewColor; // 0x28	
	float m_flNewStart; // 0x2c	
	float m_flNewEnd; // 0x30	
	float m_flNewMaxDensity; // 0x34	
	float m_flNewHDRColorScale; // 0x38	
	float m_flNewFarZ; // 0x3c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_PowerGenerator : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_CatBullet_VData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_CatBulletModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1510
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Chrono_PulseGrenade_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_PulseAreaModifier; // 0x14e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strHitSound; // 0x14f8	
	// MPropertyStartGroup "Misc"
	CUtlString m_strDebuffStatName; // 0x1508	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Tier2Boss_Stomp : public CCitadelBaseAbilityServerOnly
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x28
// Has VTable
// 
// MNetworkVarNames "CTransform m_Transforms"
// MNetworkVarNames "EHANDLE m_hOwner"
struct PhysicsRagdollPose_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnTransformChanged"
	CNetworkUtlVectorBase< CTransform > m_Transforms; // 0x8	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hOwner; // 0x20	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x648
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_FrenzyAuraVData : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_KillModifier; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x528
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "fogparams_t m_fog"
class CFogController : public CBaseEntity
{
public:
	// MNetworkEnable
	fogparams_t m_fog; // 0x4b8	
	bool m_bUseAngles; // 0x520	
private:
	[[maybe_unused]] uint8_t __pad0521[0x3]; // 0x521
public:
	int32_t m_iChangedVariables; // 0x524	
	
	// Datamap fields:
	// float InputSetStartDist; // 0x0
	// float InputSetEndDist; // 0x0
	// float InputSetMaxDensity; // 0x0
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// Color InputSetColor; // 0x0
	// Color InputSetColorSecondary; // 0x0
	// int32_t InputSetFarZ; // 0x0
	// CUtlSymbolLarge InputSetAngles; // 0x0
	// float InputSet2DSkyboxFogFactor; // 0x0
	// Color InputSetColorLerpTo; // 0x0
	// Color InputSetColorSecondaryLerpTo; // 0x0
	// float InputSetStartDistLerpTo; // 0x0
	// float InputSetEndDistLerpTo; // 0x0
	// float InputSetMaxDensityLerpTo; // 0x0
	// float InputSet2DSkyboxFogFactorLerpTo; // 0x0
	// void InputStartFogTransition; // 0x0
	// void CFogControllerSetLerpValues; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Synth_Pulse_Escape_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SatchelParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1b10
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelAbilityTangoTetherVData : public CitadelAbilityVData
{
public:
	float m_flJumpFallSpeedMax; // 0x14e8	
	float m_flJumpAirDrag; // 0x14ec	
	float m_flJumpAirSpeedMax; // 0x14f0	
	float m_flJumpSpeed; // 0x14f4	
	float m_flJumpPitch; // 0x14f8	
	float m_flDashSpeed; // 0x14fc	
	float m_flDashCloseEnoughToTarget; // 0x1500	
	float m_flDashLockOntoTargetDist; // 0x1504	
	float m_flVelocityTurnSpringStrength; // 0x1508	
	CRemapFloat m_flAngleToSpeedScale; // 0x150c	
	float m_flBackswingDuration; // 0x151c	
	float m_flAnimToStrikePointTime; // 0x1520	
	float m_flGrappleShotFloatTime; // 0x1524	
	float m_flGrappleShotDelayToFlyOnHit; // 0x1528	
	float m_flGrappleSpeed; // 0x152c	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_TetherModifier; // 0x1530	
	CEmbeddedSubclass< CBaseModifier > m_GrappleTargetModifier; // 0x1540	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LeapParticle; // 0x1550	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x1630	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SlashParticle; // 0x1710	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BulletGrappleTracerParticle; // 0x17f0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EnemyGrappleParticle; // 0x18d0	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strDamageTarget; // 0x19b0	
	CSoundEventName m_strStartDash; // 0x19c0	
	CSoundEventName m_strStartAttack; // 0x19d0	
	CSoundEventName m_strGrappleHitTarget; // 0x19e0	
	CSoundEventName m_strGrappleHitWorld; // 0x19f0	
	CSoundEventName m_strGrappleHitNothing; // 0x1a00	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceFlying; // 0x1a10	
	CitadelCameraOperationsSequence_t m_cameraSequenceAttacking; // 0x1a90	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_WeaponUpgrade_BansheeSlugs_VData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TechDefenderShreddersProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TechDebuffModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_DivinersKevlarBuff_VData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_KevlarChannelParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
// Is Abstract
class CCitadel_Modifier_BaseShield : public CCitadelModifier
{
public:
	CUtlSymbolLarge m_strToken; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1620
// Has VTable
// 
// MGetKV3ClassDefaults
class CItem_Infuser_VData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x1530	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x230
// Has VTable
// 
// MNetworkVarNames "HModelStrong m_hModel"
// MNetworkVarNames "bool m_bClientClothCreationSuppressed"
// MNetworkVarNames "MeshGroupMask_t m_MeshGroupMask"
// MNetworkVarNames "int8 m_nIdealMotionType"
class CModelState
{
private:
	[[maybe_unused]] uint8_t __pad0000[0xa0]; // 0x0
public:
	// MNetworkEnable
	// MNetworkChangeCallback "skeletonModelChanged"
	CStrongHandle< InfoForResourceTypeCModel > m_hModel; // 0xa0	
	// MNetworkDisable
	CUtlSymbolLarge m_ModelName; // 0xa8	
private:
	[[maybe_unused]] uint8_t __pad00b0[0x38]; // 0xb0
public:
	// MNetworkEnable
	bool m_bClientClothCreationSuppressed; // 0xe8	
private:
	[[maybe_unused]] uint8_t __pad00e9[0xaf]; // 0xe9
public:
	// MNetworkEnable
	// MNetworkChangeCallback "skeletonMeshGroupMaskChanged"
	uint64_t m_MeshGroupMask; // 0x198	
private:
	[[maybe_unused]] uint8_t __pad01a0[0x7a]; // 0x1a0
public:
	// MNetworkEnable
	// MNetworkChangeCallback "skeletonMotionTypeChanged"
	int8_t m_nIdealMotionType; // 0x21a	
	// MNetworkDisable
	int8_t m_nForceLOD; // 0x21b	
	// MNetworkDisable
	int8_t m_nClothUpdateFlags; // 0x21c	
	
	// Datamap fields:
	// void m_pVPhysicsAggregate; // 0xe0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_Upgrade_OverdriveClip : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x958
// Has VTable
// 
// MNetworkIncludeByName "m_bClientSideRagdoll"
// MNetworkVarNames "bool m_bInitiallyPopulateInterpHistory"
// MNetworkVarNames "bool m_bAnimGraphUpdateEnabled"
// MNetworkVarNames "Vector m_vecForce"
// MNetworkVarNames "int32 m_nForceBone"
// MNetworkVarNames "PhysicsRagdollPose_t m_RagdollPose"
// MNetworkVarNames "bool m_bRagdollClientSide"
class CBaseAnimGraph : public CBaseModelEntity
{
private:
	[[maybe_unused]] uint8_t __pad0748[0x78]; // 0x748
public:
	// MNetworkEnable
	bool m_bInitiallyPopulateInterpHistory; // 0x7c0	
private:
	[[maybe_unused]] uint8_t __pad07c1[0x7]; // 0x7c1
public:
	IChoreoServices* m_pChoreoServices; // 0x7c8	
	// MNetworkEnable
	bool m_bAnimGraphUpdateEnabled; // 0x7d0	
private:
	[[maybe_unused]] uint8_t __pad07d1[0x3]; // 0x7d1
public:
	float m_flMaxSlopeDistance; // 0x7d4	
	Vector m_vLastSlopeCheckPos; // 0x7d8	
	bool m_bAnimationUpdateScheduled; // 0x7e4	
private:
	[[maybe_unused]] uint8_t __pad07e5[0x3]; // 0x7e5
public:
	// MNetworkEnable
	Vector m_vecForce; // 0x7e8	
	// MNetworkEnable
	int32_t m_nForceBone; // 0x7f4	
private:
	[[maybe_unused]] uint8_t __pad07f8[0x10]; // 0x7f8
public:
	// MNetworkEnable
	// -> m_Transforms - 0x810
	// -> m_hOwner - 0x828
	PhysicsRagdollPose_t m_RagdollPose; // 0x808	
	// MNetworkEnable
	// MNetworkChangeCallback "OnClientRagdollChanged"
	bool m_bRagdollClientSide; // 0x830	
	
	// Datamap fields:
	// void m_pMainGraphController; // 0x7b8
	// void CBaseAnimGraphChoreoServicesThink; // 0x0
	// float InputSetPlaybackRate; // 0x0
	// CUtlSymbolLarge InputSetBodyGroup; // 0x0
	// CUtlSymbolLarge InputSetTargetIdentifierOverride; // 0x0
	// void InputClearTargetIdentifierOverride; // 0x0
	// void InputBecomeRagdoll; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CEnableMotionFixup : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_VoidSphere_Buff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_StunnedVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StunnedParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_EscalatingExposure : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_ItemPickupAuraTarget : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_BreakablePropClipSizePickup : public CCitadelModifier
{
public:
	int32_t nClipRemaining; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x570
// Has VTable
class CInfoTrooperBossSpawn : public CServerOnlyPointEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x10]; // 0x4b8
public:
	CUtlSymbolLarge m_strBossEntityName; // 0x4c8	
	int32_t m_iLane; // 0x4d0	
	int32_t m_iCoverGroupID; // 0x4d4	
private:
	[[maybe_unused]] uint8_t __pad04d8[0x8]; // 0x4d8
public:
	bool m_bReinforcementsOnly; // 0x4e0	
private:
	[[maybe_unused]] uint8_t __pad04e1[0x17]; // 0x4e1
public:
	CEntityIOOutput m_eventOnTrooperKilled; // 0x4f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbe0
// Has VTable
class CCitadel_Ability_Wrecker_Salvage : public CCitadelBaseAbility
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecTargets; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc38
// Has VTable
class CCitadel_Ability_Charged_Bomb : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SlowingTech_ProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e8
// Has VTable
class CCitadel_Modifier_CharmedWraps : public CCitadel_Modifier_BaseEventProc
{
public:
	GameTime_t m_fLastPrimingLightAttackTime; // 0x170	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1808
// Has VTable
// 
// MGetKV3ClassDefaults
class CItemPhantomStrike_VData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x1530	
	CEmbeddedSubclass< CCitadelModifier > m_CasterModifier; // 0x1540	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x1550	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x1560	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x1640	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffParticle; // 0x1720	
	// MPropertyGroupName "Gameplay"
	float m_flTeleportDistance; // 0x1800	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1500
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityMantleVData : public CitadelAbilityVData
{
public:
	CUtlVector< MantleType_t > m_vecMantleTypes; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe0
// Has VTable
class CCitadel_Modifier_Basic_RangedArmorBonus : public CCitadelModifier
{
public:
	float m_flBulletResistancePctMin; // 0xc8	
	float m_flBulletResistancePctMax; // 0xcc	
	float m_flRangeMin; // 0xd0	
	float m_flRangeMax; // 0xd4	
	float m_flInvulnRange; // 0xd8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "float32 m_duration"
// MNetworkVarNames "GameTime_t m_timestamp"
// MNetworkVarNames "float32 m_timescale"
// MNetworkVarNames "WorldGroupId_t m_nWorldGroupId"
class CountdownTimer
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	float m_duration; // 0x8	
	// MNetworkEnable
	GameTime_t m_timestamp; // 0xc	
	// MNetworkEnable
	float m_timescale; // 0x10	
	// MNetworkEnable
	WorldGroupId_t m_nWorldGroupId; // 0x14	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x10
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "CEntityHandle m_hOwner"
// MNetworkVarNames "CUtlStringToken m_name"
class CGameSceneNodeHandle
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	CEntityHandle m_hOwner; // 0x8	
	// MNetworkEnable
	CUtlStringToken m_name; // 0xc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CPhysicsEntitySolver : public CLogicalEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CHandle< CBaseEntity > m_hMovingEntity; // 0x4c0	
	CHandle< CBaseEntity > m_hPhysicsBlocker; // 0x4c4	
	float m_separationDuration; // 0x4c8	
	GameTime_t m_cancelTime; // 0x4cc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc70
// Has VTable
class CCitadel_Ability_Thumper_1 : public CCitadelBaseAbility
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecHitEntities; // 0xab0	
	Vector m_vecAimPos; // 0xac8	
	Vector m_vecAimNormal; // 0xad4	
	float m_flPushForce; // 0xae0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf0
// Has VTable
class CCitadel_Modifier_Sleep : public CCitadelModifier
{
public:
	CUtlVector< CModifierHandleTyped< CCitadelModifier > > m_vecSleepModifiers; // 0xc8	
	bool m_bIsWakingUp; // 0xe0	
private:
	[[maybe_unused]] uint8_t __pad00e1[0x3]; // 0xe1
public:
	float m_flMinSleepTime; // 0xe4	
	float m_flWakeUpDelay; // 0xe8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xaf0
// Has VTable
class CCitadel_Ability_Running_Decoy : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x218
// Has VTable
class CCitadel_Modifier_PoisonBullet_ShotWatcher : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_PuddleVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_PuddleModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_IceDomeFriendly : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Intrinsic_Base : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1620
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_DPS_Aura_VData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AOECastParticle; // 0x1530	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ActiveModifier; // 0x1610	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_Upgrade_OverdriveClip : public CCitadelModifier
{
public:
	int32_t m_nBonusMaxClipSize; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_Berserker : public CCitadelModifier
{
public:
	float m_flDamageTaken; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BerserkerDamageStackVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffStatusParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffStatusParticleEnemy; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has Trivial Destructor
class HintNodeData
{
public:
	CUtlSymbolLarge strEntityName; // 0x0	
	int16_t nHintType; // 0x8	
private:
	[[maybe_unused]] uint8_t __pad000a[0x2]; // 0xa
public:
	int32_t nNodeID; // 0xc	
	CUtlSymbolLarge strGroup; // 0x10	
	int32_t iDisabled; // 0x18	
private:
	[[maybe_unused]] uint8_t __pad001c[0x4]; // 0x1c
public:
	CUtlSymbolLarge iszGenericType; // 0x20	
	HintIgnoreFacing_t fIgnoreFacing; // 0x28	
	NPC_STATE minState; // 0x2c	
	NPC_STATE maxState; // 0x30	
	int32_t nRadius; // 0x34	
	HintPriority_t ePriority; // 0x38	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_Item_TrackingProjectileApplyModifier : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadelModifier_CatTarget : public CCitadelModifier
{
public:
	CHandle< CCitadel_CatAnimating > m_hCat; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_IceDome : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x290
// Has VTable
class CCitadel_Modifier_DetentionAmmo : public CCitadel_Modifier_BaseEventProc
{
public:
	float m_flBuildupPerBullet; // 0x170	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x160
// Has VTable
// 
// MNetworkVarNames "CGameSceneNodeHandle m_hParent"
// MNetworkVarNames "CNetworkOriginCellCoordQuantizedVector m_vecOrigin"
// MNetworkVarNames "QAngle m_angRotation"
// MNetworkVarNames "float m_flScale"
// MNetworkVarNames "CUtlStringToken m_name"
// MNetworkVarNames "CUtlStringToken m_hierarchyAttachName"
class CGameSceneNode
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x10]; // 0x0
public:
	// MNetworkDisable
	CTransform m_nodeToWorld; // 0x10	
	// MNetworkDisable
	CEntityInstance* m_pOwner; // 0x30	
	// MNetworkDisable
	CGameSceneNode* m_pParent; // 0x38	
	// MNetworkDisable
	CGameSceneNode* m_pChild; // 0x40	
	// MNetworkDisable
	CGameSceneNode* m_pNextSibling; // 0x48	
private:
	[[maybe_unused]] uint8_t __pad0050[0x28]; // 0x50
public:
	// MNetworkEnable
	// MNetworkSerializer "gameSceneNode"
	// MNetworkChangeCallback "gameSceneNodeHierarchyParentChanged"
	// MNetworkPriority "32"
	// MNetworkVarEmbeddedFieldOffsetDelta "8"
	// -> m_hOwner - 0x80
	// -> m_name - 0x84
	CGameSceneNodeHandle m_hParent; // 0x78	
	// MNetworkEnable
	// MNetworkPriority "32"
	// MNetworkUserGroup "Origin"
	// MNetworkChangeCallback "gameSceneNodeLocalOriginChanged"
	CNetworkOriginCellCoordQuantizedVector m_vecOrigin; // 0x88	
private:
	[[maybe_unused]] uint8_t __pad00b8[0x8]; // 0xb8
public:
	// MNetworkEnable
	// MNetworkEncoder "qangle_precise"
	// MNetworkPriority "32"
	// MNetworkSerializer "gameSceneNodeStepSimulationAnglesSerializer"
	// MNetworkChangeCallback "gameSceneNodeLocalAnglesChanged"
	QAngle m_angRotation; // 0xc0	
	// MNetworkEnable
	// MNetworkChangeCallback "gameSceneNodeLocalScaleChanged"
	// MNetworkPriority "32"
	float m_flScale; // 0xcc	
	// MNetworkDisable
	Vector m_vecAbsOrigin; // 0xd0	
	// MNetworkDisable
	QAngle m_angAbsRotation; // 0xdc	
	// MNetworkDisable
	float m_flAbsScale; // 0xe8	
	// MNetworkDisable
	int16_t m_nParentAttachmentOrBone; // 0xec	
	// MNetworkDisable
	bool m_bDebugAbsOriginChanges; // 0xee	
	// MNetworkDisable
	bool m_bDormant; // 0xef	
	// MNetworkDisable
	bool m_bForceParentToBeNetworked; // 0xf0	
	struct 
	{
		// MNetworkDisable
		uint8_t m_bDirtyHierarchy: 1; 		
		// MNetworkDisable
		uint8_t m_bDirtyBoneMergeInfo: 1; 		
		// MNetworkDisable
		uint8_t m_bNetworkedPositionChanged: 1; 		
		// MNetworkDisable
		uint8_t m_bNetworkedAnglesChanged: 1; 		
		// MNetworkDisable
		uint8_t m_bNetworkedScaleChanged: 1; 		
		// MNetworkDisable
		uint8_t m_bWillBeCallingPostDataUpdate: 1; 		
		// MNetworkDisable
		uint8_t m_bBoneMergeFlex: 1; 		
		// MNetworkDisable
		uint8_t m_nLatchAbsOrigin: 2; 		
		// MNetworkDisable
		uint8_t m_bDirtyBoneMergeBoneToRoot: 1; 		
		uint16_t __pad0: 14;
	}; // 24 bits
	// MNetworkDisable
	uint8_t m_nHierarchicalDepth; // 0xf3	
	// MNetworkDisable
	uint8_t m_nHierarchyType; // 0xf4	
	// MNetworkDisable
	uint8_t m_nDoNotSetAnimTimeInInvalidatePhysicsCount; // 0xf5	
private:
	[[maybe_unused]] uint8_t __pad00f6[0x2]; // 0xf6
public:
	// MNetworkEnable
	CUtlStringToken m_name; // 0xf8	
private:
	[[maybe_unused]] uint8_t __pad00fc[0x3c]; // 0xfc
public:
	// MNetworkEnable
	// MNetworkChangeCallback "gameSceneNodeHierarchyAttachmentChanged"
	CUtlStringToken m_hierarchyAttachName; // 0x138	
	// MNetworkDisable
	float m_flZOffset; // 0x13c	
	// MNetworkDisable
	float m_flClientLocalScale; // 0x140	
	// MNetworkDisable
	Vector m_vRenderOrigin; // 0x144	
	
	// Datamap fields:
	// void m_bDirtyHierarchy; // -0x1
	// void m_bDirtyBoneMergeInfo; // -0x1
	// void m_bNetworkedPositionChanged; // -0x1
	// void m_bNetworkedAnglesChanged; // -0x1
	// void m_bNetworkedScaleChanged; // -0x1
	// void m_bWillBeCallingPostDataUpdate; // -0x1
	// void m_nLatchAbsOrigin; // -0x1
	// void m_bDirtyBoneMergeBoneToRoot; // -0x1
	// CHandle< CBaseEntity > parentname; // 0x7fffffff
	// bool useLocalOffset; // 0x7fffffff
	// bool useParentRenderBounds; // 0x7fffffff
	// bool positionInLocalSpace; // 0x7fffffff
	// Vector scales; // 0x7fffffff
	// Vector local.scales; // 0x7fffffff
	// float scale; // 0x7fffffff
	// float ModelScale; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_WeaponUpgrade_Ricochet : public CCitadel_Item
{
public:
	CModifierHandleTyped< CCitadel_Modifier_Ricochet_Proc > m_hRicochetModifier; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CInfoLandmark : public CPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityKobunVData : public CitadelAbilityVData
{
public:
	Vector m_vSummonFollowOffset; // 0x14e8	
private:
	[[maybe_unused]] uint8_t __pad14f4[0x4]; // 0x14f4
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_CloneModifier; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Tengu_UrnVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AuraModifier; // 0x15c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplodeSound; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_ThrowSandVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SandDebuff; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_SilenceDebuff; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1550
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_RescueBeamVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DispelAndHealModifier; // 0x1530	
	CEmbeddedSubclass< CCitadelModifier > m_PullModifier; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_RapidFire_AirJuggle : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1550
// Has VTable
// 
// MGetKV3ClassDefaults
class CItem_FleetfootBoots_VData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_FleetfootBootsModifier; // 0x1530	
	CEmbeddedSubclass< CCitadelModifier > m_FleetfootBootsBonusClipModifier; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CItem_WitheringWhip : public CCitadel_Item_TrackingProjectileApplyModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_BreakablePropExtraStamina : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CAI_NetworkManager : public CPointEntity
{
public:
	// Static fields:
	static CUtlVector< uint32 > &Get_m_SpawnGroupsContributingToNodeList(){return *reinterpret_cast<CUtlVector< uint32 >*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_NetworkManager")->GetStaticFields()[0]->m_pInstance);};
	static CUtlVector< CNodeEnt* > &Get_m_SpawningNodes(){return *reinterpret_cast<CUtlVector< CNodeEnt* >*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_NetworkManager")->GetStaticFields()[1]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_Haze_StackingDamage : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xa8]; // 0xc8
public:
	int32_t m_nTotalProcs; // 0x170	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1628
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_ModDisruptorVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DetonateParticle; // 0x1530	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DisruptModifier; // 0x1610	
	// MPropertyStartGroup "Gameplay"
	float m_flWaveSpeed; // 0x1620	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_UnstoppableVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShieldParticle; // 0x5f8	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PlayerShieldParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_PreMatchWait : public CCitadelModifier
{
public:
	Vector m_vSpawnPoint; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x208
// Has VTable
// 
// MNetworkVarNames "uint32 m_PredNetBoolVariables"
// MNetworkVarNames "byte m_PredNetByteVariables"
// MNetworkVarNames "uint16 m_PredNetUInt16Variables"
// MNetworkVarNames "int32 m_PredNetIntVariables"
// MNetworkVarNames "uint32 m_PredNetUInt32Variables"
// MNetworkVarNames "uint64 m_PredNetUInt64Variables"
// MNetworkVarNames "float m_PredNetFloatVariables"
// MNetworkVarNames "Vector m_PredNetVectorVariables"
// MNetworkVarNames "Quaternion m_PredNetQuaternionVariables"
// MNetworkVarNames "CGlobalSymbol m_PredNetGlobalSymbolVariables"
// MNetworkVarNames "uint32 m_OwnerOnlyPredNetBoolVariables"
// MNetworkVarNames "byte m_OwnerOnlyPredNetByteVariables"
// MNetworkVarNames "uint16 m_OwnerOnlyPredNetUInt16Variables"
// MNetworkVarNames "int32 m_OwnerOnlyPredNetIntVariables"
// MNetworkVarNames "uint32 m_OwnerOnlyPredNetUInt32Variables"
// MNetworkVarNames "uint64 m_OwnerOnlyPredNetUInt64Variables"
// MNetworkVarNames "float m_OwnerOnlyPredNetFloatVariables"
// MNetworkVarNames "Vector m_OwnerOnlyPredNetVectorVariables"
// MNetworkVarNames "Quaternion m_OwnerOnlyPredNetQuaternionVariables"
// MNetworkVarNames "CGlobalSymbol m_OwnerOnlyPredNetGlobalSymbolVariables"
// MNetworkVarNames "int m_nBoolVariablesCount"
// MNetworkVarNames "int m_nOwnerOnlyBoolVariablesCount"
// MNetworkVarNames "int m_nRandomSeedOffset"
// MNetworkVarNames "float m_flLastTeleportTime"
class CAnimGraphNetworkedVariables
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkChangeCallback "OnNetBoolVarChanged"
	// MNetworkAlias "m_PredBoolVariables"
	CNetworkUtlVectorBase< uint32 > m_PredNetBoolVariables; // 0x8	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkChangeCallback "OnNetByteVarChanged"
	// MNetworkAlias "m_PredByteVariables"
	CNetworkUtlVectorBase< uint8 > m_PredNetByteVariables; // 0x20	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkChangeCallback "OnNetUInt16VarChanged"
	// MNetworkAlias "m_PredUInt16Variables"
	CNetworkUtlVectorBase< uint16 > m_PredNetUInt16Variables; // 0x38	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkChangeCallback "OnNetIntVarChanged"
	// MNetworkAlias "m_PredIntVariables"
	CNetworkUtlVectorBase< int32 > m_PredNetIntVariables; // 0x50	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkChangeCallback "OnNetUInt32VarChanged"
	// MNetworkAlias "m_PredUInt32Variables"
	CNetworkUtlVectorBase< uint32 > m_PredNetUInt32Variables; // 0x68	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkChangeCallback "OnNetUInt64VarChanged"
	// MNetworkAlias "m_PredUInt64Variables"
	CNetworkUtlVectorBase< uint64 > m_PredNetUInt64Variables; // 0x80	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkChangeCallback "OnNetFloatVarChanged"
	// MNetworkAlias "m_PredFloatVariables"
	CNetworkUtlVectorBase< float32 > m_PredNetFloatVariables; // 0x98	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkChangeCallback "OnNetVectorVarChanged"
	// MNetworkAlias "m_PredVectorVariables"
	CNetworkUtlVectorBase< Vector > m_PredNetVectorVariables; // 0xb0	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkChangeCallback "OnNetQuaternionVarChanged"
	// MNetworkAlias "m_PredQuaternionVariables"
	CNetworkUtlVectorBase< Quaternion > m_PredNetQuaternionVariables; // 0xc8	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkChangeCallback "OnNetGlobalSymbolVarChanged"
	// MNetworkAlias "m_PredGlobalSymbolVariables"
	CNetworkUtlVectorBase< CGlobalSymbol > m_PredNetGlobalSymbolVariables; // 0xe0	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkChangeCallback "OnNetOOBoolVarChanged"
	// MNetworkAlias "m_OwnerOnlyPredNetBoolVariables"
	CNetworkUtlVectorBase< uint32 > m_OwnerOnlyPredNetBoolVariables; // 0xf8	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkChangeCallback "OnNetOOByteVarChanged"
	// MNetworkAlias "m_OwnerOnlyPredNetByteVariables"
	CNetworkUtlVectorBase< uint8 > m_OwnerOnlyPredNetByteVariables; // 0x110	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkChangeCallback "OnNetOOUInt16VarChanged"
	// MNetworkAlias "m_OwnerOnlyPredNetUInt16Variables"
	CNetworkUtlVectorBase< uint16 > m_OwnerOnlyPredNetUInt16Variables; // 0x128	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkChangeCallback "OnNetOOIntVarChanged"
	// MNetworkAlias "m_OwnerOnlyPredNetIntVariables"
	CNetworkUtlVectorBase< int32 > m_OwnerOnlyPredNetIntVariables; // 0x140	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkChangeCallback "OnNetOOUInt32VarChanged"
	// MNetworkAlias "m_OwnerOnlyPredNetUInt32Variables"
	CNetworkUtlVectorBase< uint32 > m_OwnerOnlyPredNetUInt32Variables; // 0x158	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkChangeCallback "OnNetOOUInt64VarChanged"
	// MNetworkAlias "m_OwnerOnlyPredNetUInt64Variables"
	CNetworkUtlVectorBase< uint64 > m_OwnerOnlyPredNetUInt64Variables; // 0x170	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkChangeCallback "OnNetOOFloatVarChanged"
	// MNetworkAlias "m_OwnerOnlyPredNetFloatVariables"
	CNetworkUtlVectorBase< float32 > m_OwnerOnlyPredNetFloatVariables; // 0x188	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkChangeCallback "OnNetOOVectorVarChanged"
	// MNetworkAlias "m_OwnerOnlyPredNetVectorVariables"
	CNetworkUtlVectorBase< Vector > m_OwnerOnlyPredNetVectorVariables; // 0x1a0	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkChangeCallback "OnNetOOQuaternionVarChanged"
	// MNetworkAlias "m_OwnerOnlyPredNetQuaternionVariables"
	CNetworkUtlVectorBase< Quaternion > m_OwnerOnlyPredNetQuaternionVariables; // 0x1b8	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkChangeCallback "OnNetOOGlobalSymbolVarChanged"
	// MNetworkAlias "m_OwnerOnlyPredNetGlobalSymbolVariables"
	CNetworkUtlVectorBase< CGlobalSymbol > m_OwnerOnlyPredNetGlobalSymbolVariables; // 0x1d0	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	int32_t m_nBoolVariablesCount; // 0x1e8	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	int32_t m_nOwnerOnlyBoolVariablesCount; // 0x1ec	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	int32_t m_nRandomSeedOffset; // 0x1f0	
	// MNetworkEnable
	// MNetworkUserGroup "animationgraph"
	// MNetworkChangeCallback "OnTeleportTimeChanged"
	float m_flLastTeleportTime; // 0x1f4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1b0
// Has VTable
// 
// MNetworkVarNames "CGameSceneNode m_sceneNode"
class CBodyComponentPoint : public CBodyComponent
{
public:
	// MNetworkEnable
	CGameSceneNode m_sceneNode; // 0x50	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBodyComponentPoint")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_contained_but_impl_is_referenced(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBodyComponentPoint")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_Ability_Shield : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_Item_Savior : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x520
// Has VTable
class CEnvFireSensor : public CBaseEntity
{
public:
	bool m_bEnabled; // 0x4b8	
	bool m_bHeatAtLevel; // 0x4b9	
private:
	[[maybe_unused]] uint8_t __pad04ba[0x2]; // 0x4ba
public:
	float m_radius; // 0x4bc	
	float m_targetLevel; // 0x4c0	
	float m_targetTime; // 0x4c4	
	float m_levelTime; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04cc[0x4]; // 0x4cc
public:
	CEntityIOOutput m_OnHeatLevelStart; // 0x4d0	
	CEntityIOOutput m_OnHeatLevelEnd; // 0x4f8	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_BossInvuln : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbc8
// Has VTable
class CCitadel_Ability_Intimidate : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbe0
// Has VTable
class CCitadel_Ability_ProximityRitual : public CCitadelBaseAbility
{
public:
	Vector m_vLaunchPosition; // 0xab0	
	QAngle m_qLaunchAngle; // 0xabc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x190
// Has VTable
// Is Abstract
class CCitadel_Modifier_BaseBulletPreRollProc : public CCitadel_Modifier_BaseEventProc
{
public:
	ShotID_t m_nSuppressProcShotID; // 0x170	
private:
	[[maybe_unused]] uint8_t __pad0174[0x4]; // 0x174
public:
	CUtlVector< BulletID_t > m_vecProcdBulletIDs; // 0x178	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6f0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_GalvanicStormTechShieldVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_BuffModifier; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x608	
	float m_flExplodeSpeed; // 0x6e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x728
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TechOverflowProcWatcherVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadel_Modifier_Base_Buildup > m_BuildUpModifier; // 0x628	
	CEmbeddedSubclass< CCitadelModifier > m_ProcModifier; // 0x638	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuildupSuccessEffect; // 0x648	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Yamato_InfinitySlash_BuffTimer : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xaf0
// Has VTable
class CCitadel_Ability_LockDown : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_CastParticle; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x150
// Has VTable
class CCitadel_Modifier_Uppercutted : public CCitadelModifier
{
public:
	Vector m_vecFromBebop; // 0xc8	
	float m_flDamage; // 0xd4	
	bool m_bExplodeOnLand; // 0xd8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbe8
// Has VTable
// 
// MNetworkVarNames "QAngle m_angFacing"
class CCitadel_Ability_Bounce_Pad : public CCitadelBaseAbility
{
public:
	Vector m_vForward; // 0xab0	
	bool m_bShouldDeploy; // 0xabc	
	bool m_bAnglesSet; // 0xabd	
	bool m_bCanCancel; // 0xabe	
private:
	[[maybe_unused]] uint8_t __pad0abf[0x119]; // 0xabf
public:
	// MNetworkEnable
	QAngle m_angFacing; // 0xbd8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1610
// Has VTable
// 
// MGetKV3ClassDefaults
class CItemPowerShardVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RefreshParticle; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Tier2Boss_RocketBarrageVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplosionParticle; // 0x14e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplosionSound; // 0x15c8	
	CSoundEventName m_RocketFireSound; // 0x15d8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AuraModifier; // 0x15e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8
// Has Trivial Constructor
// Has Trivial Destructor
struct CEnvWindShared__WindAveEvent_t
{
public:
	float m_flStartWindSpeed; // 0x0	
	float m_flAveWindSpeed; // 0x4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x208
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_vecAbilities"
// MNetworkVarNames "EntitySubclassID_t m_vecUniversalItems"
// MNetworkVarNames "int32 m_arPendingAsyncAbilityReservationSlots"
// MNetworkVarNames "int32 m_arPendingAsyncAbilityReservationAbilityIDs"
// MNetworkVarNames "EHANDLE m_hSelectedAbility"
// MNetworkVarNames "EHANDLE m_hPreviouslySelectedAbility"
// MNetworkVarNames "bool m_bPreviousAbilityQueued"
// MNetworkVarNames "float m_flTimeScale"
// MNetworkVarNames "float m_flParticleTimeScale"
// MNetworkVarNames "bool m_bInInterruptState"
// MNetworkVarNames "AbilityResource_t m_ResourceStamina"
// MNetworkVarNames "AbilityResource_t m_ResourceAbility"
class CCitadelAbilityComponent : public CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0008[0x80]; // 0x8
public:
	// MNetworkEnable
	// MNetworkUserGroup "Abilities"
	// MNetworkChangeCallback "abilitiesChanged"
	// MNetworkPriority "32"
	CNetworkUtlVectorBase< CHandle< CBaseEntity > > m_vecAbilities; // 0x88	
	// MNetworkEnable
	// MNetworkUserGroup "Abilities"
	// MNetworkPriority "32"
	CNetworkUtlVectorBase< CUtlStringToken > m_vecUniversalItems; // 0xa0	
	// MNetworkEnable
	// MNetworkUserGroup "Abilities"
	// MNetworkPriority "32"
	CNetworkUtlVectorBase< int32 > m_arPendingAsyncAbilityReservationSlots; // 0xb8	
	// MNetworkEnable
	// MNetworkUserGroup "Abilities"
	// MNetworkPriority "32"
	CNetworkUtlVectorBase< int32 > m_arPendingAsyncAbilityReservationAbilityIDs; // 0xd0	
	// MNetworkEnable
	// MNetworkChangeCallback "AbiCompSelectedAbilityChanged"
	CHandle< CBaseEntity > m_hSelectedAbility; // 0xe8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	CHandle< CBaseEntity > m_hPreviouslySelectedAbility; // 0xec	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bPreviousAbilityQueued; // 0xf0	
private:
	[[maybe_unused]] uint8_t __pad00f1[0x3]; // 0xf1
public:
	// MNetworkEnable
	// MNetworkChangeCallback "AbiCompTimeScaleChanged"
	float m_flTimeScale; // 0xf4	
	// MNetworkEnable
	// MNetworkChangeCallback "AbiCompParticleTimeScaleChanged"
	float m_flParticleTimeScale; // 0xf8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bInInterruptState; // 0xfc	
private:
	[[maybe_unused]] uint8_t __pad00fd[0x3]; // 0xfd
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	// -> m_flCurrentValue - 0x108
	// -> m_flPrevRegenRate - 0x10c
	// -> m_flMaxValue - 0x110
	// -> m_flLatchTime - 0x114
	// -> m_flLatchValue - 0x118
	AbilityResource_t m_ResourceStamina; // 0x100	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	// -> m_flCurrentValue - 0x128
	// -> m_flPrevRegenRate - 0x12c
	// -> m_flMaxValue - 0x130
	// -> m_flLatchTime - 0x134
	// -> m_flLatchValue - 0x138
	AbilityResource_t m_ResourceAbility; // 0x120	
private:
	[[maybe_unused]] uint8_t __pad0140[0x48]; // 0x140
public:
	uint32_t m_nExecuteAbilityMask; // 0x188	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelAbilityComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_referenced_but_impl_is_contained(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelAbilityComponent")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x998
// Has VTable
class CBaseProp : public CBaseAnimGraph
{
public:
	bool m_bModelOverrodeBlockLOS; // 0x958	
private:
	[[maybe_unused]] uint8_t __pad0959[0x3]; // 0x959
public:
	int32_t m_iShapeType; // 0x95c	
	bool m_bConformToCollisionBounds; // 0x960	
private:
	[[maybe_unused]] uint8_t __pad0961[0x3]; // 0x961
public:
	matrix3x4_t m_mPreferredCatchTransform; // 0x964	
	
	// Datamap fields:
	// void health; // 0x7fffffff
	// CUtlSymbolLarge propdata_override; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18
// Has VTable
// Has Trivial Destructor
class CPhysicsShake
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	Vector m_force; // 0x8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
class CPrecipitationBlocker : public CBaseModelEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CAbility_Mirage_SandPhantom : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ThrowSandDebuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9e8
// Has VTable
// 
// MNetworkVarNames "float32 m_flexWeight"
// MNetworkVarNames "Vector m_vLookTargetPosition"
// MNetworkVarNames "bool m_blinktoggle"
class CBaseFlex : public CBaseAnimGraph
{
public:
	// MNetworkEnable
	// MNetworkBitCount "12"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "1.000000"
	// MNetworkEncodeFlags "1"
	CNetworkUtlVectorBase< float32 > m_flexWeight; // 0x958	
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector m_vLookTargetPosition; // 0x970	
	// MNetworkEnable
	bool m_blinktoggle; // 0x97c	
private:
	[[maybe_unused]] uint8_t __pad097d[0x53]; // 0x97d
public:
	GameTime_t m_flAllowResponsesEndTime; // 0x9d0	
	GameTime_t m_flLastFlexAnimationTime; // 0x9d4	
	SceneEventId_t m_nNextSceneEventId; // 0x9d8	
	bool m_bUpdateLayerPriorities; // 0x9dc	
	
	// Datamap fields:
	// void CBaseFlexProcessSceneEventsThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_ArmorUpgrade_ReturnFire : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Stunned : public CCitadelModifier
{
public:
	bool m_bEnabled; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00c9[0x3]; // 0xc9
public:
	ParticleIndex_t m_nParticleIndex; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 16
// Size: 0x510
// Has VTable
class CPathKeyFrame : public CLogicalEntity
{
public:
	Vector m_Origin; // 0x4b8	
	QAngle m_Angles; // 0x4c4	
	Quaternion m_qAngle; // 0x4d0	
	CUtlSymbolLarge m_iNextKey; // 0x4e0	
	float m_flNextTime; // 0x4e8	
private:
	[[maybe_unused]] uint8_t __pad04ec[0x4]; // 0x4ec
public:
	CPathKeyFrame* m_pNextKey; // 0x4f0	
	CPathKeyFrame* m_pPrevKey; // 0x4f8	
	float m_flMoveSpeed; // 0x500	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityLashVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LashParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x15c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strVictimCastSound; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ChargedBombVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChargeParticle; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strBeepSound; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x758
// Has VTable
class CFuncNavObstruction : public CBaseModelEntity
{
private:
	[[maybe_unused]] uint8_t __pad0748[0x8]; // 0x748
public:
	bool m_bDisabled; // 0x750	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CEnvTilt : public CPointEntity
{
public:
	float m_Duration; // 0x4b8	
	float m_Radius; // 0x4bc	
	float m_TiltTime; // 0x4c0	
	GameTime_t m_stopTime; // 0x4c4	
	
	// Datamap fields:
	// void InputStartTilt; // 0x0
	// void InputStopTilt; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_Thumper_EnemyPulled : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_RapidFire : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x110
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_CatAnimatingVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_sModelName; // 0x28	
	Color m_cGlowColor; // 0x108	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_RestorativeGoo : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Idol_Return : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x500
// Has VTable
class CAI_GoalEntity : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CUtlSymbolLarge m_iszActor; // 0x4c0	
	CUtlSymbolLarge m_iszGoal; // 0x4c8	
	bool m_fStartActive; // 0x4d0	
private:
	[[maybe_unused]] uint8_t __pad04d1[0x3]; // 0x4d1
public:
	CAI_GoalEntity::SearchType_t m_SearchType; // 0x4d4	
	CUtlSymbolLarge m_iszConceptModifiers; // 0x4d8	
	CUtlVector< CHandle< CAI_BaseNPC > > m_actors; // 0x4e0	
	CHandle< CBaseEntity > m_hGoalEntity; // 0x4f8	
	uint32_t m_flags; // 0x4fc	
	
	// Datamap fields:
	// void CAI_GoalEntityDelayedRefresh; // 0x0
	// void InputActivate; // 0x0
	// void InputUpdateActors; // 0x0
	// void InputDeactivate; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xaf0
// Has VTable
// 
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iTeam"
// MNetworkExcludeByName "m_flSimulationTime"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByName "m_flEncodedController"
// MNetworkExcludeByName "m_flPoseParameter"
// MNetworkVarNames "EHANDLE m_hEnemy"
// MNetworkVarNames "CCitadelRegenComponent::Storage_t m_CCitadelRegenComponent"
class CNPC_SimpleAnimatingAI : public CBaseAnimGraph
{
private:
	[[maybe_unused]] uint8_t __pad0958[0x14]; // 0x958
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hEnemy; // 0x96c	
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelRegenComponent"
	// MNetworkAlias "CCitadelRegenComponent"
	// MNetworkTypeAlias "CCitadelRegenComponent"
	CCitadelRegenComponent m_CCitadelRegenComponent; // 0x970	
	
	// Datamap fields:
	// CHandle< CBaseEntity > m_hAbilityOwner; // 0x960
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CItemGenericTriggerHelper : public CBaseModelEntity
{
public:
	CHandle< CItemGeneric > m_hParentItem; // 0x748	
	
	// Datamap fields:
	// void CItemGenericTriggerHelperItemGenericTriggerHelperTouch; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5d0
// Has VTable
class CLogicBranchList : public CLogicalEntity
{
public:
	CUtlSymbolLarge m_nLogicBranchNames[16]; // 0x4b8	
	CUtlVector< CHandle< CBaseEntity > > m_LogicBranchList; // 0x538	
	CLogicBranchList::LogicBranchListenerLastState_t m_eLastState; // 0x550	
private:
	[[maybe_unused]] uint8_t __pad0554[0x4]; // 0x554
public:
	CEntityIOOutput m_OnAllTrue; // 0x558	
	CEntityIOOutput m_OnAllFalse; // 0x580	
	CEntityIOOutput m_OnMixed; // 0x5a8	
	
	// Datamap fields:
	// void InputTest; // 0x0
	// void Input_OnLogicBranchChanged; // 0x0
	// void Input_OnLogicBranchRemoved; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityHighAlertVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_ZiplineBoost : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x78
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "Vector localSound"
// MNetworkVarNames "int32 soundscapeIndex"
// MNetworkVarNames "uint8 localBits"
// MNetworkVarNames "int soundscapeEntityListIndex"
// MNetworkVarNames "uint32 soundEventHash"
struct audioparams_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector localSound[8]; // 0x8	
	// MNetworkEnable
	int32_t soundscapeIndex; // 0x68	
	// MNetworkEnable
	uint8_t localBits; // 0x6c	
private:
	[[maybe_unused]] uint8_t __pad006d[0x3]; // 0x6d
public:
	// MNetworkEnable
	int32_t soundscapeEntityListIndex; // 0x70	
	// MNetworkEnable
	uint32_t soundEventHash; // 0x74	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CCitadelPayload_PathMarker : public CPointEntity
{
public:
	int32_t m_iLane; // 0x4b8	
	bool m_bStart; // 0x4bc	
	bool m_bRollBackToHere; // 0x4bd	
private:
	[[maybe_unused]] uint8_t __pad04be[0x2]; // 0x4be
public:
	float m_flDistFromPrev; // 0x4c0	
	float m_flProgressAlongTotalPath; // 0x4c4	
	CCitadelPayload_PathMarker* m_pPrevious; // 0x4c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BreakablePropSpeedPickupVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Powerup Values"
	float m_flSpeedBoost; // 0x5f8	
	float m_flSprintBoost; // 0x5fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
class CModelPointEntity : public CBaseModelEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f8
// Has VTable
class CMultiLightProxy : public CLogicalEntity
{
public:
	CUtlSymbolLarge m_iszLightNameFilter; // 0x4b8	
	CUtlSymbolLarge m_iszLightClassFilter; // 0x4c0	
	float m_flLightRadiusFilter; // 0x4c8	
	float m_flBrightnessDelta; // 0x4cc	
	bool m_bPerformScreenFade; // 0x4d0	
private:
	[[maybe_unused]] uint8_t __pad04d1[0x3]; // 0x4d1
public:
	float m_flTargetBrightnessMultiplier; // 0x4d4	
	float m_flCurrentBrightnessMultiplier; // 0x4d8	
private:
	[[maybe_unused]] uint8_t __pad04dc[0x4]; // 0x4dc
public:
	CUtlVector< CHandle< CLightEntity > > m_vecLights; // 0x4e0	
	
	// Datamap fields:
	// float InputFlickerLights; // 0x0
	// float InputDisableLights; // 0x0
	// float InputSetLightsBrightnessMultiplier; // 0x0
	// float InputSetBrightnessDelta; // 0x0
	// void CMultiLightProxyRestoreFlashlightThink; // 0x0
	// void CMultiLightProxyApproachBrightnessThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x618
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BoloVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TrapModifier; // 0x5f8	
	CEmbeddedSubclass< CCitadelModifier > m_ReverseLeechModifier; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_NanoWarp_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc90
// Has VTable
// 
// MNetworkVarNames "bool m_bWantsSlow"
// MNetworkVarNames "GameTime_t m_flLatchedTimeScaleFracChangeTime"
// MNetworkVarNames "float m_flLatchedTimeScaleFrac"
// MNetworkVarNames "GameTime_t m_flSpeedBoostEndTime"
// MNetworkVarNames "GameTime_t m_flShotTimeScaleEndTime"
class CCitadel_Ability_Chrono_KineticCarbine : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bWantsSlow; // 0xab0	
private:
	[[maybe_unused]] uint8_t __pad0ab1[0x3]; // 0xab1
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flLatchedTimeScaleFracChangeTime; // 0xab4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	float m_flLatchedTimeScaleFrac; // 0xab8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flSpeedBoostEndTime; // 0xabc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flShotTimeScaleEndTime; // 0xac0	
private:
	[[maybe_unused]] uint8_t __pad0ac4[0x4]; // 0xac4
public:
	float m_flStoredPowerPct; // 0xac8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_DeathTaxTechAmp : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_BaseProjectileAOEModifierVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AOEModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_ColossusActive : public CCitadelModifier
{
public:
	float m_flOriginalModelScale; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb80
// Has VTable
// 
// MNetworkVarNames "int m_iCurrentResistValue"
class CCitadel_ArmorUpgrade_AblativeCoat : public CCitadel_Item
{
public:
	GameTime_t m_flLastDamageTime; // 0xad0	
	// MNetworkEnable
	int32_t m_iCurrentResistValue; // 0xad4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_PermanentPickupVData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1518
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Mirage_SandPhantom_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_PreCreationModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_WhirlwindEvasionModifier; // 0x14f8	
	CEmbeddedSubclass< CCitadelModifier > m_SandPhantomModifier; // 0x1508	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_Cadence_GrandFinale : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1f0
// Has VTable
class CCitadel_Modifier_LockDown_Debuff : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x118]; // 0xc8
public:
	Vector m_vEscapeTarget; // 0x1e0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc20
// Has VTable
// 
// MNetworkVarNames "bool m_bAirCast"
// MNetworkVarNames "Vector m_vBeamAimPos"
// MNetworkVarNames "QAngle m_angBeamAngles"
class CCitadel_Ability_Bebop_LaserBeam : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x150]; // 0xab0
public:
	bool m_bZoomed; // 0xc00	
	// MNetworkEnable
	bool m_bAirCast; // 0xc01	
private:
	[[maybe_unused]] uint8_t __pad0c02[0x2]; // 0xc02
public:
	// MNetworkEnable
	Vector m_vBeamAimPos; // 0xc04	
private:
	[[maybe_unused]] uint8_t __pad0c10[0x4]; // 0xc10
public:
	// MNetworkEnable
	QAngle m_angBeamAngles; // 0xc14	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_Base_Buildup : public CCitadelModifier
{
public:
	GameTime_t m_flLastBuildupAppliedTime; // 0xc8	
	float m_flDelayedDieTimeRemaining; // 0xcc	
	bool m_bInDelayTime; // 0xd0	
private:
	[[maybe_unused]] uint8_t __pad00d1[0x3]; // 0xd1
public:
	float m_flBuildUpDecayDelayFromWeaponCycleTime; // 0xd4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Shield : public CCitadelModifier
{
public:
	CHandle< CCitadel_Shield > m_hShieldEntity; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1550
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_WeaponUpgrade_BurstFireVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ActivationSound; // 0x1530	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Basic_HealthRegen : public CCitadelModifier
{
public:
	float m_flHealthRegen; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x70
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "Vector m_vOrigin"
// MNetworkVarNames "Vector m_vStart"
// MNetworkVarNames "Vector m_vNormal"
// MNetworkVarNames "QAngle m_vAngles"
// MNetworkVarNames "CEntityHandle m_hEntity"
// MNetworkVarNames "CEntityHandle m_hOtherEntity"
// MNetworkVarNames "float32 m_flScale"
// MNetworkVarNames "float32 m_flMagnitude"
// MNetworkVarNames "float32 m_flRadius"
// MNetworkVarNames "CUtlStringToken m_nSurfaceProp"
// MNetworkVarNames "HParticleSystemDefinition m_nEffectIndex"
// MNetworkVarNames "uint32 m_nDamageType"
// MNetworkVarNames "uint8 m_nPenetrate"
// MNetworkVarNames "uint16 m_nMaterial"
// MNetworkVarNames "uint16 m_nHitBox"
// MNetworkVarNames "uint8 m_nColor"
// MNetworkVarNames "uint8 m_fFlags"
// MNetworkVarNames "AttachmentHandle_t m_nAttachmentIndex"
// MNetworkVarNames "CUtlStringToken m_nAttachmentName"
// MNetworkVarNames "uint16 m_iEffectName"
// MNetworkVarNames "uint8 m_nExplosionType"
class CEffectData
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	// MNetworkEncoder "coord_integral"
	Vector m_vOrigin; // 0x8	
	// MNetworkEnable
	// MNetworkEncoder "coord_integral"
	Vector m_vStart; // 0x14	
	// MNetworkEnable
	// MNetworkEncoder "normal"
	Vector m_vNormal; // 0x20	
	// MNetworkEnable
	// MNetworkEncoder "qangle"
	QAngle m_vAngles; // 0x2c	
	// MNetworkEnable
	CEntityHandle m_hEntity; // 0x38	
	// MNetworkEnable
	CEntityHandle m_hOtherEntity; // 0x3c	
	// MNetworkEnable
	float m_flScale; // 0x40	
	// MNetworkEnable
	// MNetworkBitCount "12"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "1023.000000"
	// MNetworkEncodeFlags "1"
	float m_flMagnitude; // 0x44	
	// MNetworkEnable
	// MNetworkBitCount "10"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "1023.000000"
	// MNetworkEncodeFlags "1"
	float m_flRadius; // 0x48	
	// MNetworkEnable
	CUtlStringToken m_nSurfaceProp; // 0x4c	
	// MNetworkEnable
	CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > m_nEffectIndex; // 0x50	
	// MNetworkEnable
	uint32_t m_nDamageType; // 0x58	
	// MNetworkEnable
	uint8_t m_nPenetrate; // 0x5c	
private:
	[[maybe_unused]] uint8_t __pad005d[0x1]; // 0x5d
public:
	// MNetworkEnable
	uint16_t m_nMaterial; // 0x5e	
	// MNetworkEnable
	uint16_t m_nHitBox; // 0x60	
	// MNetworkEnable
	uint8_t m_nColor; // 0x62	
	// MNetworkEnable
	uint8_t m_fFlags; // 0x63	
	// MNetworkEnable
	AttachmentHandle_t m_nAttachmentIndex; // 0x64	
private:
	[[maybe_unused]] uint8_t __pad0065[0x3]; // 0x65
public:
	// MNetworkEnable
	CUtlStringToken m_nAttachmentName; // 0x68	
	// MNetworkEnable
	uint16_t m_iEffectName; // 0x6c	
	// MNetworkEnable
	uint8_t m_nExplosionType; // 0x6e	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierSleepBombAuraVData : public CCitadelModifierAuraVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
class CEntityBlocker : public CBaseModelEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Slork_Ambush : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Burning : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilitySummonGangsterVData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_MagicCarpet_SummonVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SummonParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_SuperNeutralShield : public CCitadelBaseAbilityServerOnly
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x800
// Has VTable
class CCitadel_Projectile_SettingSun : public CCitadelProjectile
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x928
// Has VTable
class CTriggerAddModifier : public CBaseTrigger
{
public:
	CUtlSymbolLarge m_strModifier; // 0x918	
	float m_flDuration; // 0x920	
	bool m_bMomentary; // 0x924	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CLogicCase : public CLogicalEntity
{
public:
	CUtlSymbolLarge m_nCase[32]; // 0x4b8	
	int32_t m_nShuffleCases; // 0x5b8	
	int32_t m_nLastShuffleCase; // 0x5bc	
	uint8_t m_uchShuffleCaseMap[32]; // 0x5c0	
	CEntityIOOutput m_OnCase[32]; // 0x5e0	
	CEntityOutputTemplate< CVariantBase< CVariantDefaultAllocator > > m_OnDefault; // 0xae0	
	
	// Datamap fields:
	// CUtlSymbolLarge InputValue; // 0x0
	// void InputPickRandom; // 0x0
	// void InputPickRandomShuffle; // 0x0
	// void InputResetShuffle; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1db0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_ZipLine_VData : public CitadelAbilityVData
{
public:
	float m_flMinButtonHoldTimeToActivate; // 0x14e8	
	float m_flCrouchDropSpeedFraction; // 0x14ec	
	float m_flCrouchDropAirDragSuppressDuration; // 0x14f0	
	float m_flDetachDisallowedTime; // 0x14f4	
	float m_flCameraWobbleIntensity; // 0x14f8	
	// MPropertyDescription "The DOF settings to apply while riding the zipline."
	DOFDesc_t m_DOFWhileZiplining; // 0x14fc	
private:
	[[maybe_unused]] uint8_t __pad150c[0x4]; // 0x150c
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZipLinePreviewParticle; // 0x1510	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZipLineSpeedParticle; // 0x15f0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZipLineTetherParticle; // 0x16d0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZipLineTetherAttachParticle; // 0x17b0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZipLineEnemyKnockdownProtectionParticle; // 0x1890	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZipLineSelfKnockdownProtectionParticle; // 0x1970	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZipLineKnockdownProtectionStatusParticle; // 0x1a50	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strZipLineSummonSound; // 0x1b30	
	CSoundEventName m_strZipLineLatchedSound; // 0x1b40	
	CSoundEventName m_strZipLineStartSound; // 0x1b50	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_RidingZipLineModifier; // 0x1b60	
	CEmbeddedSubclass< CCitadelModifier > m_KnockedOffSlowModifier; // 0x1b70	
	CEmbeddedSubclass< CCitadelModifier > m_ZipLineIntroModifier; // 0x1b80	
	CEmbeddedSubclass< CCitadelModifier > m_ZipLineKnockdownImmuneModifier; // 0x1b90	
	CEmbeddedSubclass< CCitadelModifier > m_ZipLineSlowModifier; // 0x1ba0	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceAwaitingTether; // 0x1bb0	
	CitadelCameraOperationsSequence_t m_cameraSequenceLatched; // 0x1c30	
	CitadelCameraOperationsSequence_t m_cameraSequenceAttached; // 0x1cb0	
	CitadelCameraOperationsSequence_t m_cameraSequenceClear; // 0x1d30	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_ArmorUpgrade_Colossus_VData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_Out_Of_Combat_Health_Regen : public CCitadelModifier
{
public:
	GameTime_t m_LastDamageTaken; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierGlitchVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x868
// Has VTable
class CItemExplosiveBarrel : public CCitadelProjectile
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcd8
// Has VTable
class CCitadel_Ability_Stomp : public CCitadelBaseAbility
{
public:
	Vector m_vStompPos; // 0xab0	
	Vector m_vStompDir; // 0xabc	
	CUtlVector< CHandle< CBaseEntity > > m_vecStompedEnemies; // 0xac8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_FissureWallVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebrisParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SpikeParticle; // 0x6d8	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_WallSpawnSound; // 0x7b8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x7c8	
	CEmbeddedSubclass< CCitadelModifier > m_EnemyVisionModifier; // 0x7d8	
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x7e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf0
// Has VTable
class CCitadel_Modifier_Knockdown : public CCitadel_Modifier_Stunned
{
public:
	QAngle m_angStunAngles; // 0xd0	
	EKnockDownTypes m_ePreferredKnockdownType; // 0xdc	
	bool m_bForceTakePreferred; // 0xe0	
private:
	[[maybe_unused]] uint8_t __pad00e1[0x3]; // 0xe1
public:
	GameTime_t m_flGetUpAnimTime; // 0xe4	
	bool m_bGetUpCamSeqStarted; // 0xe8	
	bool m_bOnGroundDuration; // 0xe9	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_EscalatingExposureProcWatcherVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_DebuffModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_Ability_Tier2Boss_LaserBeam : public CCitadelBaseAbilityServerOnly
{
public:
	CModifierHandleTyped< CCitadelModifier > m_pBeamModifier; // 0xab0	
private:
	[[maybe_unused]] uint8_t __pad0ac8[0x38]; // 0xac8
public:
	AttachmentHandle_t m_hAttackPosHigh; // 0xb00	
	AttachmentHandle_t m_hAttackPosLow; // 0xb01	
	AttachmentHandle_t m_hAttackPosLeft; // 0xb02	
	AttachmentHandle_t m_hAttackPosRight; // 0xb03	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CRuleEntity : public CBaseModelEntity
{
public:
	CUtlSymbolLarge m_iszMaster; // 0x748	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb10
// Has VTable
class CCitadel_Item_PowerShard : public CCitadel_Item
{
public:
	CHandle< CCitadelBaseAbility > m_hLastSignatureToActivate; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x570
// Has VTable
class CSoundEventEntity : public CBaseEntity
{
public:
	bool m_bStartOnSpawn; // 0x4b8	
	bool m_bToLocalPlayer; // 0x4b9	
	bool m_bStopOnNew; // 0x4ba	
	bool m_bSaveRestore; // 0x4bb	
	bool m_bSavedIsPlaying; // 0x4bc	
private:
	[[maybe_unused]] uint8_t __pad04bd[0x3]; // 0x4bd
public:
	float m_flSavedElapsedTime; // 0x4c0	
private:
	[[maybe_unused]] uint8_t __pad04c4[0x4]; // 0x4c4
public:
	CUtlSymbolLarge m_iszSourceEntityName; // 0x4c8	
	CUtlSymbolLarge m_iszAttachmentName; // 0x4d0	
	CEntityOutputTemplate< uint64 > m_onGUIDChanged; // 0x4d8	
	CEntityIOOutput m_onSoundFinished; // 0x500	
	float m_flClientCullRadius; // 0x528	
private:
	[[maybe_unused]] uint8_t __pad052c[0x2c]; // 0x52c
public:
	CUtlSymbolLarge m_iszSoundName; // 0x558	
private:
	[[maybe_unused]] uint8_t __pad0560[0x8]; // 0x560
public:
	CEntityHandle m_hSource; // 0x568	
	int32_t m_nEntityIndexSelection; // 0x56c	
	
	// Datamap fields:
	// CUtlSymbolLarge InputSetSoundName; // 0x0
	// CUtlSymbolLarge InputSetSourceEntity; // 0x0
	// CUtlSymbolLarge InputStartSound; // 0x0
	// bool InputPauseSound; // 0x0
	// bool InputUnPauseSound; // 0x0
	// void InputStopSound; // 0x0
	// void m_nGUID; // 0x560
	// void CSoundEventEntitySoundFinishedThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CModifier_Synth_Pulse_BulletShield : public CCitadelModifier
{
public:
	float m_fBulletShield; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcd0
// Has VTable
// 
// MNetworkVarNames "bool m_bAirCast"
class CCitadel_Ability_Tokamak_CrimsonCannon : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x20]; // 0xab0
public:
	CUtlVector< ParticleIndex_t > m_TargetPreviews; // 0xad0	
	// MNetworkEnable
	bool m_bAirCast; // 0xae8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe8
// Has VTable
// Is Abstract
class CBaseModifierAura : public CCitadelModifier
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_hAuraUnits; // 0xc8	
	ParticleIndex_t m_hAmbientEffect; // 0xe0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
class CInfoParticleTarget : public CPointEntity
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x558
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "float m_flScattering"
// MNetworkVarNames "float m_flAnisotropy"
// MNetworkVarNames "float m_flFadeSpeed"
// MNetworkVarNames "float m_flDrawDistance"
// MNetworkVarNames "float m_flFadeInStart"
// MNetworkVarNames "float m_flFadeInEnd"
// MNetworkVarNames "float m_flIndirectStrength"
// MNetworkVarNames "int m_nVolumeDepth"
// MNetworkVarNames "float m_fFirstVolumeSliceThickness"
// MNetworkVarNames "int m_nIndirectTextureDimX"
// MNetworkVarNames "int m_nIndirectTextureDimY"
// MNetworkVarNames "int m_nIndirectTextureDimZ"
// MNetworkVarNames "Vector m_vBoxMins"
// MNetworkVarNames "Vector m_vBoxMaxs"
// MNetworkVarNames "bool m_bActive"
// MNetworkVarNames "GameTime_t m_flStartAnisoTime"
// MNetworkVarNames "GameTime_t m_flStartScatterTime"
// MNetworkVarNames "GameTime_t m_flStartDrawDistanceTime"
// MNetworkVarNames "float m_flStartAnisotropy"
// MNetworkVarNames "float m_flStartScattering"
// MNetworkVarNames "float m_flStartDrawDistance"
// MNetworkVarNames "float m_flDefaultAnisotropy"
// MNetworkVarNames "float m_flDefaultScattering"
// MNetworkVarNames "float m_flDefaultDrawDistance"
// MNetworkVarNames "bool m_bStartDisabled"
// MNetworkVarNames "bool m_bEnableIndirect"
// MNetworkVarNames "bool m_bIndirectUseLPVs"
// MNetworkVarNames "bool m_bIsMaster"
// MNetworkVarNames "HRenderTextureStrong m_hFogIndirectTexture"
// MNetworkVarNames "int m_nForceRefreshCount"
// MNetworkVarNames "float m_fNoiseSpeed"
// MNetworkVarNames "float m_fNoiseStrength"
// MNetworkVarNames "Vector m_vNoiseScale"
class CEnvVolumetricFogController : public CBaseEntity
{
public:
	// MNetworkEnable
	float m_flScattering; // 0x4b8	
	// MNetworkEnable
	float m_flAnisotropy; // 0x4bc	
	// MNetworkEnable
	float m_flFadeSpeed; // 0x4c0	
	// MNetworkEnable
	float m_flDrawDistance; // 0x4c4	
	// MNetworkEnable
	float m_flFadeInStart; // 0x4c8	
	// MNetworkEnable
	float m_flFadeInEnd; // 0x4cc	
	// MNetworkEnable
	float m_flIndirectStrength; // 0x4d0	
	// MNetworkEnable
	int32_t m_nVolumeDepth; // 0x4d4	
	// MNetworkEnable
	float m_fFirstVolumeSliceThickness; // 0x4d8	
	// MNetworkEnable
	int32_t m_nIndirectTextureDimX; // 0x4dc	
	// MNetworkEnable
	int32_t m_nIndirectTextureDimY; // 0x4e0	
	// MNetworkEnable
	int32_t m_nIndirectTextureDimZ; // 0x4e4	
	// MNetworkEnable
	Vector m_vBoxMins; // 0x4e8	
	// MNetworkEnable
	Vector m_vBoxMaxs; // 0x4f4	
	// MNetworkEnable
	bool m_bActive; // 0x500	
private:
	[[maybe_unused]] uint8_t __pad0501[0x3]; // 0x501
public:
	// MNetworkEnable
	GameTime_t m_flStartAnisoTime; // 0x504	
	// MNetworkEnable
	GameTime_t m_flStartScatterTime; // 0x508	
	// MNetworkEnable
	GameTime_t m_flStartDrawDistanceTime; // 0x50c	
	// MNetworkEnable
	float m_flStartAnisotropy; // 0x510	
	// MNetworkEnable
	float m_flStartScattering; // 0x514	
	// MNetworkEnable
	float m_flStartDrawDistance; // 0x518	
	// MNetworkEnable
	float m_flDefaultAnisotropy; // 0x51c	
	// MNetworkEnable
	float m_flDefaultScattering; // 0x520	
	// MNetworkEnable
	float m_flDefaultDrawDistance; // 0x524	
	// MNetworkEnable
	bool m_bStartDisabled; // 0x528	
	// MNetworkEnable
	bool m_bEnableIndirect; // 0x529	
	// MNetworkEnable
	bool m_bIndirectUseLPVs; // 0x52a	
	// MNetworkEnable
	bool m_bIsMaster; // 0x52b	
private:
	[[maybe_unused]] uint8_t __pad052c[0x4]; // 0x52c
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hFogIndirectTexture; // 0x530	
	// MNetworkEnable
	int32_t m_nForceRefreshCount; // 0x538	
	// MNetworkEnable
	float m_fNoiseSpeed; // 0x53c	
	// MNetworkEnable
	float m_fNoiseStrength; // 0x540	
	// MNetworkEnable
	Vector m_vNoiseScale; // 0x544	
	bool m_bFirstTime; // 0x550	
	
	// Datamap fields:
	// void InputSetToDefaults; // 0x0
	// float InputSetScattering; // 0x0
	// float InputSetAnisotropy; // 0x0
	// float InputSetFadeSpeed; // 0x0
	// float InputSetDrawDistance; // 0x0
	// bool EnableIndirect; // 0x0
	// bool InputEnable; // 0x0
	// bool InputDisable; // 0x0
	// void ForceRefresh; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbe0
// Has VTable
class CCitadel_Ability_Mirage_FireBeetles : public CCitadelBaseAbility
{
public:
	Vector m_vLaunchPosition; // 0xab0	
	QAngle m_qLaunchAngle; // 0xabc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_LightningBall : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xa8]; // 0xc8
public:
	CHandle< CBaseEntity > m_hProjectile; // 0x170	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1d8
// Has VTable
// 
// MNetworkVarNames "ButtonBitMask_t m_nToggleButtonDownMask"
// MNetworkVarNames "float32 m_flMaxspeed"
// MNetworkVarNames "float32 m_arrForceSubtickMoveWhen"
class CPlayer_MovementServices : public CPlayerPawnComponent
{
public:
	int32_t m_nImpulse; // 0x40	
private:
	[[maybe_unused]] uint8_t __pad0044[0x4]; // 0x44
public:
	CInButtonState m_nButtons; // 0x48	
	uint64_t m_nQueuedButtonDownMask; // 0x68	
	uint64_t m_nQueuedButtonChangeMask; // 0x70	
	uint64_t m_nButtonDoublePressed; // 0x78	
	uint32_t m_pButtonPressedCmdNumber[64]; // 0x80	
	uint32_t m_nLastCommandNumberProcessed; // 0x180	
private:
	[[maybe_unused]] uint8_t __pad0184[0x4]; // 0x184
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	uint64_t m_nToggleButtonDownMask; // 0x188	
private:
	[[maybe_unused]] uint8_t __pad0190[0x8]; // 0x190
public:
	// MNetworkEnable
	// MNetworkBitCount "12"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "2048.000000"
	// MNetworkEncodeFlags "1"
	float m_flMaxspeed; // 0x198	
	// MNetworkEnable
	float m_arrForceSubtickMoveWhen[4]; // 0x19c	
	float m_flForwardMove; // 0x1ac	
	float m_flLeftMove; // 0x1b0	
	float m_flUpMove; // 0x1b4	
	Vector m_vecLastMovementImpulses; // 0x1b8	
	QAngle m_vecOldViewAngles; // 0x1c4	
	
	// Datamap fields:
	// void m_pButtonPressedCmdNumber; // 0x80
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
// 
// MNetworkVarNames "CPropDataComponent::Storage_t m_CPropDataComponent"
// MNetworkVarNames "bool m_noGhostCollision"
class CBreakableProp : public CBaseProp
{
private:
	[[maybe_unused]] uint8_t __pad0998[0x8]; // 0x998
public:
	// MNetworkEnable
	// MNetworkUserGroup "CPropDataComponent"
	// MNetworkAlias "CPropDataComponent"
	// MNetworkTypeAlias "CPropDataComponent"
	// -> m_flDmgModBullet - 0x9b0
	// -> m_flDmgModClub - 0x9b4
	// -> m_flDmgModExplosive - 0x9b8
	// -> m_flDmgModFire - 0x9bc
	// -> m_iszPhysicsDamageTableName - 0x9c0
	// -> m_iszBasePropData - 0x9c8
	// -> m_nInteractions - 0x9d0
	// -> m_bSpawnMotionDisabled - 0x9d4
	// -> m_nDisableTakePhysicsDamageSpawnFlag - 0x9d8
	// -> m_nMotionDisabledSpawnFlag - 0x9dc
	CPropDataComponent m_CPropDataComponent; // 0x9a0	
	CEntityIOOutput m_OnBreak; // 0x9e0	
	CEntityOutputTemplate< float32 > m_OnHealthChanged; // 0xa08	
	CEntityIOOutput m_OnTakeDamage; // 0xa30	
	float m_impactEnergyScale; // 0xa58	
	int32_t m_iMinHealthDmg; // 0xa5c	
	QAngle m_preferredCarryAngles; // 0xa60	
	float m_flPressureDelay; // 0xa6c	
	float m_flDefBurstScale; // 0xa70	
	Vector m_vDefBurstOffset; // 0xa74	
	CHandle< CBaseEntity > m_hBreaker; // 0xa80	
	PerformanceMode_t m_PerformanceMode; // 0xa84	
	GameTime_t m_flPreventDamageBeforeTime; // 0xa88	
	BreakableContentsType_t m_BreakableContentsType; // 0xa8c	
	CUtlString m_strBreakableContentsPropGroupOverride; // 0xa90	
	CUtlString m_strBreakableContentsParticleOverride; // 0xa98	
	bool m_bHasBreakPiecesOrCommands; // 0xaa0	
private:
	[[maybe_unused]] uint8_t __pad0aa1[0x3]; // 0xaa1
public:
	float m_explodeDamage; // 0xaa4	
	float m_explodeRadius; // 0xaa8	
private:
	[[maybe_unused]] uint8_t __pad0aac[0x4]; // 0xaac
public:
	float m_explosionDelay; // 0xab0	
private:
	[[maybe_unused]] uint8_t __pad0ab4[0x4]; // 0xab4
public:
	CUtlSymbolLarge m_explosionBuildupSound; // 0xab8	
	CUtlSymbolLarge m_explosionCustomEffect; // 0xac0	
	CUtlSymbolLarge m_explosionCustomSound; // 0xac8	
	CUtlSymbolLarge m_explosionModifier; // 0xad0	
	CHandle< CBasePlayerPawn > m_hPhysicsAttacker; // 0xad8	
	GameTime_t m_flLastPhysicsInfluenceTime; // 0xadc	
	bool m_bOriginalBlockLOS; // 0xae0	
private:
	[[maybe_unused]] uint8_t __pad0ae1[0x3]; // 0xae1
public:
	float m_flDefaultFadeScale; // 0xae4	
	CHandle< CBaseEntity > m_hLastAttacker; // 0xae8	
	CHandle< CBaseEntity > m_hFlareEnt; // 0xaec	
	bool m_bUsePuntSound; // 0xaf0	
private:
	[[maybe_unused]] uint8_t __pad0af1[0x7]; // 0xaf1
public:
	CUtlSymbolLarge m_iszPuntSound; // 0xaf8	
	// MNetworkEnable
	bool m_noGhostCollision; // 0xb00	
	
	// Datamap fields:
	// void InputBreak; // 0x0
	// int32_t InputSetHealth; // 0x0
	// int32_t InputAddHealth; // 0x0
	// int32_t InputRemoveHealth; // 0x0
	// bool InputSetNavIgnore; // 0x0
	// void InputEnablePuntSound; // 0x0
	// void InputDisablePuntSound; // 0x0
	// void CBreakablePropBreakThink; // 0x0
	// void CBreakablePropRampToDefaultFadeScale; // 0x0
	// uint32_t m_nExplosionType; // 0xaac
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
class CCitadel_Item_ColdFront : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xaf8
// Has VTable
class CCitadel_Ability_BaseHeldItem : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x38]; // 0xab0
public:
	CHandle< CBaseEntity > m_hProjectile; // 0xae8	
	Vector m_vHomePosition; // 0xaec	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
class CNodeEnt : public CServerOnlyPointEntity
{
public:
	bool m_bDontDropNode; // 0x4b8	
	HullFlags_t m_HullForceFlags; // 0x4b9	
private:
	[[maybe_unused]] uint8_t __pad04c3[0x5]; // 0x4c3
public:
	// -> strEntityName - 0x4c8
	// -> nHintType - 0x4d0
	// -> nNodeID - 0x4d4
	// -> strGroup - 0x4d8
	// -> iDisabled - 0x4e0
	// -> iszGenericType - 0x4e8
	// -> fIgnoreFacing - 0x4f0
	// -> minState - 0x4f4
	// -> maxState - 0x4f8
	// -> nRadius - 0x4fc
	// -> ePriority - 0x500
	HintNodeData m_NodeData; // 0x4c8	
	
	// Static fields:
	static int32_t &Get_m_nNodeCount(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNodeEnt")->GetStaticFields()[0]->m_pInstance);};
	
	// Datamap fields:
	// void m_pKeyValuesCopy; // 0x508
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x558
// Has VTable
class CEnvSoundscapeProxy : public CEnvSoundscape
{
public:
	CUtlSymbolLarge m_MainSoundscapeName; // 0x550	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x530
// Has VTable
// Is Abstract
class CPhysConstraint : public CLogicalEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CUtlSymbolLarge m_nameAttach1; // 0x4c0	
	CUtlSymbolLarge m_nameAttach2; // 0x4c8	
	CHandle< CBaseEntity > m_hAttach1; // 0x4d0	
	CHandle< CBaseEntity > m_hAttach2; // 0x4d4	
	CUtlSymbolLarge m_nameAttachment1; // 0x4d8	
	CUtlSymbolLarge m_nameAttachment2; // 0x4e0	
	CUtlSymbolLarge m_breakSound; // 0x4e8	
	float m_forceLimit; // 0x4f0	
	float m_torqueLimit; // 0x4f4	
	uint32_t m_teleportTick; // 0x4f8	
	float m_minTeleportDistance; // 0x4fc	
	bool m_bSnapObjectPositions; // 0x500	
private:
	[[maybe_unused]] uint8_t __pad0501[0x7]; // 0x501
public:
	CEntityIOOutput m_OnBreak; // 0x508	
	
	// Datamap fields:
	// void m_hJoint; // 0x4b8
	// void InputBreak; // 0x0
	// void InputOnBreak; // 0x0
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// void InputEnableLinearConstraint; // 0x0
	// void InputDisableLinearConstraint; // 0x0
	// void InputEnableAngularConstraint; // 0x0
	// void InputDisableAngularConstraint; // 0x0
	// void InputTurnMotorOn; // 0x0
	// void InputTurnMotorOff; // 0x0
	// float InputSetMotorTorqueFactor; // 0x0
	// float InputSetMotorTargetVelocity; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1768
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Synth_PlasmaFlux_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_WeaponDamageBonusModifier; // 0x14e8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportTrailParticle; // 0x14f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x15d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strCasterLoopingSound; // 0x16b8	
	CSoundEventName m_strProjectileExpireSound; // 0x16c8	
	CSoundEventName m_strImpactSound; // 0x16d8	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceTeleport; // 0x16e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf98
// Has VTable
// 
// MNetworkVarNames "CHandle< CCitadelViscousBall > m_hBall"
// MNetworkVarNames "EViscousBowlingBallState_t m_eRollingState"
// MNetworkVarNames "GameTime_t m_flNextStateTime"
// MNetworkVarNames "GameTime_t m_flNextWallCheck"
// MNetworkVarNames "GameTime_t m_flRollStartTime"
// MNetworkVarNames "GameTime_t m_flWallExitTime"
// MNetworkVarNames "Vector m_vecWallExitVelocity"
class CCitadel_Ability_GooBowlingBall : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x348]; // 0xab0
public:
	bool m_bHasAirJumped; // 0xdf8	
	bool m_bIsFollowingBall; // 0xdf9	
	bool m_bIsShowingBall; // 0xdfa	
private:
	[[maybe_unused]] uint8_t __pad0dfb[0x1]; // 0xdfb
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	CHandle< CCitadelViscousBall > m_hBall; // 0xdfc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	EViscousBowlingBallState_t m_eRollingState; // 0xe00	
private:
	[[maybe_unused]] uint8_t __pad0e01[0x3]; // 0xe01
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flNextStateTime; // 0xe04	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flNextWallCheck; // 0xe08	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	GameTime_t m_flRollStartTime; // 0xe0c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	GameTime_t m_flWallExitTime; // 0xe10	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	Vector m_vecWallExitVelocity; // 0xe14	
private:
	[[maybe_unused]] uint8_t __pad0e20[0x8]; // 0xe20
public:
	ParticleIndex_t m_nTrailParticleIndex; // 0xe28	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierAerialAssaultVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_FireRateModifier; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x608	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x6e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplodeSound; // 0x7c8	
	// MPropertyStartGroup "Gameplay"
	float m_flAirDrag; // 0x7d8	
	float m_flAirSpeed; // 0x7dc	
	float m_flFallSpeed; // 0x7e0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SlowingBullets_ProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ActiveDisarm_SpiritSteal_VData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SpiritStealParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierProjectilePitchingLoopSoundThinkerVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Audio"
	// MPropertyDescription "Remap values from Speed to Pitch (MinSpeed, MaxSpeed, MinSpeedPitch, MaxSpeedPitch)"
	CRemapFloat m_speedToPitchRemap; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_Item_ComboBreaker : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CInfoPlayerStart : public CPointEntity
{
public:
	bool m_bDisabled; // 0x4b8	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void InputToggle; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Astro_Shotgun_Toggle : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_WeaponEaterStack : public CCitadel_Modifier_Intrinsic_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x550
// Has VTable
// 
// MNetworkVarNames "string_t m_iszStackName"
// MNetworkVarNames "string_t m_iszOperatorName"
// MNetworkVarNames "string_t m_iszOpvarName"
// MNetworkVarNames "int m_iOpvarIndex"
// MNetworkVarNames "bool m_bUseAutoCompare"
class CSoundOpvarSetPointBase : public CBaseEntity
{
public:
	bool m_bDisabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	CEntityHandle m_hSource; // 0x4bc	
private:
	[[maybe_unused]] uint8_t __pad04c0[0x8]; // 0x4c0
public:
	CUtlSymbolLarge m_iszSourceEntityName; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04d0[0x50]; // 0x4d0
public:
	Vector m_vLastPosition; // 0x520	
private:
	[[maybe_unused]] uint8_t __pad052c[0x4]; // 0x52c
public:
	// MNetworkEnable
	CUtlSymbolLarge m_iszStackName; // 0x530	
	// MNetworkEnable
	CUtlSymbolLarge m_iszOperatorName; // 0x538	
	// MNetworkEnable
	CUtlSymbolLarge m_iszOpvarName; // 0x540	
	// MNetworkEnable
	int32_t m_iOpvarIndex; // 0x548	
	// MNetworkEnable
	bool m_bUseAutoCompare; // 0x54c	
	
	// Datamap fields:
	// uint64_t InputSetEventGuid; // 0x0
	// CUtlSymbolLarge InputSetStackName; // 0x0
	// CUtlSymbolLarge InputSetOperatorName; // 0x0
	// CUtlSymbolLarge InputSetOpvarName; // 0x0
	// CUtlSymbolLarge InputSetOpvarIndex; // 0x0
	// CUtlSymbolLarge InputSetSourceEntity; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void CSoundOpvarSetPointBaseSetOpvarThink; // 0x0
	// void m_nGUID; // 0x4c0
	// void m_hOpvarData; // 0x4d0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x950
// Has VTable
// 
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
class CCitadelIdolReturnTrigger : public CTriggerModifier
{
private:
	[[maybe_unused]] uint8_t __pad0928[0x8]; // 0x928
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0x930	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcf0
// Has VTable
// 
// MNetworkVarNames "bool m_bPreparing"
// MNetworkVarNames "bool m_bTackling"
// MNetworkVarNames "GameTime_t m_flTackleStartTime"
// MNetworkVarNames "GameTime_t m_flPrepareStartTime"
// MNetworkVarNames "Vector m_vecTackleDir"
class CCitadel_Ability_ChargedTackle : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x1f8]; // 0xab0
public:
	// MNetworkEnable
	bool m_bPreparing; // 0xca8	
	// MNetworkEnable
	bool m_bTackling; // 0xca9	
private:
	[[maybe_unused]] uint8_t __pad0caa[0x2]; // 0xcaa
public:
	// MNetworkEnable
	GameTime_t m_flTackleStartTime; // 0xcac	
	// MNetworkEnable
	GameTime_t m_flPrepareStartTime; // 0xcb0	
	// MNetworkEnable
	Vector m_vecTackleDir; // 0xcb4	
	Vector m_vecLastPosition; // 0xcc0	
	int32_t m_nStuckFramesCount; // 0xccc	
	CUtlVector< CHandle< CBaseEntity > > m_vecHitEnemies; // 0xcd0	
	ParticleIndex_t m_nDistancePreview; // 0xce8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15f0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelAbilityChargedBombVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ChargeBombModifier; // 0x14e8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x14f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x15d8	
	// MPropertyStartGroup "GamePlay"
	float m_flChargeForMaxDamage; // 0x15e8	
	float m_flMinDamagePercent; // 0x15ec	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Aerial_Assault_Watcher : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_GlowToTeammates : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xaf8
// Has VTable
// 
// MNetworkVarNames "Vector m_ragPos"
// MNetworkVarNames "QAngle m_ragAngles"
// MNetworkVarNames "EHANDLE m_hRagdollSource"
// MNetworkVarNames "float32 m_flBlendWeight"
class CRagdollProp : public CBaseAnimGraph
{
private:
	[[maybe_unused]] uint8_t __pad0958[0x8]; // 0x958
public:
	ragdoll_t m_ragdoll; // 0x960	
	bool m_bStartDisabled; // 0x998	
private:
	[[maybe_unused]] uint8_t __pad0999[0x7]; // 0x999
public:
	// MNetworkEnable
	// MNetworkEncoder "coord"
	CNetworkUtlVectorBase< Vector > m_ragPos; // 0x9a0	
	// MNetworkEnable
	// MNetworkEncoder "qangle"
	// MNetworkBitCount "13"
	CNetworkUtlVectorBase< QAngle > m_ragAngles; // 0x9b8	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hRagdollSource; // 0x9d0	
	uint32_t m_lastUpdateTickCount; // 0x9d4	
	bool m_allAsleep; // 0x9d8	
	bool m_bFirstCollisionAfterLaunch; // 0x9d9	
private:
	[[maybe_unused]] uint8_t __pad09da[0x2]; // 0x9da
public:
	CHandle< CBaseEntity > m_hDamageEntity; // 0x9dc	
	CHandle< CBaseEntity > m_hKiller; // 0x9e0	
	CHandle< CBasePlayerPawn > m_hPhysicsAttacker; // 0x9e4	
	GameTime_t m_flLastPhysicsInfluenceTime; // 0x9e8	
	GameTime_t m_flFadeOutStartTime; // 0x9ec	
	float m_flFadeTime; // 0x9f0	
	// MNetworkDisable
	Vector m_vecLastOrigin; // 0x9f4	
	GameTime_t m_flAwakeTime; // 0xa00	
	GameTime_t m_flLastOriginChangeTime; // 0xa04	
	CUtlSymbolLarge m_strOriginClassName; // 0xa08	
	CUtlSymbolLarge m_strSourceClassName; // 0xa10	
	bool m_bHasBeenPhysgunned; // 0xa18	
	bool m_bShouldTeleportPhysics; // 0xa19	
private:
	[[maybe_unused]] uint8_t __pad0a1a[0x2]; // 0xa1a
public:
	// MNetworkEnable
	// MNetworkBitCount "8"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "1.000000"
	// MNetworkEncodeFlags "1"
	float m_flBlendWeight; // 0xa1c	
	float m_flDefaultFadeScale; // 0xa20	
private:
	[[maybe_unused]] uint8_t __pad0a24[0x4]; // 0xa24
public:
	CUtlVector< Vector > m_ragdollMins; // 0xa28	
	CUtlVector< Vector > m_ragdollMaxs; // 0xa40	
	bool m_bShouldDeleteActivationRecord; // 0xa58	
private:
	[[maybe_unused]] uint8_t __pad0a59[0x5f]; // 0xa59
public:
	bool m_bValidatePoweredRagdollPose; // 0xab8	
	
	// Datamap fields:
	// void m_ragdoll.boneIndex; // 0x978
	// void InputEnableMotion; // 0x0
	// void InputDisableMotion; // 0x0
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// float InputFadeAndRemove; // 0x0
	// void CRagdollPropSetDebrisThink; // 0x0
	// void CRagdollPropClearFlagsThink; // 0x0
	// void CRagdollPropFadeOutThink; // 0x0
	// void CRagdollPropSettleThink; // 0x0
	// void CRagdollPropAttachedItemsThink; // 0x0
	// void CRagdollPropRagdollTouch; // 0x0
	// void m_ragdoll.list; // 0x960
	// bool m_ragdoll.allowStretch; // 0x990
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe8
// Has VTable
// Is Abstract
class CCitadelModifierAura : public CBaseModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe18
// Has VTable
// 
// MGetKV3ClassDefaults
// MPropertySuppressBaseClassField
// MPropertySuppressBaseClassField
// MPropertySuppressBaseClassField
// MPropertySuppressBaseClassField
// MPropertySuppressBaseClassField
// MPropertySuppressBaseClassField
class CAI_CitadelNPCVData : public CAI_BaseNPCVData
{
public:
	CUtlOrderedMap< EAbilitySlots_t, CSubclassName< 4 > > m_mapBoundAbilities; // 0x200	
	float m_flSightRangePlayers; // 0x228	
	float m_flSightRangeNPCs; // 0x22c	
	CGlobalSymbol m_MeleeAnimName; // 0x230	
	float m_flMeleeAttemptRange; // 0x238	
	float m_flMeleeHitRange; // 0x23c	
	float m_flMaxHealthBarDrawDistance; // 0x240	
	// MPropertyStartGroup "Movement"
	float m_flWalkSpeed; // 0x244	
	float m_flRunSpeed; // 0x248	
	float m_flTurnRate; // 0x24c	
	float m_flAcceleration; // 0x250	
	float m_flStepHeight; // 0x254	
	int8_t m_navHull; // 0x258	
	bool m_bFaceTargetEvenWhenMoving; // 0x259	
private:
	[[maybe_unused]] uint8_t __pad025a[0x6]; // 0x25a
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_BeamStartSound; // 0x260	
	CSoundEventName m_BeamStopSound; // 0x270	
	CSoundEventName m_BeamPointStartLoopSound; // 0x280	
	CSoundEventName m_BeamPointEndLoopSound; // 0x290	
	CSoundEventName m_BeamPointClosestLoopSound; // 0x2a0	
	CSoundEventName m_strAmbientLoopSound; // 0x2b0	
	CSoundEventName m_DeathSound; // 0x2c0	
	CSoundEventName m_strLastHitSound; // 0x2d0	
	bool m_bPlayLastHitSound; // 0x2e0	
private:
	[[maybe_unused]] uint8_t __pad02e1[0x7]; // 0x2e1
public:
	CSoundEventName m_MeleeHitSound; // 0x2e8	
	CSoundEventName m_MeleeHitPlayerSound; // 0x2f8	
	// MPropertyStartGroup "Visuals"
	// MPropertyAttributeEditor "VDataModelMaterialGroup( m_sModelName )"
	CUtlString m_sDefaultMaterialGroupName; // 0x308	
	// MPropertyAttributeEditor "VDataModelMaterialGroup( m_sModelName )"
	CUtlString m_sEnemyMaterialGroupName; // 0x310	
	// MPropertyAttributeEditor "VDataModelMaterialGroup( m_sModelName )"
	CUtlString m_sTeam1MaterialGroupName; // 0x318	
	// MPropertyAttributeEditor "VDataModelMaterialGroup( m_sModelName )"
	CUtlString m_sTeam2MaterialGroupName; // 0x320	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_MeleeSwingParticle; // 0x328	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_MeleeActivateParticle; // 0x408	
	float m_flModelScale; // 0x4e8	
private:
	[[maybe_unused]] uint8_t __pad04ec[0x4]; // 0x4ec
public:
	// MPropertyDescription "Particle to play instead of doing a ragdoll"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DeathParticle; // 0x4f0	
	// MPropertyStartGroup "Health Bar"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HealthBarParticle; // 0x5d0	
	CUtlString m_sHealthBarAttachment; // 0x6b0	
	Color m_HealthBarColorFriend; // 0x6b8	
	Color m_HealthBarColorEnemy; // 0x6bc	
	Color m_HealthBarColorTeam1; // 0x6c0	
	Color m_HealthBarColorTeam2; // 0x6c4	
	Color m_HealthBarColorTeamNeutral; // 0x6c8	
	// MPropertyStartGroup "Misc"
	float m_flHealthBarOffset; // 0x6cc	
	// MPropertyStartGroup "Beam Weapon"
	float m_flBeamWeaponWidth; // 0x6d0	
	float m_flBeamTurnRate; // 0x6d4	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamWeaponParticle; // 0x6d8	
	// MPropertyDescription "Modifier for physics impulses applied to this NPC (0 == unmoveable)"
	float m_flPhysicsImpulseMultiplier; // 0x7b8	
private:
	[[maybe_unused]] uint8_t __pad07bc[0x4]; // 0x7bc
public:
	CCitadelWeaponInfo m_WeaponInfo; // 0x7c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb60
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flNextPrimaryAttack"
// MNetworkVarNames "int32 m_iClip"
// MNetworkVarNames "int32 m_iBonusClip"
// MNetworkVarNames "float m_flSpreadPenalty"
// MNetworkVarNames "GameTime_t m_flZoomTime"
// MNetworkVarNames "GameTime_t m_flZoomOutTime"
// MNetworkVarNames "int8 m_iSpreadIndex"
// MNetworkVarNames "int16 m_nShotRecoilIndex"
// MNetworkVarNames "GameTime_t m_flNextShotRecoilRecoveryTime"
// MNetworkVarNames "bool m_bIsZoomed"
// MNetworkVarNames "uint8 m_nBurstShotsRemaining"
// MNetworkVarNames "uint32 m_nShotNumber"
// MNetworkVarNames "bool m_bInReload"
// MNetworkVarNames "bool m_bSingleShotReloadFirstBullet"
// MNetworkVarNames "GameTime_t m_reloadQueuedStartTime"
// MNetworkVarNames "GameTime_t m_flReloadAvailableTime"
// MNetworkVarNames "bool m_bCanActiveReload"
// MNetworkVarNames "GameTime_t m_flLastAttackTime"
// MNetworkVarNames "GameTime_t m_flNextAttackDelayStartTime"
// MNetworkVarNames "GameTime_t m_flNextAttackDelayEndTime"
// MNetworkVarNames "float m_flAttackDelayPauseTotalTime"
// MNetworkVarNames "GameTime_t m_flAttackDelayPauseEndTime"
// MNetworkVarNames "ENextAttackDelayReason_t m_eNextAttackDelayReason"
// MNetworkVarNames "bool m_bInputPressedWhileSelected"
// MNetworkVarNames "EFireMode_t m_eActiveFireMode"
class CCitadel_Ability_PrimaryWeapon : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	GameTime_t m_flNextPrimaryAttack; // 0xab0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	// MNetworkSerializer "minusone"
	// MNetworkPriority "32"
	int32_t m_iClip; // 0xab4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	// MNetworkSerializer "minusone"
	// MNetworkPriority "32"
	int32_t m_iBonusClip; // 0xab8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	float m_flSpreadPenalty; // 0xabc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	GameTime_t m_flZoomTime; // 0xac0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	GameTime_t m_flZoomOutTime; // 0xac4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalWeaponExclusive"
	int8_t m_iSpreadIndex; // 0xac8	
private:
	[[maybe_unused]] uint8_t __pad0ac9[0x1]; // 0xac9
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalWeaponExclusive"
	int16_t m_nShotRecoilIndex; // 0xaca	
	// MNetworkEnable
	// MNetworkUserGroup "LocalWeaponExclusive"
	GameTime_t m_flNextShotRecoilRecoveryTime; // 0xacc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	bool m_bIsZoomed; // 0xad0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	uint8_t m_nBurstShotsRemaining; // 0xad1	
private:
	[[maybe_unused]] uint8_t __pad0ad2[0x2]; // 0xad2
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	uint32_t m_nShotNumber; // 0xad4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bInReload; // 0xad8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bSingleShotReloadFirstBullet; // 0xad9	
private:
	[[maybe_unused]] uint8_t __pad0ada[0x2]; // 0xada
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalWeaponExclusive"
	GameTime_t m_reloadQueuedStartTime; // 0xadc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flReloadAvailableTime; // 0xae0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bCanActiveReload; // 0xae4	
private:
	[[maybe_unused]] uint8_t __pad0ae5[0x3]; // 0xae5
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	GameTime_t m_flLastAttackTime; // 0xae8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	GameTime_t m_flNextAttackDelayStartTime; // 0xaec	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	GameTime_t m_flNextAttackDelayEndTime; // 0xaf0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	float m_flAttackDelayPauseTotalTime; // 0xaf4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	GameTime_t m_flAttackDelayPauseEndTime; // 0xaf8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	ENextAttackDelayReason_t m_eNextAttackDelayReason; // 0xafc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	bool m_bInputPressedWhileSelected; // 0xb00	
private:
	[[maybe_unused]] uint8_t __pad0b01[0x3]; // 0xb01
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	EFireMode_t m_eActiveFireMode; // 0xb04	
	QAngle m_angRecoilAngles; // 0xb08	
	QAngle m_angRecoilToAdd; // 0xb14	
	QAngle m_angRecoilRecovery; // 0xb20	
	GameTime_t m_flRecoilStartTime; // 0xb2c	
	float m_flRecoilRecoverySpeed; // 0xb30	
	float m_flAddApproachSpeed; // 0xb34	
	bool m_bFireBackwards; // 0xb38	
private:
	[[maybe_unused]] uint8_t __pad0b39[0x3]; // 0xb39
public:
	float m_currentSpread; // 0xb3c	
	float m_currentMaxSpread; // 0xb40	
	float m_currentFireSpread; // 0xb44	
	float m_flCurrentSpinRate; // 0xb48	
private:
	[[maybe_unused]] uint8_t __pad0b4c[0x4]; // 0xb4c
public:
	float m_fFireDuration; // 0xb50	
private:
	[[maybe_unused]] uint8_t __pad0b54[0x1]; // 0xb54
public:
	bool m_bFireOnEmpty; // 0xb55	
private:
	[[maybe_unused]] uint8_t __pad0b56[0x2]; // 0xb56
public:
	GameTime_t m_flNextDisarmSound; // 0xb58	
	int32_t m_nClipSizeBeforeSwap; // 0xb5c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CModifier_SiphonBullets_HealthLoss : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_LongRangeSlowingTech_ProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierDelayedStunVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CItemCrateSpawn : public CServerOnlyPointEntity
{
public:
	// Datamap fields:
	// int32_t m_eLootType; // 0x4c0
	// int32_t m_eObjectivePosition; // 0x4c4
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x928
// Has VTable
class CCitadelSpeedBoostTrigger : public CTriggerModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_IdolReturnTimer : public CCitadelModifier
{
public:
	Vector m_vGroundOrigin; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Targetdummy_2 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierRiotProtocolBuffVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaserParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PulseHitEnemyParticle; // 0x6d8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_EnemyDebuffModifier; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierCrowdControlDebuffVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x250
// Has VTable
class CCitadel_Modifier_AirRaid : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_ZipLine_Mastery : public CCitadelModifier
{
public:
	ParticleIndex_t m_nFXIndex; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x10
// Has Trivial Destructor
struct CItemXP__AssignedEarner_t
{
public:
	ECurrencySource m_eSource; // 0x0	
	int32_t m_iBounty; // 0x4	
	EDenyDistributionType m_eDenyType; // 0x8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb50
// Has VTable
// 
// MNetworkIncludeByName "m_bTakesDamage"
// MNetworkIncludeByName "m_nTakeDamageFlags"
// MNetworkVarNames "Vector m_vecUnitStatusOffset"
class CNPC_BaseDefenseSentry : public CNPC_SimpleAnimatingAI
{
private:
	[[maybe_unused]] uint8_t __pad0af0[0x8]; // 0xaf0
public:
	// MNetworkEnable
	Vector m_vecUnitStatusOffset; // 0xaf8	
private:
	[[maybe_unused]] uint8_t __pad0b04[0x28]; // 0xb04
public:
	float m_flAttackCone; // 0xb2c	
	float m_flAttackDelay; // 0xb30	
	GameTime_t m_flLastAlertSound; // 0xb34	
private:
	[[maybe_unused]] uint8_t __pad0b38[0x4]; // 0xb38
public:
	int16_t m_nSentryLevel; // 0xb3c	
private:
	[[maybe_unused]] uint8_t __pad0b3e[0x2]; // 0xb3e
public:
	Vector m_vecForward; // 0xb40	
	
	// Datamap fields:
	// void EnableAttacking; // 0x0
	// void DisableAttacking; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierIdolReturnTimerVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_IcePath_TechPowerLinger : public CCitadelModifier
{
public:
	int32_t m_nBonusSpirit; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x630
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_VeilWalkerWatcherVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_InvisModifier; // 0x5f8	
	CEmbeddedSubclass< CCitadelModifier > m_VeilWalkerTriggeredModifier; // 0x608	
	CEmbeddedSubclass< CCitadelModifier > m_VeilWalkerMovespeed; // 0x618	
	// MPropertyStartGroup "Gameplay"
	float m_flTraceLengthMin; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_MeleeTarget : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1180
// Has VTable
// 
// MGetKV3ClassDefaults
class CNPC_TrooperNeutralVData : public CAI_CitadelNPCVData
{
public:
	ENeutralTrooperType m_eTrooperType; // 0xe18	
	float m_flGoldReward; // 0xe1c	
	float m_flGoldRewardBonusPercentPerMinute; // 0xe20	
	bool m_bGiveGoldOnHit; // 0xe24	
	bool m_bOrbDropper; // 0xe25	
	bool m_bCapSimultanousAttackers; // 0xe26	
private:
	[[maybe_unused]] uint8_t __pad0e27[0x1]; // 0xe27
public:
	float m_flShieldReactivateDelay; // 0xe28	
	float m_flDyingDuration; // 0xe2c	
	// MPropertyStartGroup "Behavior"
	// MPropertyFriendlyName "Damaged by Bullets?"
	bool m_bDamagedByBullets; // 0xe30	
	// MPropertyFriendlyName "Damaged by Melee?"
	bool m_bDamagedByMelee; // 0xe31	
	// MPropertyFriendlyName "Damaged by Abilities?"
	bool m_bDamagedByAbilities; // 0xe32	
	// MPropertyFriendlyName "Fixed Melee Damage?"
	bool m_bFixedMeleeDamage; // 0xe33	
private:
	[[maybe_unused]] uint8_t __pad0e34[0x4]; // 0xe34
public:
	// MPropertyStartGroup "Shield FX"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShieldParticle; // 0xe38	
	// MPropertyStartGroup "Retaliation Attack"
	// MPropertyDescription "How much damage to deal on retaliate the attacker when this is hit."
	float m_flRetaliateDamage; // 0xf18	
	float m_flRetaliateCooldown; // 0xf1c	
	// MPropertyDescription "Particle to play when dealing retaliate damage"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_retaliateParticle; // 0xf20	
	// MPropertyStartGroup "AOE Attack"
	bool m_bHasAOEAttack; // 0x1000	
private:
	[[maybe_unused]] uint8_t __pad1001[0x3]; // 0x1001
public:
	float m_flAOERadius; // 0x1004	
	float m_flAOEDamage; // 0x1008	
	float m_flAOEAttackCooldown; // 0x100c	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AOEParticle; // 0x1010	
	CEmbeddedSubclass< CCitadelModifier > m_AOEDebuffToApply; // 0x10f0	
	CSoundEventName m_AOEInitiateSound; // 0x1100	
	CSoundEventName m_AOESound; // 0x1110	
	float m_AOEDebuffDuration; // 0x1120	
private:
	[[maybe_unused]] uint8_t __pad1124[0x4]; // 0x1124
public:
	// MPropertyStartGroup "Body"
	CUtlVector< CUtlString > m_vecRandomBodyGroup; // 0x1128	
	CUtlVector< CUtlString > m_vecRandomSkin; // 0x1140	
	// MPropertyStartGroup "Visuals"
	float m_flHullCapsuleRadius; // 0x1158	
	float m_flHullCapsuleHeight; // 0x115c	
	// MPropertyStartGroup "Idles"
	bool m_bFaceEnemyWhileIdle; // 0x1160	
private:
	[[maybe_unused]] uint8_t __pad1161[0x7]; // 0x1161
public:
	CSoundEventName m_IdleLoopSound; // 0x1168	
	// MPropertyStartGroup "Movement"
	MoveType_t m_MoveType; // 0x1178	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
// 
// MNetworkVarNames "CLightComponent::Storage_t m_CLightComponent"
// MEntityAllowsPortraitWorldSpawn
class CLightEntity : public CBaseModelEntity
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CLightComponent"
	// MNetworkAlias "CLightComponent"
	// MNetworkTypeAlias "CLightComponent"
	CLightComponent* m_CLightComponent; // 0x748	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_PermanentPickup : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x318
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_BreakablePropPickupVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyStartGroup "Visuals"
	// MPropertyFriendlyName "Spawn Particle"
	// MPropertyDescription "Spawn Particle"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_spawnParticle; // 0x28	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_gainedParticle; // 0x108	
	// MPropertyFriendlyName "Spawn Particle Color"
	// MPropertyDescription "Spawn Particle Color"
	Color m_Color; // 0x1e8	
private:
	[[maybe_unused]] uint8_t __pad01ec[0x4]; // 0x1ec
public:
	// MPropertyDescription "Model"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_hModel; // 0x1f0	
	// MPropertyFriendlyName "Material group"
	// MPropertyDescription "Which material group of the model should be used?"
	// MPropertyAttributeEditor "VDataModelMaterialGroup( m_hModel )"
	CUtlString m_sDefaultMaterialGroupName; // 0x2d0	
	// MPropertyDescription "Pickup Name Loc String"
	CUtlString m_sNameLocString; // 0x2d8	
	int32_t m_nNameOffset; // 0x2e0	
	// MPropertyDescription "Show On Minimap"
	bool m_bShowOnMinimap; // 0x2e4	
	bool m_bIsPermanentPickup; // 0x2e5	
private:
	[[maybe_unused]] uint8_t __pad02e6[0x2]; // 0x2e6
public:
	int32_t m_iTempParticleSheetIndex; // 0x2e8	
	float m_flParticleRadius; // 0x2ec	
	// MPropertyGroupName "Audio"
	// MPropertyDescription "Pickup Sound"
	CSoundEventName m_sPickupSound; // 0x2f0	
	// MPropertyGroupName "Audio"
	// MPropertyDescription "Spawn Sound"
	CSoundEventName m_sSpawnSound; // 0x300	
	// MPropertyDescription "Pickup Radius"
	float m_flPickupRadius; // 0x310	
	// MPropertyDescription "Pickup Expiration Duration"
	float m_flPickupExpirationDuration; // 0x314	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Slork_Raging_Current_CountdownVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TorrentModifier; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_WaterAuraParticle; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x628
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Mirage_Tornado_Aura_Apply_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TossModifier; // 0x5f8	
	CEmbeddedSubclass< CCitadelModifier > m_LiftModifier; // 0x608	
	CEmbeddedSubclass< CCitadelModifier > m_EnemyInAirModifier; // 0x618	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityThumper3VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DroneModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ShakedownPulseVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strFireSound; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShakeParticle; // 0x608	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChainParticle; // 0x6e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_WreckerScrapBlastDebuff : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x38]; // 0xc8
public:
	float m_flEnemyMoveSlow; // 0x100	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_HealingPulse_Tracker : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1550
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_TechCleaveVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TechCleaveModifier; // 0x1530	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sCleaveProcSound; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1b0
// Has VTable
class CCitadel_Modifier_RescueBeam : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xe0]; // 0xc8
public:
	float m_flHealthPerTick; // 0x1a8	
	ParticleIndex_t m_nBeamIndex; // 0x1ac	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CSkyboxReference : public CBaseEntity
{
public:
	WorldGroupId_t m_worldGroupId; // 0x4b8	
	CHandle< CSkyCamera > m_hSkyCamera; // 0x4bc	
	
	// Datamap fields:
	// const char * worldGroupID; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc08
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "bool m_bUseHitboxesForRenderBox"
// MNetworkVarNames "bool m_bUseAnimGraph"
class CDynamicProp : public CBreakableProp
{
private:
	[[maybe_unused]] uint8_t __pad0b08[0x8]; // 0xb08
public:
	bool m_bCreateNavObstacle; // 0xb10	
	bool m_bNavObstacleUpdatesOverridden; // 0xb11	
	// MNetworkEnable
	bool m_bUseHitboxesForRenderBox; // 0xb12	
	// MNetworkEnable
	bool m_bUseAnimGraph; // 0xb13	
private:
	[[maybe_unused]] uint8_t __pad0b14[0x4]; // 0xb14
public:
	CEntityIOOutput m_pOutputAnimBegun; // 0xb18	
	CEntityIOOutput m_pOutputAnimOver; // 0xb40	
	CEntityIOOutput m_pOutputAnimLoopCycleOver; // 0xb68	
	CEntityIOOutput m_OnAnimReachedStart; // 0xb90	
	CEntityIOOutput m_OnAnimReachedEnd; // 0xbb8	
	CUtlSymbolLarge m_iszIdleAnim; // 0xbe0	
	AnimLoopMode_t m_nIdleAnimLoopMode; // 0xbe8	
	bool m_bRandomizeCycle; // 0xbec	
	bool m_bStartDisabled; // 0xbed	
	bool m_bFiredStartEndOutput; // 0xbee	
	bool m_bForceNpcExclude; // 0xbef	
	bool m_bCreateNonSolid; // 0xbf0	
	bool m_bIsOverrideProp; // 0xbf1	
private:
	[[maybe_unused]] uint8_t __pad0bf2[0x2]; // 0xbf2
public:
	int32_t m_iInitialGlowState; // 0xbf4	
	int32_t m_nGlowRange; // 0xbf8	
	int32_t m_nGlowRangeMin; // 0xbfc	
	Color m_glowColor; // 0xc00	
	int32_t m_nGlowTeam; // 0xc04	
	
	// Datamap fields:
	// CUtlSymbolLarge StartingAnim; // 0x7fffffff
	// CUtlSymbolLarge StartingAnimationLoopMode; // 0x7fffffff
	// CUtlSymbolLarge InputSetAnimationLooping; // 0x0
	// CUtlSymbolLarge InputSetAnimationNoResetLooping; // 0x0
	// CUtlSymbolLarge InputSetIdleAnimationLooping; // 0x0
	// CUtlSymbolLarge InputSetAnimationNotLooping; // 0x0
	// CUtlSymbolLarge InputSetAnimationNoResetNotLooping; // 0x0
	// CUtlSymbolLarge InputSetIdleAnimationNotLooping; // 0x0
	// CUtlSymbolLarge InputSetAnimation; // 0x0
	// CUtlSymbolLarge InputSetAnimationNoReset; // 0x0
	// CUtlSymbolLarge InputSetIdleAnimation; // 0x0
	// CUtlSymbolLarge InputSetIdleAnimationLooping; // 0x0
	// CUtlSymbolLarge InputSetIdleAnimationNotLooping; // 0x0
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// void InputEnableCollision; // 0x0
	// void InputDisableCollision; // 0x0
	// float InputSetPlaybackRate; // 0x0
	// void InputStartGlowing; // 0x0
	// void InputStopGlowing; // 0x0
	// Vector InputSetGlowOverride; // 0x0
	// int32_t InputSetGlowRange; // 0x0
	// void CDynamicPropAnimThink; // 0x0
	// int32_t health; // 0x7fffffff
	// bool HoldAnimation; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
class CCitadel_WeaponUpgrade_Sharpshooter : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x640
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierAura_ConeVData : public CCitadelModifierAuraVData
{
public:
	float m_flAuraTargetingConeHalfWidth; // 0x638	
	float m_flAuraTargetingConeAngle; // 0x63c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_ControlPointCapturerAuraTarget : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7a0
// Has VTable
// 
// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkIncludeByName "CGameSceneNode::m_hierarchyAttachName"
// MNetworkIncludeByName "m_nMinCPULevel"
// MNetworkIncludeByName "m_nMaxCPULevel"
// MNetworkIncludeByName "m_nMinGPULevel"
// MNetworkIncludeByName "m_nMaxGPULevel"
// MNetworkVarNames "uint16 m_RopeFlags"
// MNetworkVarNames "int16 m_Slack"
// MNetworkVarNames "float32 m_Width"
// MNetworkVarNames "float32 m_TextureScale"
// MNetworkVarNames "uint8 m_nSegments"
// MNetworkVarNames "bool m_bConstrainBetweenEndpoints"
// MNetworkVarNames "HMaterialStrong m_iRopeMaterialModelIndex"
// MNetworkVarNames "uint8 m_Subdiv"
// MNetworkVarNames "uint8 m_nChangeCount"
// MNetworkVarNames "int16 m_RopeLength"
// MNetworkVarNames "uint8 m_fLockedPoints"
// MNetworkVarNames "float32 m_flScrollSpeed"
// MNetworkVarNames "CHandle< CBaseEntity> m_hStartPoint"
// MNetworkVarNames "CHandle< CBaseEntity> m_hEndPoint"
// MNetworkVarNames "AttachmentHandle_t m_iStartAttachment"
// MNetworkVarNames "AttachmentHandle_t m_iEndAttachment"
class CRopeKeyframe : public CBaseModelEntity
{
private:
	[[maybe_unused]] uint8_t __pad0748[0x8]; // 0x748
public:
	// MNetworkEnable
	uint16_t m_RopeFlags; // 0x750	
private:
	[[maybe_unused]] uint8_t __pad0752[0x6]; // 0x752
public:
	CUtlSymbolLarge m_iNextLinkName; // 0x758	
	// MNetworkEnable
	int16_t m_Slack; // 0x760	
private:
	[[maybe_unused]] uint8_t __pad0762[0x2]; // 0x762
public:
	// MNetworkEnable
	float m_Width; // 0x764	
	// MNetworkEnable
	// MNetworkBitCount "10"
	// MNetworkMinValue "0.100000"
	// MNetworkMaxValue "10.000000"
	float m_TextureScale; // 0x768	
	// MNetworkEnable
	uint8_t m_nSegments; // 0x76c	
	// MNetworkEnable
	bool m_bConstrainBetweenEndpoints; // 0x76d	
private:
	[[maybe_unused]] uint8_t __pad076e[0x2]; // 0x76e
public:
	CUtlSymbolLarge m_strRopeMaterialModel; // 0x770	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_iRopeMaterialModelIndex; // 0x778	
	// MNetworkEnable
	uint8_t m_Subdiv; // 0x780	
	// MNetworkEnable
	uint8_t m_nChangeCount; // 0x781	
	// MNetworkEnable
	int16_t m_RopeLength; // 0x782	
	// MNetworkEnable
	uint8_t m_fLockedPoints; // 0x784	
	bool m_bCreatedFromMapFile; // 0x785	
private:
	[[maybe_unused]] uint8_t __pad0786[0x2]; // 0x786
public:
	// MNetworkEnable
	float m_flScrollSpeed; // 0x788	
	bool m_bStartPointValid; // 0x78c	
	bool m_bEndPointValid; // 0x78d	
private:
	[[maybe_unused]] uint8_t __pad078e[0x2]; // 0x78e
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hStartPoint; // 0x790	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hEndPoint; // 0x794	
	// MNetworkEnable
	AttachmentHandle_t m_iStartAttachment; // 0x798	
	// MNetworkEnable
	AttachmentHandle_t m_iEndAttachment; // 0x799	
	
	// Datamap fields:
	// float InputSetScrollSpeed; // 0x0
	// Vector InputSetForce; // 0x0
	// void InputBreak; // 0x0
	// int32_t Breakable; // 0x7fffffff
	// int32_t Collide; // 0x7fffffff
	// int32_t Barbed; // 0x7fffffff
	// int32_t UseWind; // 0x7fffffff
	// int32_t Dangling; // 0x7fffffff
	// int32_t Type; // 0x7fffffff
	// int32_t RopeShader; // 0x7fffffff
	// CUtlString RopeMaterial; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_LifeSteal : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Dust_Storm_Thrown : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1710
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_ArmorUpgrade_PersonalRejuvenatorVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DeployParticle; // 0x1530	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RespawnParticle; // 0x1610	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sDeploySound; // 0x16f0	
	CSoundEventName m_sRespawnSound; // 0x1700	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x2c0
// Has VTable
class CCitadel_Modifier_Tier2Boss_LaserBeam : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x70]; // 0xc8
public:
	bool m_bPreview; // 0x138	
private:
	[[maybe_unused]] uint8_t __pad0139[0xb]; // 0x139
public:
	GameTime_t m_flSoundStartTime; // 0x144	
private:
	[[maybe_unused]] uint8_t __pad0148[0x4]; // 0x148
public:
	Vector m_vStart; // 0x14c	
	Vector m_vEnd; // 0x158	
	Vector m_vPrevEnd; // 0x164	
	float m_flAngleBetweenTrace; // 0x170	
	float m_flDamagePerTick; // 0x174	
	float m_flCreepDamagePerTick; // 0x178	
	GameTime_t m_flNextDamageTick; // 0x17c	
	CUtlVector< CHandle< CBaseEntity > > m_vecEntitiesHit; // 0x180	
	float m_flDamageTickRate; // 0x198	
	GameTime_t m_flLastShakeTime; // 0x19c	
	bool m_bSweepRightFirst; // 0x1a0	
private:
	[[maybe_unused]] uint8_t __pad01a1[0x3]; // 0x1a1
public:
	QAngle m_angBeamAim; // 0x1a4	
	Vector m_vecBeamTarget; // 0x1b0	
	GameTime_t m_flLastBeamUpdateTime; // 0x1bc	
private:
	[[maybe_unused]] uint8_t __pad01c0[0x18]; // 0x1c0
public:
	GameTime_t m_flTargetingTaskStartTime; // 0x1d8	
	float m_flTrackVel; // 0x1dc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa50
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "bool m_bEnabled"
// MNetworkVarNames "int m_nColorMode"
// MNetworkVarNames "Color m_Color"
// MNetworkVarNames "float m_flColorTemperature"
// MNetworkVarNames "float m_flBrightness"
// MNetworkVarNames "float m_flBrightnessScale"
// MNetworkVarNames "int m_nDirectLight"
// MNetworkVarNames "int m_nBakedShadowIndex"
// MNetworkVarNames "int m_nLuminaireShape"
// MNetworkVarNames "float m_flLuminaireSize"
// MNetworkVarNames "float m_flLuminaireAnisotropy"
// MNetworkVarNames "CUtlString m_LightStyleString"
// MNetworkVarNames "GameTime_t m_flLightStyleStartTime"
// MNetworkVarNames "CUtlString m_QueuedLightStyleStrings"
// MNetworkVarNames "CUtlString m_LightStyleEvents"
// MNetworkVarNames "CHandle< CBaseModelEntity > m_LightStyleTargets"
// MNetworkVarNames "HRenderTextureStrong m_hLightCookie"
// MNetworkVarNames "float m_flShape"
// MNetworkVarNames "float m_flSoftX"
// MNetworkVarNames "float m_flSoftY"
// MNetworkVarNames "float m_flSkirt"
// MNetworkVarNames "float m_flSkirtNear"
// MNetworkVarNames "Vector m_vSizeParams"
// MNetworkVarNames "float m_flRange"
// MNetworkVarNames "Vector m_vShear"
// MNetworkVarNames "int m_nBakeSpecularToCubemaps"
// MNetworkVarNames "Vector m_vBakeSpecularToCubemapsSize"
// MNetworkVarNames "int m_nCastShadows"
// MNetworkVarNames "int m_nShadowMapSize"
// MNetworkVarNames "int m_nShadowPriority"
// MNetworkVarNames "bool m_bContactShadow"
// MNetworkVarNames "int m_nBounceLight"
// MNetworkVarNames "float m_flBounceScale"
// MNetworkVarNames "float m_flMinRoughness"
// MNetworkVarNames "Vector m_vAlternateColor"
// MNetworkVarNames "float m_fAlternateColorBrightness"
// MNetworkVarNames "int m_nFog"
// MNetworkVarNames "float m_flFogStrength"
// MNetworkVarNames "int m_nFogShadows"
// MNetworkVarNames "float m_flFogScale"
// MNetworkVarNames "bool m_bFogMixedShadows"
// MNetworkVarNames "float m_flFadeSizeStart"
// MNetworkVarNames "float m_flFadeSizeEnd"
// MNetworkVarNames "float m_flShadowFadeSizeStart"
// MNetworkVarNames "float m_flShadowFadeSizeEnd"
// MNetworkVarNames "bool m_bPrecomputedFieldsValid"
// MNetworkVarNames "Vector m_vPrecomputedBoundsMins"
// MNetworkVarNames "Vector m_vPrecomputedBoundsMaxs"
// MNetworkVarNames "Vector m_vPrecomputedOBBOrigin"
// MNetworkVarNames "QAngle m_vPrecomputedOBBAngles"
// MNetworkVarNames "Vector m_vPrecomputedOBBExtent"
// MNetworkVarNames "int m_nPrecomputedSubFrusta"
// MNetworkVarNames "Vector m_vPrecomputedOBBOrigin0"
// MNetworkVarNames "QAngle m_vPrecomputedOBBAngles0"
// MNetworkVarNames "Vector m_vPrecomputedOBBExtent0"
// MNetworkVarNames "Vector m_vPrecomputedOBBOrigin1"
// MNetworkVarNames "QAngle m_vPrecomputedOBBAngles1"
// MNetworkVarNames "Vector m_vPrecomputedOBBExtent1"
// MNetworkVarNames "Vector m_vPrecomputedOBBOrigin2"
// MNetworkVarNames "QAngle m_vPrecomputedOBBAngles2"
// MNetworkVarNames "Vector m_vPrecomputedOBBExtent2"
// MNetworkVarNames "Vector m_vPrecomputedOBBOrigin3"
// MNetworkVarNames "QAngle m_vPrecomputedOBBAngles3"
// MNetworkVarNames "Vector m_vPrecomputedOBBExtent3"
// MNetworkVarNames "Vector m_vPrecomputedOBBOrigin4"
// MNetworkVarNames "QAngle m_vPrecomputedOBBAngles4"
// MNetworkVarNames "Vector m_vPrecomputedOBBExtent4"
// MNetworkVarNames "Vector m_vPrecomputedOBBOrigin5"
// MNetworkVarNames "QAngle m_vPrecomputedOBBAngles5"
// MNetworkVarNames "Vector m_vPrecomputedOBBExtent5"
class CBarnLight : public CBaseModelEntity
{
public:
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	bool m_bEnabled; // 0x748	
private:
	[[maybe_unused]] uint8_t __pad0749[0x3]; // 0x749
public:
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	int32_t m_nColorMode; // 0x74c	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Color m_Color; // 0x750	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flColorTemperature; // 0x754	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flBrightness; // 0x758	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flBrightnessScale; // 0x75c	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	int32_t m_nDirectLight; // 0x760	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	int32_t m_nBakedShadowIndex; // 0x764	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	int32_t m_nLuminaireShape; // 0x768	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flLuminaireSize; // 0x76c	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flLuminaireAnisotropy; // 0x770	
private:
	[[maybe_unused]] uint8_t __pad0774[0x4]; // 0x774
public:
	// MNetworkEnable
	// MNetworkChangeCallback "StyleChanged"
	CUtlString m_LightStyleString; // 0x778	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	GameTime_t m_flLightStyleStartTime; // 0x780	
private:
	[[maybe_unused]] uint8_t __pad0784[0x4]; // 0x784
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< CUtlString > m_QueuedLightStyleStrings; // 0x788	
	// MNetworkEnable
	CNetworkUtlVectorBase< CUtlString > m_LightStyleEvents; // 0x7a0	
	// MNetworkEnable
	CNetworkUtlVectorBase< CHandle< CBaseModelEntity > > m_LightStyleTargets; // 0x7b8	
	CEntityIOOutput m_StyleEvent[4]; // 0x7d0	
private:
	[[maybe_unused]] uint8_t __pad0870[0x20]; // 0x870
public:
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hLightCookie; // 0x890	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flShape; // 0x898	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flSoftX; // 0x89c	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flSoftY; // 0x8a0	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flSkirt; // 0x8a4	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flSkirtNear; // 0x8a8	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	// MNetworkBitCount "32"
	Vector m_vSizeParams; // 0x8ac	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	// MNetworkBitCount "32"
	float m_flRange; // 0x8b8	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	// MNetworkBitCount "32"
	Vector m_vShear; // 0x8bc	
	// MNetworkEnable
	int32_t m_nBakeSpecularToCubemaps; // 0x8c8	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	// MNetworkBitCount "32"
	Vector m_vBakeSpecularToCubemapsSize; // 0x8cc	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	int32_t m_nCastShadows; // 0x8d8	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	int32_t m_nShadowMapSize; // 0x8dc	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	int32_t m_nShadowPriority; // 0x8e0	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	bool m_bContactShadow; // 0x8e4	
private:
	[[maybe_unused]] uint8_t __pad08e5[0x3]; // 0x8e5
public:
	// MNetworkEnable
	int32_t m_nBounceLight; // 0x8e8	
	// MNetworkEnable
	float m_flBounceScale; // 0x8ec	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flMinRoughness; // 0x8f0	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vAlternateColor; // 0x8f4	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_fAlternateColorBrightness; // 0x900	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	int32_t m_nFog; // 0x904	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flFogStrength; // 0x908	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	int32_t m_nFogShadows; // 0x90c	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flFogScale; // 0x910	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	bool m_bFogMixedShadows; // 0x914	
private:
	[[maybe_unused]] uint8_t __pad0915[0x3]; // 0x915
public:
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flFadeSizeStart; // 0x918	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flFadeSizeEnd; // 0x91c	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flShadowFadeSizeStart; // 0x920	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flShadowFadeSizeEnd; // 0x924	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	bool m_bPrecomputedFieldsValid; // 0x928	
private:
	[[maybe_unused]] uint8_t __pad0929[0x3]; // 0x929
public:
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedBoundsMins; // 0x92c	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedBoundsMaxs; // 0x938	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBOrigin; // 0x944	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	QAngle m_vPrecomputedOBBAngles; // 0x950	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBExtent; // 0x95c	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	int32_t m_nPrecomputedSubFrusta; // 0x968	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBOrigin0; // 0x96c	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	QAngle m_vPrecomputedOBBAngles0; // 0x978	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBExtent0; // 0x984	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBOrigin1; // 0x990	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	QAngle m_vPrecomputedOBBAngles1; // 0x99c	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBExtent1; // 0x9a8	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBOrigin2; // 0x9b4	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	QAngle m_vPrecomputedOBBAngles2; // 0x9c0	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBExtent2; // 0x9cc	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBOrigin3; // 0x9d8	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	QAngle m_vPrecomputedOBBAngles3; // 0x9e4	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBExtent3; // 0x9f0	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBOrigin4; // 0x9fc	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	QAngle m_vPrecomputedOBBAngles4; // 0xa08	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBExtent4; // 0xa14	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBOrigin5; // 0xa20	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	QAngle m_vPrecomputedOBBAngles5; // 0xa2c	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	Vector m_vPrecomputedOBBExtent5; // 0xa38	
	bool m_bPvsModifyEntity; // 0xa44	
	
	// Datamap fields:
	// void m_StyleEvent[0]; // 0x7d0
	// void m_StyleEvent[1]; // 0x7f8
	// void m_StyleEvent[2]; // 0x820
	// void m_StyleEvent[3]; // 0x848
	// void CBarnLightThink_SetNextQueuedLightStyle; // 0x0
	// void CBarnLightThink_ApplyLightStylesToTargets; // 0x0
	// void CBarnLightThink_LightStyleEvent; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Cadence_SleepAOE : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_WeaponUpgrade_FireRateAura : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CEnvViewPunch : public CPointEntity
{
public:
	float m_flRadius; // 0x4b8	
	QAngle m_angViewPunch; // 0x4bc	
	
	// Datamap fields:
	// void InputViewPunch; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_AirLiftExplodingAllyVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strExplodeEffect; // 0x5f8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AOEModifier; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Bebop_LaserBeamVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_LaserModifier; // 0x14e8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChargeParticle; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x268
// Has VTable
class CCitadel_Modifier_Invis : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x188]; // 0xc8
public:
	bool m_bInvis; // 0x250	
private:
	[[maybe_unused]] uint8_t __pad0251[0x3]; // 0x251
public:
	GameTime_t m_flStartInvisTime; // 0x254	
	bool m_bFullyInvis; // 0x258	
private:
	[[maybe_unused]] uint8_t __pad0259[0x3]; // 0x259
public:
	GameTime_t m_flLastDamageTaken; // 0x25c	
	GameTime_t m_flLastSpotted; // 0x260	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc00
// Has VTable
class CCitadel_Ability_TrooperGrenade : public CCitadelBaseAbilityServerOnly
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_RegeneratingTechShield : public CCitadel_Modifier_BaseShield
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcb0
// Has VTable
// 
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkExcludeByName "m_animationController.m_flPlaybackRate"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkIncludeByName "m_spawnflags"
// MNetworkVarNames "bool m_bAwake"
class CPhysicsProp : public CBreakableProp
{
private:
	[[maybe_unused]] uint8_t __pad0b08[0x8]; // 0xb08
public:
	CEntityIOOutput m_MotionEnabled; // 0xb10	
	CEntityIOOutput m_OnAwakened; // 0xb38	
	CEntityIOOutput m_OnAwake; // 0xb60	
	CEntityIOOutput m_OnAsleep; // 0xb88	
	CEntityIOOutput m_OnPlayerUse; // 0xbb0	
	CEntityIOOutput m_OnOutOfWorld; // 0xbd8	
	CEntityIOOutput m_OnPlayerPickup; // 0xc00	
	bool m_bForceNavIgnore; // 0xc28	
	bool m_bNoNavmeshBlocker; // 0xc29	
	bool m_bForceNpcExclude; // 0xc2a	
private:
	[[maybe_unused]] uint8_t __pad0c2b[0x1]; // 0xc2b
public:
	float m_massScale; // 0xc2c	
	float m_inertiaScale; // 0xc30	
	float m_buoyancyScale; // 0xc34	
	int32_t m_damageType; // 0xc38	
	int32_t m_damageToEnableMotion; // 0xc3c	
	float m_flForceToEnableMotion; // 0xc40	
	bool m_bThrownByPlayer; // 0xc44	
	bool m_bDroppedByPlayer; // 0xc45	
	bool m_bTouchedByPlayer; // 0xc46	
	bool m_bFirstCollisionAfterLaunch; // 0xc47	
	int32_t m_iExploitableByPlayer; // 0xc48	
	bool m_bHasBeenAwakened; // 0xc4c	
	bool m_bIsOverrideProp; // 0xc4d	
private:
	[[maybe_unused]] uint8_t __pad0c4e[0x2]; // 0xc4e
public:
	GameTime_t m_fNextCheckDisableMotionContactsTime; // 0xc50	
	int32_t m_iInitialGlowState; // 0xc54	
	int32_t m_nGlowRange; // 0xc58	
	int32_t m_nGlowRangeMin; // 0xc5c	
	Color m_glowColor; // 0xc60	
	bool m_bShouldAutoConvertBackFromDebris; // 0xc64	
	bool m_bMuteImpactEffects; // 0xc65	
private:
	[[maybe_unused]] uint8_t __pad0c66[0x9]; // 0xc66
public:
	bool m_bAcceptDamageFromHeldObjects; // 0xc6f	
	bool m_bEnableUseOutput; // 0xc70	
private:
	[[maybe_unused]] uint8_t __pad0c71[0x3]; // 0xc71
public:
	CPhysicsProp::CrateType_t m_CrateType; // 0xc74	
	CUtlSymbolLarge m_strItemClass[4]; // 0xc78	
	int32_t m_nItemCount[4]; // 0xc98	
	bool m_bRemovableForAmmoBalancing; // 0xca8	
	// MNetworkEnable
	bool m_bAwake; // 0xca9	
	
	// Datamap fields:
	// void InputEnableMotion; // 0x0
	// void InputDisableMotion; // 0x0
	// void InputWake; // 0x0
	// bool InputSetAutoConvertBackFromDebris; // 0x0
	// void InputSleep; // 0x0
	// void InputDisableFloating; // 0x0
	// void InputStartGlowing; // 0x0
	// void InputStopGlowing; // 0x0
	// Vector InputSetGlowOverride; // 0x0
	// int32_t InputSetGlowRange; // 0x0
	// float InputSetMass; // 0x0
	// void InputEnableGravity; // 0x0
	// void InputDisableGravity; // 0x0
	// void InputEnableDrag; // 0x0
	// void InputDisableDrag; // 0x0
	// void InputEnableCollisions; // 0x0
	// void InputDisableCollisions; // 0x0
	// bool forcemotiondisabled; // 0x7fffffff
	// bool phys_start_asleep; // 0x7fffffff
	// void CPhysicsPropClearFlagsThink; // 0x0
	// int32_t m_nNavObstacleType; // 0xc68
	// bool m_bUpdateNavWhenMoving; // 0xc6c
	// bool m_bForceNavObstacleCut; // 0xc6d
	// bool m_bAllowObstacleConvexHullMerging; // 0xc6e
	// int32_t health; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e8
// Has VTable
class CPathCorner : public CPointEntity
{
public:
	float m_flWait; // 0x4b8	
	float m_flRadius; // 0x4bc	
	CEntityIOOutput m_OnPass; // 0x4c0	
	
	// Datamap fields:
	// CUtlSymbolLarge InputSetNextPathCorner; // 0x0
	// void InputInPass; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x68
// Has VTable
// 
// MNetworkVarNames "int m_iReapplyProvisionParity"
// MNetworkVarNames "EHANDLE m_hOuter"
// MNetworkVarNames "attributeprovidertypes_t m_ProviderType"
class CAttributeManager
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	CUtlVector< CHandle< CBaseEntity > > m_Providers; // 0x8	
	CUtlVector< CHandle< CBaseEntity > > m_Receivers; // 0x20	
	// MNetworkEnable
	int32_t m_iReapplyProvisionParity; // 0x38	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hOuter; // 0x3c	
	bool m_bPreventLoopback; // 0x40	
private:
	[[maybe_unused]] uint8_t __pad0041[0x3]; // 0x41
public:
	// MNetworkEnable
	attributeprovidertypes_t m_ProviderType; // 0x44	
	CUtlVector< CAttributeManager::cached_attribute_float_t > m_CachedResults; // 0x48	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Lash_Flog_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_FlameDashVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_GroundAuraModifier; // 0x5f8	
	CEmbeddedSubclass< CCitadelModifier > m_ProgressModifier; // 0x608	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FlameDashParticle; // 0x618	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FlameAuraParticle; // 0x6f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Stabilizing_Tripod : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_ArmorUpgrade_VexBarrierVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ShieldModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_HollowPoint_Stack : public CCitadelModifier
{
public:
	GameTime_t m_flStackDecayDelayTime; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_ArmorUpgrade_SlowImmunity : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f0
// Has VTable
class CMultiSource : public CLogicalEntity
{
public:
	CHandle< CBaseEntity > m_rgEntities[32]; // 0x4b8	
	int32_t m_rgTriggered[32]; // 0x538	
	CEntityIOOutput m_OnTrigger; // 0x5b8	
	int32_t m_iTotal; // 0x5e0	
private:
	[[maybe_unused]] uint8_t __pad05e4[0x4]; // 0x5e4
public:
	CUtlSymbolLarge m_globalstate; // 0x5e8	
	
	// Datamap fields:
	// void CMultiSourceRegister; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CLogicNavigation : public CLogicalEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	bool m_isOn; // 0x4c0	
private:
	[[maybe_unused]] uint8_t __pad04c1[0x3]; // 0x4c1
public:
	navproperties_t m_navProperty; // 0x4c4	
	
	// Datamap fields:
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// void InputToggle; // 0x0
	// CUtlString navprop; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x558
// Has VTable
class CEnvEntityMaker : public CPointEntity
{
public:
	Vector m_vecEntityMins; // 0x4b8	
	Vector m_vecEntityMaxs; // 0x4c4	
	CHandle< CBaseEntity > m_hCurrentInstance; // 0x4d0	
	CHandle< CBaseEntity > m_hCurrentBlocker; // 0x4d4	
	Vector m_vecBlockerOrigin; // 0x4d8	
	QAngle m_angPostSpawnDirection; // 0x4e4	
	float m_flPostSpawnDirectionVariance; // 0x4f0	
	float m_flPostSpawnSpeed; // 0x4f4	
	bool m_bPostSpawnUseAngles; // 0x4f8	
private:
	[[maybe_unused]] uint8_t __pad04f9[0x7]; // 0x4f9
public:
	CUtlSymbolLarge m_iszTemplate; // 0x500	
	CEntityIOOutput m_pOutputOnSpawned; // 0x508	
	CEntityIOOutput m_pOutputOnFailedSpawn; // 0x530	
	
	// Datamap fields:
	// void InputForceSpawn; // 0x0
	// CUtlSymbolLarge InputForceSpawnAtEntityOrigin; // 0x0
	// void CEnvEntityMakerCheckSpawnThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CProjectedDecal : public CPointEntity
{
public:
	int32_t m_nTexture; // 0x4b8	
	float m_flDistance; // 0x4bc	
	
	// Datamap fields:
	// void CProjectedDecalTriggerDecal; // 0x0
	// void CProjectedDecalStaticDecal; // 0x0
	// void InputActivate; // 0x0
	// CUtlString texture; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_MagicStormWatcher : public CCitadel_Modifier_Intrinsic_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_DiscordVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_TechRangeClamp : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x598
// Has VTable
class CFilterMultiple : public CBaseFilter
{
public:
	filter_t m_nFilterType; // 0x510	
private:
	[[maybe_unused]] uint8_t __pad0514[0x4]; // 0x514
public:
	CUtlSymbolLarge m_iFilterName[10]; // 0x518	
	CHandle< CBaseEntity > m_hFilter[10]; // 0x568	
	int32_t m_nFilterCount; // 0x590	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CPlayer_UseServices : public CPlayerPawnComponent
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Synth_Grasp_Caster_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityRestorativeGooVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RestorativeGooParticle; // 0x14e8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_RestorativeGooModifier; // 0x15c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad8
// Has VTable
class CCitadel_Ability_Teleport : public CCitadelBaseAbility
{
public:
	bool m_bTeleportingToTarget; // 0xab0	
private:
	[[maybe_unused]] uint8_t __pad0ab1[0x3]; // 0xab1
public:
	Vector m_vTargetPosition; // 0xab4	
	QAngle m_vTargetAngles; // 0xac0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BulletArmorReductionVData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'entity2')
// Alignment: 8
// Size: 0x38
// Has VTable
class CScriptComponent : public CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0008[0x28]; // 0x8
public:
	CUtlSymbolLarge m_scriptClassName; // 0x30	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CScriptComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_contained_but_impl_is_referenced(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CScriptComponent")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x800
// Has VTable
class CCitadel_Projectile_Archer_ChargedShot : public CCitadelProjectile
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CPhysicsWire : public CBaseEntity
{
public:
	int32_t m_nDensity; // 0x4b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityGenericPerson4VData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x208
// Has VTable
class CCitadel_Modifier_SleepDagger_Asleep : public CCitadel_Modifier_Sleep
{
private:
	[[maybe_unused]] uint8_t __pad00f0[0x28]; // 0xf0
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x308
// Has VTable
class CCitadel_Modifier_Chrono_KineticCarbine : public CCitadelModifier
{
public:
	int32_t m_nBulletCount; // 0xc8	
	float m_flElapsedPct; // 0xcc	
	CHandle< CCitadelBulletTimeWarp > m_hTimeWarp; // 0xd0	
	ParticleIndex_t m_nFullyChargedParticle; // 0xd4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x898
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_HealthSwapPrecastVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strTargetParticleEffect; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strTargetEnemyParticleEffect; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strTargetScreenParticleEffect; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_LifeDrainVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SilenceModifier; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DrainParticle; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x628
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BeltFed_MagazineVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_SpinUpSound; // 0x5f8	
	CSoundEventName m_SpinDownSound; // 0x608	
	CSoundEventName m_SpinLoopSound; // 0x618	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1620
// Has VTable
// 
// MGetKV3ClassDefaults
class CItemStimPakVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_StimPakModifier; // 0x1530	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_TriggerPush : public CCitadelModifier
{
public:
	Vector m_vPush; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x50
// Has VTable
// 
// MNetworkVarNames "CEntityIndex m_nEntIndex"
// MNetworkVarNames "int m_nTeam"
// MNetworkVarNames "Class_T m_eClass"
// MNetworkVarNames "int m_iLane"
// MNetworkVarNames "EMinimapHeight m_eHeight"
// MNetworkVarNames "bool m_bVisibleOnMap"
// MNetworkVarNames "bool m_bBackdoorProtectionActive"
// MNetworkVarNames "GameTick_t m_nTickHidden"
// MNetworkVarNames "uint8 m_nHealthPercent"
// MNetworkVarNames "uint8 m_nPositionX"
// MNetworkVarNames "uint8 m_nPositionY"
class STeamFOWEntity
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x30]; // 0x0
public:
	// MNetworkEnable
	CEntityIndex m_nEntIndex; // 0x30	
	// MNetworkEnable
	int32_t m_nTeam; // 0x34	
	// MNetworkEnable
	Class_T m_eClass; // 0x38	
	// MNetworkEnable
	int32_t m_iLane; // 0x3c	
	// MNetworkEnable
	EMinimapHeight m_eHeight; // 0x40	
	// MNetworkEnable
	bool m_bVisibleOnMap; // 0x41	
	// MNetworkEnable
	bool m_bBackdoorProtectionActive; // 0x42	
private:
	[[maybe_unused]] uint8_t __pad0043[0x1]; // 0x43
public:
	// MNetworkEnable
	GameTick_t m_nTickHidden; // 0x44	
	// MNetworkEnable
	uint8_t m_nHealthPercent; // 0x48	
	// MNetworkEnable
	// MNetworkPriority "32"
	uint8_t m_nPositionX; // 0x49	
	// MNetworkEnable
	// MNetworkPriority "32"
	uint8_t m_nPositionY; // 0x4a	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x20
// Has VTable
// Has Trivial Destructor
struct locksound_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	CUtlSymbolLarge sLockedSound; // 0x8	
	CUtlSymbolLarge sUnlockedSound; // 0x10	
	GameTime_t flwaitSound; // 0x18	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ThermalDetonator_ThinkerVData : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GroundParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
// 
// MGetKV3ClassDefaults
class CNPC_SimpleAnimatingAIVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_sModelName; // 0x28	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Hook_Shield : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x158
// Has VTable
class CCitadel_Modifier_FireBomb : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x70]; // 0xc8
public:
	float m_flSideMoveSpeed; // 0x138	
	Vector m_vReturnPosition; // 0x13c	
	QAngle m_vReturnAngles; // 0x148	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Item_AOESilence_Target : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x708
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TechBurst_ProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ProcParticle; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_RespawnCredit : public CCitadelModifier
{
public:
	bool m_bActivated; // 0xc8	
	bool m_bSpokeAboutToExpire; // 0xc9	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
// 
// MNetworkVarNames "float32 m_flScale"
// MNetworkVarNames "float32 m_flStartScale"
// MNetworkVarNames "float32 m_flScaleTime"
// MNetworkVarNames "uint32 m_nFlags"
class CBaseFire : public CBaseEntity
{
public:
	// MNetworkEnable
	float m_flScale; // 0x4b8	
	// MNetworkEnable
	float m_flStartScale; // 0x4bc	
	// MNetworkEnable
	float m_flScaleTime; // 0x4c0	
	// MNetworkEnable
	uint32_t m_nFlags; // 0x4c4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x988
// Has VTable
// 
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
// MNetworkVarNames "bool m_bActive"
// MNetworkVarNames "CUtlString m_sPickupName"
// MNetworkVarNames "int m_nNameOffset"
class CCitadel_BreakablePropPickup : public CBaseAnimGraph
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0x958	
	// MNetworkEnable
	bool m_bActive; // 0x970	
private:
	[[maybe_unused]] uint8_t __pad0971[0x7]; // 0x971
public:
	// MNetworkEnable
	CUtlString m_sPickupName; // 0x978	
	// MNetworkEnable
	int32_t m_nNameOffset; // 0x980	
	
	// Datamap fields:
	// Vector spawn_position; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb78
// Has VTable
class CCitadel_Item_HealthRegenAura : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x768
// Has VTable
// 
// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "CGameSceneNode::m_angRotation"
// MNetworkIncludeByName "m_clrRender"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkIncludeByName "m_spawnflags"
// MNetworkVarNames "uint32 m_nHorizontalSize"
// MNetworkVarNames "uint32 m_nVerticalSize"
// MNetworkVarNames "uint32 m_nMinDist"
// MNetworkVarNames "uint32 m_nMaxDist"
// MNetworkVarNames "uint32 m_nOuterMaxDist"
// MNetworkVarNames "float32 m_flGlowProxySize"
// MNetworkVarNames "float32 m_flHDRColorScale"
class CLightGlow : public CBaseModelEntity
{
public:
	// MNetworkEnable
	uint32_t m_nHorizontalSize; // 0x748	
	// MNetworkEnable
	uint32_t m_nVerticalSize; // 0x74c	
	// MNetworkEnable
	uint32_t m_nMinDist; // 0x750	
	// MNetworkEnable
	uint32_t m_nMaxDist; // 0x754	
	// MNetworkEnable
	uint32_t m_nOuterMaxDist; // 0x758	
	// MNetworkEnable
	// MNetworkBitCount "6"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "64.000000"
	// MNetworkEncodeFlags "2"
	float m_flGlowProxySize; // 0x75c	
	// MNetworkEnable
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "100.000000"
	float m_flHDRColorScale; // 0x760	
	
	// Datamap fields:
	// Color InputColor; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Cadence_Crescendo_InAOE_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_PostAOEModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_VeilWalkerMovespeed : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_ReinforcingCasings : public CCitadel_Modifier_Intrinsic_Base
{
public:
	ShotID_t m_LastHitShotID; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Upgrade_OverdriveClip_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffEffect; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x738
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_DisarmProcWatcherVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadel_Modifier_Base_Buildup > m_BuildUpModifier; // 0x628	
	CEmbeddedSubclass< CCitadelModifier > m_DisarmProcModifier; // 0x638	
	CEmbeddedSubclass< CCitadelModifier > m_ImmunityModifier; // 0x648	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x658	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_DiminishingSlow : public CCitadelModifier
{
public:
	float m_flSlowPercent; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe98
// Has VTable
// Is Abstract
// 
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkExcludeByName "m_animationController.m_flPlaybackRate"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkIncludeByName "m_spawnflags"
// MNetworkVarNames "DoorState_t m_eDoorState"
// MNetworkVarNames "bool m_bLocked"
// MNetworkVarNames "Vector m_closedPosition"
// MNetworkVarNames "QAngle m_closedAngles"
// MNetworkVarNames "CHandle< CBasePropDoor> m_hMaster"
class CBasePropDoor : public CDynamicProp
{
private:
	[[maybe_unused]] uint8_t __pad0c08[0x10]; // 0xc08
public:
	float m_flAutoReturnDelay; // 0xc18	
private:
	[[maybe_unused]] uint8_t __pad0c1c[0x4]; // 0xc1c
public:
	CUtlVector< CHandle< CBasePropDoor > > m_hDoorList; // 0xc20	
	int32_t m_nHardwareType; // 0xc38	
	bool m_bNeedsHardware; // 0xc3c	
private:
	[[maybe_unused]] uint8_t __pad0c3d[0x3]; // 0xc3d
public:
	// MNetworkEnable
	DoorState_t m_eDoorState; // 0xc40	
	// MNetworkEnable
	bool m_bLocked; // 0xc44	
private:
	[[maybe_unused]] uint8_t __pad0c45[0x3]; // 0xc45
public:
	// MNetworkEnable
	Vector m_closedPosition; // 0xc48	
	// MNetworkEnable
	QAngle m_closedAngles; // 0xc54	
	CHandle< CBaseEntity > m_hBlocker; // 0xc60	
	bool m_bFirstBlocked; // 0xc64	
private:
	[[maybe_unused]] uint8_t __pad0c65[0x3]; // 0xc65
public:
	locksound_t m_ls; // 0xc68	
	bool m_bForceClosed; // 0xc88	
private:
	[[maybe_unused]] uint8_t __pad0c89[0x3]; // 0xc89
public:
	Vector m_vecLatchWorldPosition; // 0xc8c	
	CHandle< CBaseEntity > m_hActivator; // 0xc98	
private:
	[[maybe_unused]] uint8_t __pad0c9c[0xc]; // 0xc9c
public:
	CUtlSymbolLarge m_SoundMoving; // 0xca8	
	CUtlSymbolLarge m_SoundOpen; // 0xcb0	
	CUtlSymbolLarge m_SoundClose; // 0xcb8	
	CUtlSymbolLarge m_SoundLock; // 0xcc0	
	CUtlSymbolLarge m_SoundUnlock; // 0xcc8	
	CUtlSymbolLarge m_SoundLatch; // 0xcd0	
	CUtlSymbolLarge m_SoundPound; // 0xcd8	
	CUtlSymbolLarge m_SoundJiggle; // 0xce0	
	CUtlSymbolLarge m_SoundLockedAnim; // 0xce8	
	int32_t m_numCloseAttempts; // 0xcf0	
	CUtlStringToken m_nPhysicsMaterial; // 0xcf4	
	CUtlSymbolLarge m_SlaveName; // 0xcf8	
	// MNetworkEnable
	CHandle< CBasePropDoor > m_hMaster; // 0xd00	
private:
	[[maybe_unused]] uint8_t __pad0d04[0x4]; // 0xd04
public:
	CEntityIOOutput m_OnBlockedClosing; // 0xd08	
	CEntityIOOutput m_OnBlockedOpening; // 0xd30	
	CEntityIOOutput m_OnUnblockedClosing; // 0xd58	
	CEntityIOOutput m_OnUnblockedOpening; // 0xd80	
	CEntityIOOutput m_OnFullyClosed; // 0xda8	
	CEntityIOOutput m_OnFullyOpen; // 0xdd0	
	CEntityIOOutput m_OnClose; // 0xdf8	
	CEntityIOOutput m_OnOpen; // 0xe20	
	CEntityIOOutput m_OnLockedUse; // 0xe48	
	CEntityIOOutput m_OnAjarOpen; // 0xe70	
	
	// Datamap fields:
	// void m_hSoundMoving; // 0xc9c
	//  m_ls.sLockedSound; // 0xc70
	//  m_ls.sUnlockedSound; // 0xc78
	// void InputOpen; // 0x0
	// CUtlSymbolLarge InputOpenAwayFrom; // 0x0
	// float InputOpenAwayFromActivator; // 0x0
	// void InputClose; // 0x0
	// void InputToggle; // 0x0
	// void InputLock; // 0x0
	// void InputUnlock; // 0x0
	// void InputPlayerOpen; // 0x0
	// void InputPlayerClose; // 0x0
	// void CBasePropDoorDoorOpenMoveDone; // 0x0
	// void CBasePropDoorDoorCloseMoveDone; // 0x0
	// void CBasePropDoorDoorAutoCloseThink; // 0x0
	// void CBasePropDoorDisableAreaPortalThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x980
// Has VTable
class CTriggerTrooperDetector : public CBaseTrigger
{
private:
	[[maybe_unused]] uint8_t __pad0918[0x60]; // 0x918
public:
	float m_flRadius; // 0x978	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_UtilityUpgrade_DebuffImmunity : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
// 
// MNetworkVarNames "int8 m_iCurrentMaxRagdollCount"
class CRagdollManager : public CBaseEntity
{
public:
	// MNetworkEnable
	int8_t m_iCurrentMaxRagdollCount; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	int32_t m_iMaxRagdollCount; // 0x4bc	
	bool m_bSaveImportant; // 0x4c0	
	
	// Datamap fields:
	// int32_t InputSetMaxRagdollCount; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Rutger_CheatDeath_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_ModifierCheatDeathActivated; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierFealtyTargetVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x220
// Has VTable
class CCitadel_Modifier_Arcane_Eater_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CItemMetalSkinVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_MetalSkinModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Upgrade_AmmoScavenger_VData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x700
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ShieldTracker_BaseVData : public CCitadelModifierVData
{
public:
	float m_flShieldImpactEffectDuration; // 0x5f8	
private:
	[[maybe_unused]] uint8_t __pad05fc[0x4]; // 0x5fc
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShieldImpactParticle; // 0x600	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ShieldImpactModifier; // 0x6e0	
	// MPropertyDescription "What type of shield is this."
	EShieldType_t eShieldType; // 0x6f0	
private:
	[[maybe_unused]] uint8_t __pad06f1[0x3]; // 0x6f1
public:
	// MPropertyDescription "How long before the shield can regenerate after taking damage, but not breaking."
	float flCooldownOnDamage; // 0x6f4	
	// MPropertyDescription "How long before the shield can regenerate after breaking (going to 0 shield)"
	float flCooldownOnBreak; // 0x6f8	
	// MPropertyDescription "How long does it take the shield to regenerate from 0 to full health. For partial regen, it's the same rate."
	float flRegenDuration; // 0x6fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x968
// Has VTable
class CTriggerFan : public CBaseTrigger
{
public:
	Vector m_vFanOrigin; // 0x918	
	Vector m_vFanEnd; // 0x924	
	Vector m_vNoise; // 0x930	
	float m_flForce; // 0x93c	
	float m_flRopeForceScale; // 0x940	
	float m_flPlayerForce; // 0x944	
	float m_flRampTime; // 0x948	
	bool m_bFalloff; // 0x94c	
	bool m_bPushPlayer; // 0x94d	
	bool m_bRampDown; // 0x94e	
	bool m_bAddNoise; // 0x94f	
	CountdownTimer m_RampTimer; // 0x950	
	
	// Datamap fields:
	// void CTriggerFanPushThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_RagingCurrentVData : public CCitadel_Modifier_StunnedVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TorrentParticle; // 0x6d8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TorrentModifier; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityThumper2VData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StompParticle; // 0x14e8	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strStompExplosionSound; // 0x15c8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x15d8	
	CEmbeddedSubclass< CCitadelModifier > m_BarbedWireAuraModifier; // 0x15e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc78
// Has VTable
class CCitadel_Ability_ExplosiveBarrel : public CCitadelBaseAbility
{
public:
	CHandle< CCitadelProjectile > m_hBarrel; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityVacuumVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_VacuumAuraModifier; // 0x14e8	
	// MPropertyStartGroup "+Vacuum Properties"
	float m_flAirSpeedMax; // 0x14f8	
	float m_flFallSpeedMax; // 0x14fc	
	float m_flAirDrag; // 0x1500	
	float m_flMaxMovespeed; // 0x1504	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierBullChargingVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChargeParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e0
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilitySprintVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SprintParticle; // 0x14e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strSprintSound; // 0x15c8	
	// MPropertyStartGroup "+Sprint Properties"
	// MPropertyDescription "How longer after taking or dealing damage are we considered to be in combat?"
	float m_flInCombatDuration; // 0x15d8	
	float m_flSprintAccMS; // 0x15dc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_ZiplineSpeed : public CCitadelModifier
{
public:
	int32_t m_iLane; // 0xc8	
	float m_flStartTime; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e8
// Has VTable
class CPathCornerCrash : public CPathCorner
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x830
// Has VTable
class CCitadelHornetStingProjectile : public CCitadelProjectile
{
public:
	int32_t m_iMaxBounces; // 0x800	
	int32_t m_BounceCount; // 0x804	
	bool m_bHitHero; // 0x808	
private:
	[[maybe_unused]] uint8_t __pad0809[0x7]; // 0x809
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecValidBounceTargets; // 0x810	
	float m_flBounceRange; // 0x828	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
// 
// MNetworkVarNames "CHandle< CBaseEntity> m_Handle"
// MNetworkVarNames "bool m_bSendHandle"
class CHandleTest : public CBaseEntity
{
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_Handle; // 0x4b8	
	// MNetworkEnable
	bool m_bSendHandle; // 0x4bc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x500
// Has VTable
class CSoundOpvarSetEntity : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CUtlSymbolLarge m_iszStackName; // 0x4c0	
	CUtlSymbolLarge m_iszOperatorName; // 0x4c8	
	CUtlSymbolLarge m_iszOpvarName; // 0x4d0	
	int32_t m_nOpvarType; // 0x4d8	
	int32_t m_nOpvarIndex; // 0x4dc	
	float m_flOpvarValue; // 0x4e0	
private:
	[[maybe_unused]] uint8_t __pad04e4[0x4]; // 0x4e4
public:
	CUtlSymbolLarge m_OpvarValueString; // 0x4e8	
	bool m_bSetOnSpawn; // 0x4f0	
	
	// Datamap fields:
	// uint64_t InputSetEventGuid; // 0x0
	// CUtlSymbolLarge InputSetStackName; // 0x0
	// CUtlSymbolLarge InputSetOperatorName; // 0x0
	// CUtlSymbolLarge InputSetOpvarName; // 0x0
	// int32_t InputSetOpvarIndex; // 0x0
	// void InputSetOpvar; // 0x0
	// float InputChangeOpvarValue; // 0x0
	// float InputChangeOpvarValueAndSet; // 0x0
	// void m_nGUID; // 0x4b8
	// void m_LastOpvarValueString; // 0x4f8
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb28
// Has VTable
class CAbility_Synth_Affliction : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x70]; // 0xab0
public:
	ParticleIndex_t m_hAOEParticle; // 0xb20	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_Tenacity : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelYamatoBaseVData : public CitadelAbilityVData
{
public:
	float m_flShadowFormSpeed; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc58
// Has VTable
// 
// MNetworkVarNames "Vector m_vecCastStartPos"
// MNetworkVarNames "Vector m_vecDashStartPos"
// MNetworkVarNames "Vector m_vecDashEndPos"
// MNetworkVarNames "QAngle m_angDashStartAng"
// MNetworkVarNames "GameTime_t m_flDashStartTime"
// MNetworkVarNames "GameTime_t m_flGrappleStartTime"
// MNetworkVarNames "GameTime_t m_flGrappleArriveTime"
// MNetworkVarNames "EHANDLE m_hTarget"
// MNetworkVarNames "GameTime_t m_flGrappleShotAttackTime"
// MNetworkVarNames "Vector m_rgTargetPos"
// MNetworkVarNames "GameTime_t m_rgTargetPosTime"
class CCitadel_Ability_TangoTether : public CCitadelBaseAbility
{
public:
	int32_t m_iTargetPosIndex; // 0xab0	
	CHandle< CBaseEntity > m_hLockOnTarget; // 0xab4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vecCastStartPos; // 0xab8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vecDashStartPos; // 0xac4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vecDashEndPos; // 0xad0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	QAngle m_angDashStartAng; // 0xadc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flDashStartTime; // 0xae8	
	// MNetworkEnable
	GameTime_t m_flGrappleStartTime; // 0xaec	
	// MNetworkEnable
	GameTime_t m_flGrappleArriveTime; // 0xaf0	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTarget; // 0xaf4	
	float m_flVelSpring; // 0xaf8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flGrappleShotAttackTime; // 0xafc	
	int32_t m_nTicksNotMoving; // 0xb00	
	Vector m_vecPrevPos; // 0xb04	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	// MNetworkEncoder "coord"
	Vector m_rgTargetPos[20]; // 0xb10	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_rgTargetPosTime[20]; // 0xc00	
	ParticleIndex_t m_nGrappleTravelEffect; // 0xc50	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
// Is Abstract
class CCitadelBaseShivAbility : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_Puddle : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1930
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Bull_LeapVData : public CitadelAbilityVData
{
public:
	CPiecewiseCurve m_CrashSpeedScaleCurve; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BoostModifier; // 0x1528	
	CEmbeddedSubclass< CCitadelModifier > m_CrashModifier; // 0x1538	
	CEmbeddedSubclass< CCitadelModifier > m_ImmunityModifier; // 0x1548	
	CEmbeddedSubclass< CCitadelModifier > m_LandingBonusesModifier; // 0x1558	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TakeOffParticle; // 0x1568	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x1648	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AoEPreviewParticle; // 0x1728	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_nHoverParticle; // 0x1808	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strCrashingSound; // 0x18e8	
	CSoundEventName m_strImpactSound; // 0x18f8	
	// MPropertyStartGroup "GamePlay"
	float m_flStartupTime; // 0x1908	
	float m_flForwardBoostSpeed; // 0x190c	
	float m_flUpBoostSpeed; // 0x1910	
	float m_flBoostTurnRate; // 0x1914	
	float m_flHoverTime; // 0x1918	
	float m_flMinAimAngle; // 0x191c	
	float m_flBoostGain; // 0x1920	
	float m_flBoostTime; // 0x1924	
	float m_flLandingTime; // 0x1928	
	float m_flCrashSpeed; // 0x192c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb38
// Has VTable
// 
// MNetworkVarNames "float m_flAimPitch"
// MNetworkVarNames "float m_flAttackRange"
class CNPC_FieldSentry : public CNPC_SimpleAnimatingAI
{
private:
	[[maybe_unused]] uint8_t __pad0af0[0xc]; // 0xaf0
public:
	// MNetworkEnable
	float m_flAimPitch; // 0xafc	
	GameTime_t m_flNextAttackTime; // 0xb00	
	float m_flAttackCone; // 0xb04	
	float m_flAttackDelay; // 0xb08	
	GameTime_t m_flLastAlertSound; // 0xb0c	
	float m_flTrackingSpeed; // 0xb10	
	float m_flDeployTime; // 0xb14	
private:
	[[maybe_unused]] uint8_t __pad0b18[0xa]; // 0xb18
public:
	bool m_bHadEnemy; // 0xb22	
	bool m_bLockedOn; // 0xb23	
private:
	[[maybe_unused]] uint8_t __pad0b24[0x10]; // 0xb24
public:
	// MNetworkEnable
	float m_flAttackRange; // 0xb34	
	
	// Datamap fields:
	// float m_flLifeTime; // 0xb1c
	// void m_flSpawnTime; // 0xb18
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CNavSpaceInfo : public CPointEntity
{
public:
	bool m_bCreateFlightSpace; // 0x4b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f0
// Has VTable
class CLogicAchievement : public CLogicalEntity
{
public:
	bool m_bDisabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x7]; // 0x4b9
public:
	CUtlSymbolLarge m_iszAchievementEventID; // 0x4c0	
	CEntityIOOutput m_OnFired; // 0x4c8	
	
	// Datamap fields:
	// void InputFireEvent; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void InputToggle; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "CUtlString m_pathString"
class CPathSimple : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x50]; // 0x4b8
public:
	// MNetworkEnable
	CUtlString m_pathString; // 0x508	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe8
// Has VTable
class CCitadel_Modifier_UltCombo_Target : public CCitadel_Modifier_Stunned
{
public:
	QAngle m_angles; // 0xd0	
private:
	[[maybe_unused]] uint8_t __pad00dc[0x4]; // 0xdc
public:
	CCitadelModifier* m_pAttachmentModifier; // 0xe0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_WreckingBall_AutoThrow : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x340
// Has VTable
class CCitadel_Modifier_Bebop_LaserBeam : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x238]; // 0xc8
public:
	GameTime_t m_flSoundStartTime; // 0x300	
private:
	[[maybe_unused]] uint8_t __pad0304[0x4]; // 0x304
public:
	Vector m_vStart; // 0x308	
	Vector m_vEnd; // 0x314	
	Vector m_vPrevEnd; // 0x320	
	float m_flAngleBetweenTrace; // 0x32c	
	float m_flDamagePerTick; // 0x330	
	GameTime_t m_flNextDamageTick; // 0x334	
	int32_t m_nTotalDamage; // 0x338	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Astro_Rifle_SelfVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_WeaponFxParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Kelvin_Frozen : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1590
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Chrono_KineticCarbineVData : public CitadelAbilityVData
{
public:
	float m_flShotTimeScaleLingerDuration; // 0x14e8	
private:
	[[maybe_unused]] uint8_t __pad14ec[0x4]; // 0x14ec
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ChargingModifier; // 0x14f0	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x1500	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraKineticCarbineShotFired; // 0x1510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1550
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_DivinersKevlar_VData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x1530	
	CEmbeddedSubclass< CCitadelModifier > m_PrecastSpiritBuffModifier; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x50
// Has VTable
class CTouchExpansionComponent : public CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0008[0x40]; // 0x8
public:
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CTouchExpansionComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_referenced_but_impl_is_contained(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CTouchExpansionComponent")->GetStaticFields()[1]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa30
// Has VTable
class CItem : public CBaseAnimGraph
{
private:
	[[maybe_unused]] uint8_t __pad0958[0x8]; // 0x958
public:
	CEntityIOOutput m_OnPlayerTouch; // 0x960	
	CEntityIOOutput m_OnPlayerPickup; // 0x988	
	bool m_bActivateWhenAtRest; // 0x9b0	
private:
	[[maybe_unused]] uint8_t __pad09b1[0x7]; // 0x9b1
public:
	CEntityIOOutput m_OnCacheInteraction; // 0x9b8	
	CEntityIOOutput m_OnGlovePulled; // 0x9e0	
	Vector m_vOriginalSpawnOrigin; // 0xa08	
	QAngle m_vOriginalSpawnAngles; // 0xa14	
	bool m_bPhysStartAsleep; // 0xa20	
	
	// Datamap fields:
	// void CItemItemTouch; // 0x0
	// void CItemMaterialize; // 0x0
	// void CItemComeToRest; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb50
// Has VTable
// 
// MNetworkVarNames "bool m_bFlying"
// MNetworkVarNames "bool m_bSummoning"
class CCitadel_Upgrade_MagicCarpet : public CCitadel_Item
{
public:
	GameTime_t m_flFlyingStartTime; // 0xad0	
private:
	[[maybe_unused]] uint8_t __pad0ad4[0x74]; // 0xad4
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bFlying; // 0xb48	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bSummoning; // 0xb49	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8f8
// Has VTable
// 
// MNetworkVarNames "bool m_bEnabled"
// MNetworkVarNames "string_t m_DialogXMLName"
// MNetworkVarNames "string_t m_PanelClassName"
// MNetworkVarNames "string_t m_PanelID"
class CBaseClientUIEntity : public CBaseModelEntity
{
public:
	// MNetworkEnable
	bool m_bEnabled; // 0x748	
private:
	[[maybe_unused]] uint8_t __pad0749[0x7]; // 0x749
public:
	// MNetworkEnable
	CUtlSymbolLarge m_DialogXMLName; // 0x750	
	// MNetworkEnable
	CUtlSymbolLarge m_PanelClassName; // 0x758	
	// MNetworkEnable
	CUtlSymbolLarge m_PanelID; // 0x760	
	CEntityIOOutput m_CustomOutput0; // 0x768	
	CEntityIOOutput m_CustomOutput1; // 0x790	
	CEntityIOOutput m_CustomOutput2; // 0x7b8	
	CEntityIOOutput m_CustomOutput3; // 0x7e0	
	CEntityIOOutput m_CustomOutput4; // 0x808	
	CEntityIOOutput m_CustomOutput5; // 0x830	
	CEntityIOOutput m_CustomOutput6; // 0x858	
	CEntityIOOutput m_CustomOutput7; // 0x880	
	CEntityIOOutput m_CustomOutput8; // 0x8a8	
	CEntityIOOutput m_CustomOutput9; // 0x8d0	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x768
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "HMaterialStrong m_hDecalMaterial"
// MNetworkVarNames "float m_flWidth"
// MNetworkVarNames "float m_flHeight"
// MNetworkVarNames "float m_flDepth"
// MNetworkVarNames "uint32 m_nRenderOrder"
// MNetworkVarNames "bool m_bProjectOnWorld"
// MNetworkVarNames "bool m_bProjectOnCharacters"
// MNetworkVarNames "bool m_bProjectOnWater"
// MNetworkVarNames "float m_flDepthSortBias"
class CEnvDecal : public CBaseModelEntity
{
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_hDecalMaterial; // 0x748	
	// MNetworkEnable
	// MNetworkChangeCallback "OnDecalDimensionsChanged"
	float m_flWidth; // 0x750	
	// MNetworkEnable
	// MNetworkChangeCallback "OnDecalDimensionsChanged"
	float m_flHeight; // 0x754	
	// MNetworkEnable
	// MNetworkChangeCallback "OnDecalDimensionsChanged"
	float m_flDepth; // 0x758	
	// MNetworkEnable
	uint32_t m_nRenderOrder; // 0x75c	
	// MNetworkEnable
	bool m_bProjectOnWorld; // 0x760	
	// MNetworkEnable
	bool m_bProjectOnCharacters; // 0x761	
	// MNetworkEnable
	bool m_bProjectOnWater; // 0x762	
private:
	[[maybe_unused]] uint8_t __pad0763[0x1]; // 0x763
public:
	// MNetworkEnable
	float m_flDepthSortBias; // 0x764	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CInfoTeamSpawn : public CServerOnlyPointEntity
{
public:
	bool m_bIntroSpawn; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	int32_t m_iLaneNum; // 0x4bc	
	CHandle< CBaseEntity > m_hAssignedPlayer; // 0x4c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb68
// Has VTable
class CCitadel_Ability_Shakedown_Target : public CCitadelBaseAbility
{
public:
	CHandle< CCitadel_Ability_Yakuza_Shakedown > m_hShadowdownAbility; // 0xab0	
	Vector m_AimPos; // 0xab4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x3e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Bounce_PadVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_sModelName; // 0x28	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_IdleParticle; // 0x108	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BounceParticle; // 0x1e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DestroyParticle; // 0x2c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strCasterBounceSound; // 0x3a8	
	CSoundEventName m_strOtherHeroBounceSound; // 0x3b8	
	CSoundEventName m_strBarrelBounceSound; // 0x3c8	
	CSoundEventName m_strExpiredSound; // 0x3d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_SmokeBombVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_InvisModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x14f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PurgeParticle; // 0x1508	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_ZiplineMasteryVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_JumpBonusModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x280
// Has VTable
class CCitadel_Modifier_BurstFire_Actuator : public CCitadelModifier
{
public:
	bool m_bLastShotInFlight; // 0xc8	
	bool m_bBonusTracked; // 0xc9	
private:
	[[maybe_unused]] uint8_t __pad00ca[0x2]; // 0xca
public:
	int32_t m_nHitCounter; // 0xcc	
	int32_t m_nTotalBurstFireShots; // 0xd0	
	int32_t m_nInitialzedClipSize; // 0xd4	
	int32_t m_nBonusPitch; // 0xd8	
	bool m_bInitialized; // 0xdc	
private:
	[[maybe_unused]] uint8_t __pad00dd[0x3]; // 0xdd
public:
	int32_t m_nIncreasedBurstShotCount; // 0xe0	
	float m_flIntraBurstCycleTime; // 0xe4	
	float m_flCycleTimePct; // 0xe8	
	float m_flMaxCycleTimeOverride; // 0xec	
	float m_flMaxBurstFireCooldownOverride; // 0xf0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x618
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_StatStealBaseVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_StatStolenDebuffModifier; // 0x5f8	
	CEmbeddedSubclass< CCitadelModifier > m_StatStolenBuffModifier; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Upgrade_Magic_Storm : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e0
// Has VTable
class CCitadelObserver_MovementServices : public CPlayer_MovementServices
{
public:
	float m_flRoamingSpeed; // 0x1d8	
	bool m_bHasFreeCursor; // 0x1dc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x420
// Has VTable
// 
// MNetworkVarNames "CModelState m_modelState"
// MNetworkVarNames "bool m_bIsAnimationEnabled"
// MNetworkVarNames "bool m_bUseParentRenderBounds"
// MNetworkVarNames "CUtlStringToken m_materialGroup"
// MNetworkVarNames "uint8 m_nHitboxSet"
class CSkeletonInstance : public CGameSceneNode
{
private:
	[[maybe_unused]] uint8_t __pad0160[0x10]; // 0x160
public:
	// MNetworkEnable
	// -> m_hModel - 0x210
	// -> m_ModelName - 0x218
	// -> m_bClientClothCreationSuppressed - 0x258
	// -> m_MeshGroupMask - 0x308
	// -> m_nIdealMotionType - 0x38a
	// -> m_nForceLOD - 0x38b
	// -> m_nClothUpdateFlags - 0x38c
	CModelState m_modelState; // 0x170	
	// MNetworkEnable
	bool m_bIsAnimationEnabled; // 0x3a0	
	// MNetworkEnable
	bool m_bUseParentRenderBounds; // 0x3a1	
	// MNetworkDisable
	bool m_bDisableSolidCollisionsForHierarchy; // 0x3a2	
	struct 
	{
		// MNetworkDisable
		uint8_t m_bDirtyMotionType: 1; 		
		// MNetworkDisable
		uint8_t m_bIsGeneratingLatchedParentSpaceState: 1; 		
		uint16_t __pad1: 14;
	}; // 16 bits
	// MNetworkEnable
	// MNetworkChangeCallback "skeletonMaterialGroupChanged"
	CUtlStringToken m_materialGroup; // 0x3a4	
	// MNetworkEnable
	uint8_t m_nHitboxSet; // 0x3a8	
	
	// Datamap fields:
	// Vector velocity; // 0x7fffffff
	// Vector rotationAxis; // 0x7fffffff
	// float rotationSpeed; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CModifier_UnrestrictedMotorMovement : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x650
// Has VTable
class CLogicAuto : public CBaseEntity
{
public:
	CEntityIOOutput m_OnMapSpawn; // 0x4b8	
	CEntityIOOutput m_OnDemoMapSpawn; // 0x4e0	
	CEntityIOOutput m_OnNewGame; // 0x508	
	CEntityIOOutput m_OnLoadGame; // 0x530	
	CEntityIOOutput m_OnMapTransition; // 0x558	
	CEntityIOOutput m_OnBackgroundMap; // 0x580	
	CEntityIOOutput m_OnMultiNewMap; // 0x5a8	
	CEntityIOOutput m_OnMultiNewRound; // 0x5d0	
	CEntityIOOutput m_OnVREnabled; // 0x5f8	
	CEntityIOOutput m_OnVRNotEnabled; // 0x620	
	CUtlSymbolLarge m_globalstate; // 0x648	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x118
// Has VTable
class CCitadel_Modifier_TechCleave : public CCitadelModifier
{
public:
	CUtlVector< CCitadel_Modifier_TechCleave::DamageTaken_t > m_vDamageTakenEvents; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1350
// Has VTable
// 
// MGetKV3ClassDefaults
// MVDataRoot
// MVDataAssociatedFile
// MVDataOverlayType "1"
struct CitadelHeroData_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	CUtlVector< HeroAnimGraphDefaultValueOverride_t > m_vecAnimGraphDefaultValueOverrides; // 0x8	
private:
	[[maybe_unused]] uint8_t __pad0020[0x8]; // 0x20
public:
	HeroID_t m_HeroID; // 0x28	
private:
	[[maybe_unused]] uint8_t __pad002c[0x4]; // 0x2c
public:
	// MPropertyStartGroup "Screen Space Particle FX"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_hDamageTakenParticle; // 0x30	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_hGroundDamageTakenParticle; // 0x110	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_hDeathParticle; // 0x1f0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_hLowHealthParticle; // 0x2d0	
	// MPropertyStartGroup "Visuals"
	CPanoramaImageName m_strSelectionImage; // 0x3b0	
	CPanoramaImageName m_strIconImageSmall; // 0x3c0	
	CPanoramaImageName m_strIconHeroCard; // 0x3d0	
	CPanoramaImageName m_strMinimapImage; // 0x3e0	
	CPanoramaImageName m_strTopBarImage; // 0x3f0	
	CPanoramaImageName m_strTopBarVertical; // 0x400	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_hRespawnParticle; // 0x410	
	Color m_colorUI; // 0x4f0	
private:
	[[maybe_unused]] uint8_t __pad04f4[0x4]; // 0x4f4
public:
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_hAmbientParticle; // 0x4f8	
	CUtlVector< AmbientParticleSettings_t > m_vecAmbientParticleSettings; // 0x5d8	
	Color m_colorGlowFriendly; // 0x5f0	
	Color m_colorGlowEnemy; // 0x5f4	
	Color m_colorGlowTeam1; // 0x5f8	
	Color m_colorGlowTeam2; // 0x5fc	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_strModelName; // 0x600	
	int32_t m_nModelSkin; // 0x6e0	
private:
	[[maybe_unused]] uint8_t __pad06e4[0x4]; // 0x6e4
public:
	// MPropertyDescription "If specified, this model will be used in steam public universe only."
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_strPublicModelName; // 0x6e8	
	// MPropertyDescription "If specified, this model will be used if convar citadel_use_wip_models is true."
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_strWIPModelName; // 0x7c8	
	// MPropertyStartGroup "UI"
	// MPropertyDescription "AnimGraph for UI"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIAnimGraphModelBinding > > m_strUIAnimGraph; // 0x8a8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIAnimGraphModelBinding > > m_strUIShopAnimGraph; // 0x988	
	// MPropertyAttributeEditor "AssetBrowse( vmap )"
	CUtlString m_strUIPortraitMap; // 0xa68	
	// MPropertyAttributeEditor "AssetBrowse( vmap )"
	CUtlString m_strUIShoppingMap; // 0xa70	
	HeroStatsUI_t m_heroStatsUI; // 0xa78	
	HeroStatsDisplay_t m_heroStatsDisplay; // 0xaa8	
	CitadelStatsDisplay_t m_ShopStatDisplay; // 0xb38	
	// MPropertyStartGroup "Zipline Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceAwaitingTether; // 0xbe0	
	CitadelCameraOperationsSequence_t m_cameraSequenceLatched; // 0xc60	
	CitadelCameraOperationsSequence_t m_cameraSequenceAttached; // 0xce0	
	CitadelCameraOperationsSequence_t m_cameraSequenceClear; // 0xd60	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strDeathSound; // 0xde0	
	CSoundEventName m_strLastHitSound; // 0xdf0	
	CSoundEventName m_strRosterSelectedSound; // 0xe00	
	CSoundEventName m_strRosterRemovedSound; // 0xe10	
	CSoundEventName m_strFootstepSoundEventDefault; // 0xe20	
	CSoundEventName m_strLowHealthSound; // 0xe30	
	CSoundEventName m_strHeroSpecificLowHealthSound; // 0xe40	
	CSoundEventName m_strMovementLoop; // 0xe50	
	// MPropertyDescription "Teammate footstep sounds are relative to whoever we're spectating."
	CFootstepTableHandle m_hFootstepSounds; // 0xe60	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCVSoundEventScriptList > > m_hGameSoundEventScript; // 0xe68	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCVSoundEventScriptList > > m_hVOEventScript; // 0xf48	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCVSoundEventScriptList > > m_hGeneratedVOEventScript; // 0x1028	
	float m_flFootstepSoundTravelDistanceMeters; // 0x1108	
	float m_flStealthSpeedMetersPerSecond; // 0x110c	
	float m_flStepSoundTime; // 0x1110	
	float m_flStepSoundTimeSprinting; // 0x1114	
	// MPropertyStartGroup
	float m_flCollisionRadius; // 0x1118	
	float m_flCollisionHeight; // 0x111c	
	float m_flStepHeight; // 0x1120	
	bool m_bInDevelopment; // 0x1124	
	bool m_bAssignedPlayersOnly; // 0x1125	
	bool m_bBotSelectable; // 0x1126	
	bool m_bNewPlayerRecommended; // 0x1127	
	bool m_bLaneTestingRecommended; // 0x1128	
	bool m_bNeedsTesting; // 0x1129	
	bool m_bLimitedTesting; // 0x112a	
	bool m_bDisabled; // 0x112b	
	bool m_bPlayerSelectable; // 0x112c	
private:
	[[maybe_unused]] uint8_t __pad112d[0x3]; // 0x112d
public:
	int32_t m_nComplexity; // 0x1130	
	int32_t m_nReadability; // 0x1134	
	// MPropertyStartGroup "Low Health Settings"
	// MPropertyDescription "Percentage of health to be considered low health"
	// MPropertyAttributeRange "0 1"
	float m_flMinLowHealthPercentage; // 0x1138	
	// MPropertyDescription "Percentage of health to be considered low health when you have high max health."
	// MPropertyAttributeRange "0 1"
	float m_flMaxLowHealthPercentage; // 0x113c	
	// MPropertyDescription "Percentage of health to be considered mid health"
	// MPropertyAttributeRange "0 1"
	float m_flMinMidHealthPercentage; // 0x1140	
	// MPropertyDescription "Percentage of health to be considered mid health when you have high max health."
	// MPropertyAttributeRange "0 1"
	float m_flMaxMidHealthPercentage; // 0x1144	
	// MPropertyDescription "Min Max Health for Remapped Value"
	float m_flMinHealthForThreshold; // 0x1148	
	// MPropertyDescription "Max Max Health for remapped value"
	float m_flMaxHealthForThreshold; // 0x114c	
	// MPropertyStartGroup
	CUtlOrderedMap< EStatsType, float32 > m_mapStartingStats; // 0x1150	
	CUtlOrderedMap< EStatsType, HeroScalingStat_t > m_mapScalingStats; // 0x1178	
private:
	[[maybe_unused]] uint8_t __pad11a0[0x18]; // 0x11a0
public:
	CUtlOrderedMap< EAbilitySlots_t, CSubclassName< 4 > > m_mapBoundAbilities; // 0x11b8	
	CUtlOrderedMap< EAbilitySlots_t, CSubclassName< 4 > > m_mapWIPAbilities; // 0x11e0	
	CUtlOrderedMap< EItemSlotTypes_t, ItemSlotInfo_t > m_mapItemSlotInfo; // 0x1208	
	CUtlVector< CSubclassName< 4 > > m_RecommendedUpgrades; // 0x1230	
private:
	[[maybe_unused]] uint8_t __pad1248[0x70]; // 0x1248
public:
	EAbilityResourceType m_eAbilityResourceType; // 0x12b8	
private:
	[[maybe_unused]] uint8_t __pad12bc[0x1c]; // 0x12bc
public:
	CUtlOrderedMap< EModifierValue, float32 > m_mapStandardLevelUpUpgrades; // 0x12d8	
	CUtlOrderedMap< int32, HeroLevel_t > m_mapLevelInfo; // 0x1300	
	CUtlOrderedMap< EItemSlotTypes_t, CUtlVector< HeroPurchaseBonus_t > > m_mapPurchaseBonuses; // 0x1328	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x60
// Has VTable
class CAI_MotorTransition : public CAI_Component
{
private:
	[[maybe_unused]] uint8_t __pad0040[0x8]; // 0x40
public:
	AIMotorTransitionState_t m_nTransitionState; // 0x48	
	Vector m_vNavLinkStartPos; // 0x4c	
	GameTime_t m_flNavLinkFaceStartTime; // 0x58	
	bool m_bTransitionAnimgraphHasTicked; // 0x5c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x590
// Has VTable
class CSoundOpvarSetOBBWindEntity : public CSoundOpvarSetPointBase
{
public:
	Vector m_vMins; // 0x550	
	Vector m_vMaxs; // 0x55c	
	Vector m_vDistanceMins; // 0x568	
	Vector m_vDistanceMaxs; // 0x574	
	float m_flWindMin; // 0x580	
	float m_flWindMax; // 0x584	
	float m_flWindMapMin; // 0x588	
	float m_flWindMapMax; // 0x58c	
	
	// Datamap fields:
	// void CSoundOpvarSetOBBWindEntitySetOpvarThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa8
// Has VTable
class CAI_Scheduler : public CAI_Component
{
public:
	// -> m_nCurTask - 0x40
	// -> m_nTaskStatus - 0x44
	// -> m_flTimeStarted - 0x48
	// -> m_flTimeCurTaskStarted - 0x4c
	// -> m_taskFailureCode - 0x50
	// -> m_nTaskInterrupt - 0x58
	// -> m_bScheduleWasInterrupted - 0x5c
	AIScheduleState_t m_ScheduleState; // 0x40	
private:
	[[maybe_unused]] uint8_t __pad0060[0x8]; // 0x60
public:
	CUtlSymbolLarge m_failSchedule; // 0x68	
	CUtlSymbolLarge m_translatedSchedule; // 0x70	
	CUtlSymbolLarge m_untranslatedSchedule; // 0x78	
private:
	[[maybe_unused]] uint8_t __pad0080[0x20]; // 0x80
public:
	CUtlString m_sInterruptText; // 0xa0	
	
	// Static fields:
	static int32_t &Get_ms_nTasksRun(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_Scheduler")->GetStaticFields()[0]->m_pInstance);};
	
	// Datamap fields:
	// void m_pSchedule; // 0x60
	// void m_pFailedSchedule; // 0x80
	// void m_pInterruptedSchedule; // 0x98
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CLightDirectionalEntity : public CLightEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x728
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierVacuumAuraVData : public CCitadelModifierAuraVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FinishParticle; // 0x638	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strAmbientLoopingLocalPlayerSound; // 0x718	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f8
// Has VTable
class CLogicNPCCounter : public CBaseEntity
{
public:
	CEntityIOOutput m_OnMinCountAll; // 0x4b8	
	CEntityIOOutput m_OnMaxCountAll; // 0x4e0	
	CEntityOutputTemplate< float32 > m_OnFactorAll; // 0x508	
	CEntityOutputTemplate< float32 > m_OnMinPlayerDistAll; // 0x530	
	CEntityIOOutput m_OnMinCount_1; // 0x558	
	CEntityIOOutput m_OnMaxCount_1; // 0x580	
	CEntityOutputTemplate< float32 > m_OnFactor_1; // 0x5a8	
	CEntityOutputTemplate< float32 > m_OnMinPlayerDist_1; // 0x5d0	
	CEntityIOOutput m_OnMinCount_2; // 0x5f8	
	CEntityIOOutput m_OnMaxCount_2; // 0x620	
	CEntityOutputTemplate< float32 > m_OnFactor_2; // 0x648	
	CEntityOutputTemplate< float32 > m_OnMinPlayerDist_2; // 0x670	
	CEntityIOOutput m_OnMinCount_3; // 0x698	
	CEntityIOOutput m_OnMaxCount_3; // 0x6c0	
	CEntityOutputTemplate< float32 > m_OnFactor_3; // 0x6e8	
	CEntityOutputTemplate< float32 > m_OnMinPlayerDist_3; // 0x710	
	CEntityHandle m_hSource; // 0x738	
private:
	[[maybe_unused]] uint8_t __pad073c[0x4]; // 0x73c
public:
	CUtlSymbolLarge m_iszSourceEntityName; // 0x740	
	float m_flDistanceMax; // 0x748	
	bool m_bDisabled; // 0x74c	
private:
	[[maybe_unused]] uint8_t __pad074d[0x3]; // 0x74d
public:
	int32_t m_nMinCountAll; // 0x750	
	int32_t m_nMaxCountAll; // 0x754	
	int32_t m_nMinFactorAll; // 0x758	
	int32_t m_nMaxFactorAll; // 0x75c	
private:
	[[maybe_unused]] uint8_t __pad0760[0x8]; // 0x760
public:
	CUtlSymbolLarge m_iszNPCClassname_1; // 0x768	
	int32_t m_nNPCState_1; // 0x770	
	bool m_bInvertState_1; // 0x774	
private:
	[[maybe_unused]] uint8_t __pad0775[0x3]; // 0x775
public:
	int32_t m_nMinCount_1; // 0x778	
	int32_t m_nMaxCount_1; // 0x77c	
	int32_t m_nMinFactor_1; // 0x780	
	int32_t m_nMaxFactor_1; // 0x784	
private:
	[[maybe_unused]] uint8_t __pad0788[0x4]; // 0x788
public:
	float m_flDefaultDist_1; // 0x78c	
	CUtlSymbolLarge m_iszNPCClassname_2; // 0x790	
	int32_t m_nNPCState_2; // 0x798	
	bool m_bInvertState_2; // 0x79c	
private:
	[[maybe_unused]] uint8_t __pad079d[0x3]; // 0x79d
public:
	int32_t m_nMinCount_2; // 0x7a0	
	int32_t m_nMaxCount_2; // 0x7a4	
	int32_t m_nMinFactor_2; // 0x7a8	
	int32_t m_nMaxFactor_2; // 0x7ac	
private:
	[[maybe_unused]] uint8_t __pad07b0[0x4]; // 0x7b0
public:
	float m_flDefaultDist_2; // 0x7b4	
	CUtlSymbolLarge m_iszNPCClassname_3; // 0x7b8	
	int32_t m_nNPCState_3; // 0x7c0	
	bool m_bInvertState_3; // 0x7c4	
private:
	[[maybe_unused]] uint8_t __pad07c5[0x3]; // 0x7c5
public:
	int32_t m_nMinCount_3; // 0x7c8	
	int32_t m_nMaxCount_3; // 0x7cc	
	int32_t m_nMinFactor_3; // 0x7d0	
	int32_t m_nMaxFactor_3; // 0x7d4	
private:
	[[maybe_unused]] uint8_t __pad07d8[0x4]; // 0x7d8
public:
	float m_flDefaultDist_3; // 0x7dc	
	
	// Datamap fields:
	// CUtlSymbolLarge InputSetSourceEntity; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void CLogicNPCCounterSetNPCCounterThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc00
// Has VTable
class CAbility_Mirage_Tornado : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierRiotProtocolEnemyDebuffVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x898
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Wrecker_UltimateThrowEnemyVData : public CCitadel_Modifier_StunnedVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EnemyHeroStasisEffect; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EnemyHeroGrabEffect; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x808
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ExplosiveBulletsVData : public CCitadel_Modifier_BaseBulletPreRollProcVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x718	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplodeSound; // 0x7f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f8
// Has VTable
class CFuncPlat : public CBasePlatTrain
{
public:
	CUtlSymbolLarge m_sNoise; // 0x7f0	
	
	// Datamap fields:
	// void CFuncPlatPlatUse; // 0x0
	// void CFuncPlatCallGoDown; // 0x0
	// void CFuncPlatCallHitTop; // 0x0
	// void CFuncPlatCallHitBottom; // 0x0
	// void InputToggle; // 0x0
	// void InputGoUp; // 0x0
	// void InputGoDown; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CRuleBrushEntity : public CRuleEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_Item_Refresher : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x758
// Has VTable
class CRulePointEntity : public CRuleEntity
{
public:
	int32_t m_Score; // 0x750	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CMessageEntity : public CPointEntity
{
public:
	int32_t m_radius; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	CUtlSymbolLarge m_messageText; // 0x4c0	
	bool m_drawText; // 0x4c8	
	bool m_bDeveloperOnly; // 0x4c9	
	bool m_bEnabled; // 0x4ca	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// CUtlSymbolLarge InputSetMessage; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_KnockbackAura : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelItemPickupRejuvVData : public CEntitySubclassVDataBase
{
public:
	CSubclassName< 4 > m_AbilityProjectile; // 0x28	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_RejuvModifier; // 0x38	
	CEmbeddedSubclass< CCitadelModifier > m_PunchPickupModifier; // 0x48	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_IsDroppingParticle; // 0x58	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x538
// Has VTable
class CLogicAutoCitadel : public CBaseEntity
{
public:
	CEntityIOOutput m_OnWaitingForPlayersToJoin; // 0x4b8	
	CEntityIOOutput m_OnPreGameWait; // 0x4e0	
	CEntityIOOutput m_OnGameInProgress; // 0x508	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CInfoHeroTestingPoint : public CPointEntity
{
public:
	int32_t m_ePointType; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	CUtlSymbolLarge m_sMoveTarget; // 0x4c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x920
// Has VTable
class CCitadelDevTrigger : public CBaseTrigger
{
public:
	DevTriggerType_t m_eDevTriggerType; // 0x918	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_BullCharging : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc40
// Has VTable
class CCitadel_Ability_LightningBall : public CCitadelBaseAbility
{
public:
	float m_flInitialSpeed; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Passive_CloakVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_InvisModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_InShopTunnel : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CPlayer_FlashlightServices : public CPlayerPawnComponent
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
// 
// MNetworkIncludeByName "m_iTeamNum"
// MNetworkVarNames "int m_iLane"
class CAssignedLaneParticle : public CBaseModelEntity
{
public:
	// MNetworkEnable
	int32_t m_iLane; // 0x748	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
class CServerOnlyModelEntity : public CBaseModelEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x310
// Has VTable
class CCitadel_Modifier_IcePath : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x230]; // 0xc8
public:
	int32_t m_iShardCount; // 0x2f8	
	Vector m_vLastShardPosition; // 0x2fc	
	CHandle< CBaseModelEntity > m_hSurfShard; // 0x308	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb98
// Has VTable
class CCitadel_Ability_ChronoSwap : public CCitadelBaseAbility
{
public:
	bool m_bHitTarget; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityCardTossVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SummonedCard; // 0x15c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strCardTossSound; // 0x16a8	
	CSoundEventName m_strCardSummonSound; // 0x16b8	
	// MPropertyStartGroup "+Card Toss Properties"
	float m_flSummonedCardStartSideOffset; // 0x16c8	
	float m_flSummonedCardSideOffsetStep; // 0x16cc	
	float m_flSummonedCardForwardOffset; // 0x16d0	
	float m_flSummonedCardVerticalOffset; // 0x16d4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_TriggerTower : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
// 
// MNetworkVarNames "int32 m_nFlameModelIndex"
// MNetworkVarNames "int32 m_nFlameFromAboveModelIndex"
class CFireSmoke : public CBaseFire
{
public:
	// MNetworkEnable
	int32_t m_nFlameModelIndex; // 0x4c8	
	// MNetworkEnable
	int32_t m_nFlameFromAboveModelIndex; // 0x4cc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa78
// Has VTable
// 
// MNetworkExcludeByUserGroup "LocalPlayerExclusive"
// MNetworkVarNames "CHandle< CEconWearable > m_hMyWearables"
class CBaseCombatCharacter : public CBaseFlex
{
public:
	bool m_bForceServerRagdoll; // 0x9e8	
private:
	[[maybe_unused]] uint8_t __pad09e9[0x7]; // 0x9e9
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< CHandle< CEconWearable > > m_hMyWearables; // 0x9f0	
	float m_impactEnergyScale; // 0xa08	
	HitGroup_t m_LastHitGroup; // 0xa0c	
	bool m_bApplyStressDamage; // 0xa10	
private:
	[[maybe_unused]] uint8_t __pad0a11[0x47]; // 0xa11
public:
	int32_t m_iDamageCount; // 0xa58	
private:
	[[maybe_unused]] uint8_t __pad0a5c[0x4]; // 0xa5c
public:
	CUtlVector< RelationshipOverride_t >* m_pVecRelationships; // 0xa60	
	CUtlSymbolLarge m_strRelationships; // 0xa68	
	Hull_t m_eHull; // 0xa70	
	uint32_t m_nNavHullIdx; // 0xa74	
	
	// Static fields:
	static int32_t &Get_sm_lastInteraction(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBaseCombatCharacter")->GetStaticFields()[0]->m_pInstance);};
	
	// Datamap fields:
	// void InputBecomeServerRagdoll; // 0x0
	// CUtlSymbolLarge InputSetRelationship; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x20
class CUnreachableTargetList
{
public:
	CUtlVector< UnreachableTarget_t > m_vecTargets; // 0x0	
	
	// Datamap fields:
	// void m_pOuter; // 0x18
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x958
// Has VTable
class CProjectile_Mirage_Tornado : public CCitadelProjectile
{
public:
	int32_t m_cTicksNoMovement; // 0x800	
	CHandle< CAbility_Mirage_Tornado > m_TornadoAbility; // 0x804	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_NeutralAgro : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CModifier_Mirage_Tornado_Aura_Apply : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Base : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierFlyingStrikeTargetVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GrappleRopeParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x908
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Nano_PredatoryStatueVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AOEParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EnabledParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DrainParticle; // 0x7b8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strEnabledSound; // 0x898	
	CSoundEventName m_strEnabledLoopSound; // 0x8a8	
	CSoundEventName m_strDisabledSound; // 0x8b8	
	CSoundEventName m_strLaserHitSound; // 0x8c8	
	CSoundEventName m_strLaserStartSound; // 0x8d8	
	CSoundEventName m_strLaserLoopSound; // 0x8e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TargetModifier; // 0x8f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x238
// Has VTable
class CCitadel_Modifier_SleepBomb : public CCitadelModifier
{
public:
	float m_flGoalHeight; // 0xc8	
	float m_flFallRate; // 0xcc	
	ParticleIndex_t m_nBombEffect; // 0xd0	
	CHandle< CBaseEntity > m_eIgnoreTarget; // 0xd4	
private:
	[[maybe_unused]] uint8_t __pad00d8[0x150]; // 0xd8
public:
	Vector m_vecOrigin; // 0x228	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierStackingDamageVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc38
// Has VTable
class CCitadel_Ability_BloodBomb : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierStimPakVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x250
// Has VTable
class CCitadel_Modifier_MagicShock_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xac8
// Has VTable
// 
// MNetworkVarNames "bool m_bSprinting"
// MNetworkVarNames "GameTime_t m_flInCombatStartTime"
// MNetworkVarNames "GameTime_t m_flInCombatEndTime"
// MNetworkVarNames "GameTime_t m_flSprintStartTime"
class CCitadel_Ability_Sprint : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_nSprintParticle; // 0xab0	
	// MNetworkEnable
	// MNetworkChangeCallback "OnSprintingChanged"
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bSprinting; // 0xab4	
private:
	[[maybe_unused]] uint8_t __pad0ab5[0x3]; // 0xab5
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flInCombatStartTime; // 0xab8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flInCombatEndTime; // 0xabc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flSprintStartTime; // 0xac0	
	bool m_bInCombat; // 0xac4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_DamageResistance : public CCitadelModifier
{
public:
	float m_flShieldHealth; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Healing_Disabled : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xba0
// Has VTable
class CItemGeneric : public CItem
{
private:
	[[maybe_unused]] uint8_t __pad0a30[0x8]; // 0xa30
public:
	bool m_bHasTriggerRadius; // 0xa38	
	bool m_bHasPickupRadius; // 0xa39	
private:
	[[maybe_unused]] uint8_t __pad0a3a[0x2]; // 0xa3a
public:
	float m_flPickupRadiusSqr; // 0xa3c	
	float m_flTriggerRadiusSqr; // 0xa40	
	GameTime_t m_flLastPickupCheck; // 0xa44	
	bool m_bPlayerCounterListenerAdded; // 0xa48	
	bool m_bPlayerInTriggerRadius; // 0xa49	
private:
	[[maybe_unused]] uint8_t __pad0a4a[0x6]; // 0xa4a
public:
	CStrongHandle< InfoForResourceTypeIParticleSystemDefinition > m_hSpawnParticleEffect; // 0xa50	
	CUtlSymbolLarge m_pAmbientSoundEffect; // 0xa58	
	bool m_bAutoStartAmbientSound; // 0xa60	
private:
	[[maybe_unused]] uint8_t __pad0a61[0x7]; // 0xa61
public:
	CUtlSymbolLarge m_pSpawnScriptFunction; // 0xa68	
	CStrongHandle< InfoForResourceTypeIParticleSystemDefinition > m_hPickupParticleEffect; // 0xa70	
	CUtlSymbolLarge m_pPickupSoundEffect; // 0xa78	
	CUtlSymbolLarge m_pPickupScriptFunction; // 0xa80	
	CStrongHandle< InfoForResourceTypeIParticleSystemDefinition > m_hTimeoutParticleEffect; // 0xa88	
	CUtlSymbolLarge m_pTimeoutSoundEffect; // 0xa90	
	CUtlSymbolLarge m_pTimeoutScriptFunction; // 0xa98	
	CUtlSymbolLarge m_pPickupFilterName; // 0xaa0	
	CHandle< CBaseFilter > m_hPickupFilter; // 0xaa8	
private:
	[[maybe_unused]] uint8_t __pad0aac[0x4]; // 0xaac
public:
	CEntityIOOutput m_OnPickup; // 0xab0	
	CEntityIOOutput m_OnTimeout; // 0xad8	
	CEntityIOOutput m_OnTriggerStartTouch; // 0xb00	
	CEntityIOOutput m_OnTriggerTouch; // 0xb28	
	CEntityIOOutput m_OnTriggerEndTouch; // 0xb50	
	CUtlSymbolLarge m_pAllowPickupScriptFunction; // 0xb78	
	float m_flPickupRadius; // 0xb80	
	float m_flTriggerRadius; // 0xb84	
	CUtlSymbolLarge m_pTriggerSoundEffect; // 0xb88	
	bool m_bGlowWhenInTrigger; // 0xb90	
	Color m_glowColor; // 0xb91	
	bool m_bUseable; // 0xb95	
private:
	[[maybe_unused]] uint8_t __pad0b96[0x2]; // 0xb96
public:
	CHandle< CItemGenericTriggerHelper > m_hTriggerHelper; // 0xb98	
	
	// Datamap fields:
	// void CItemGenericItemGenericTouch; // 0x0
	// void InputStartAmbientSound; // 0x0
	// void InputStopAmbientSound; // 0x0
	// void InputToggleAmbientSound; // 0x0
	// void m_hAmbientSound; // 0xa30
	// float auto_remove_timeout; // 0x7fffffff
	// float drag_override; // 0x7fffffff
	// float damping_override; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x948
// Has VTable
class CTriggerActiveWeaponDetect : public CBaseTrigger
{
public:
	CEntityIOOutput m_OnTouchedActiveWeapon; // 0x918	
	CUtlSymbolLarge m_iszWeaponClassName; // 0x940	
	
	// Datamap fields:
	// void CTriggerActiveWeaponDetectActiveWeaponThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_ArmorUpgrade_DebuffReducer : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Empty : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CGameModifier_FireUserEntityIO : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x678
// Has VTable
class CEnvMicrophone : public CPointEntity
{
public:
	bool m_bDisabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	CHandle< CBaseEntity > m_hMeasureTarget; // 0x4bc	
	SoundTypes_t m_nSoundType; // 0x4c0	
	SoundFlags_t m_nSoundFlags; // 0x4c2	
	float m_flSensitivity; // 0x4c4	
	float m_flSmoothFactor; // 0x4c8	
	float m_flMaxRange; // 0x4cc	
	CUtlSymbolLarge m_iszSpeakerName; // 0x4d0	
	CHandle< CBaseEntity > m_hSpeaker; // 0x4d8	
	bool m_bAvoidFeedback; // 0x4dc	
private:
	[[maybe_unused]] uint8_t __pad04dd[0x3]; // 0x4dd
public:
	int32_t m_iSpeakerDSPPreset; // 0x4e0	
private:
	[[maybe_unused]] uint8_t __pad04e4[0x4]; // 0x4e4
public:
	CUtlSymbolLarge m_iszListenFilter; // 0x4e8	
	CHandle< CBaseFilter > m_hListenFilter; // 0x4f0	
private:
	[[maybe_unused]] uint8_t __pad04f4[0x4]; // 0x4f4
public:
	CEntityOutputTemplate< float32 > m_SoundLevel; // 0x4f8	
	CEntityIOOutput m_OnRoutedSound; // 0x520	
	CEntityIOOutput m_OnHeardSound; // 0x548	
	char m_szLastSound[256]; // 0x570	
	int32_t m_iLastRoutedFrame; // 0x670	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// CUtlSymbolLarge InputSetSpeakerName; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5b8
// Has VTable
class CInfoSpawnGroupLoadUnload : public CLogicalEntity
{
public:
	CEntityIOOutput m_OnSpawnGroupLoadStarted; // 0x4b8	
	CEntityIOOutput m_OnSpawnGroupLoadFinished; // 0x4e0	
	CEntityIOOutput m_OnSpawnGroupUnloadStarted; // 0x508	
	CEntityIOOutput m_OnSpawnGroupUnloadFinished; // 0x530	
	CUtlSymbolLarge m_iszSpawnGroupName; // 0x558	
	CUtlSymbolLarge m_iszSpawnGroupFilterName; // 0x560	
	CUtlSymbolLarge m_iszLandmarkName; // 0x568	
	CUtlString m_sFixedSpawnGroupName; // 0x570	
	float m_flTimeoutInterval; // 0x578	
	bool m_bStreamingStarted; // 0x57c	
	bool m_bUnloadingStarted; // 0x57d	
	
	// Datamap fields:
	// void CInfoSpawnGroupLoadUnloadSpawnGroupLoadingThink; // 0x0
	// void CInfoSpawnGroupLoadUnloadSpawnGroupUnloadingThink; // 0x0
	// void InputStartSpawnGroupLoad; // 0x0
	// void InputActivateSpawnGroup; // 0x0
	// void InputStartSpawnGroupUnload; // 0x0
	// CUtlSymbolLarge InputSetSpawnGroup; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x740
// Has VTable
// 
// MNetworkIncludeByName "m_pEntity"
// MNetworkIncludeByName "m_flSimulationTime"
// MNetworkIncludeByName "m_flCreateTime"
// MNetworkIncludeByName "m_iTeamNum"
// MNetworkIncludeByName "m_nNextThinkTick"
// MNetworkIncludeByName "m_fFlags"
// MNetworkUserGroupProxy "CBasePlayerController"
// MNetworkUserGroupProxy "CBasePlayerController"
// MNetworkIncludeByUserGroup "LocalPlayerExclusive"
// MNetworkVarNames "uint32 m_nTickBase"
// MNetworkVarNames "CHandle< CBasePlayerPawn> m_hPawn"
// MNetworkVarNames "bool m_bKnownTeamMismatch"
// MNetworkVarNames "PlayerConnectedState m_iConnected"
// MNetworkVarNames "char m_iszPlayerName"
// MNetworkVarNames "uint64 m_steamID"
// MNetworkVarNames "uint32 m_iDesiredFOV"
class CBasePlayerController : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	uint64_t m_nInButtonsWhichAreToggles; // 0x4c0	
	// MNetworkEnable
	// MNetworkPriority "1"
	// MNetworkUserGroup "LocalPlayerExclusive"
	uint32_t m_nTickBase; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04cc[0x2c]; // 0x4cc
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnPawnChanged"
	CHandle< CBasePlayerPawn > m_hPawn; // 0x4f8	
	// MNetworkEnable
	bool m_bKnownTeamMismatch; // 0x4fc	
private:
	[[maybe_unused]] uint8_t __pad04fd[0x3]; // 0x4fd
public:
	CSplitScreenSlot m_nSplitScreenSlot; // 0x500	
	CHandle< CBasePlayerController > m_hSplitOwner; // 0x504	
	CUtlVector< CHandle< CBasePlayerController > > m_hSplitScreenPlayers; // 0x508	
	bool m_bIsHLTV; // 0x520	
private:
	[[maybe_unused]] uint8_t __pad0521[0x3]; // 0x521
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnConnectionStateChanged"
	PlayerConnectedState m_iConnected; // 0x524	
	// MNetworkEnable
	// MNetworkChangeCallback "OnPlayerControllerNameChanged"
	char m_iszPlayerName[128]; // 0x528	
	CUtlString m_szNetworkIDString; // 0x5a8	
	float m_fLerpTime; // 0x5b0	
	bool m_bLagCompensation; // 0x5b4	
	bool m_bPredict; // 0x5b5	
	bool m_bAutoKickDisabled; // 0x5b6	
	bool m_bIsLowViolence; // 0x5b7	
	bool m_bGamePaused; // 0x5b8	
private:
	[[maybe_unused]] uint8_t __pad05b9[0x12f]; // 0x5b9
public:
	ChatIgnoreType_t m_iIgnoreGlobalChat; // 0x6e8	
	float m_flLastPlayerTalkTime; // 0x6ec	
	float m_flLastEntitySteadyState; // 0x6f0	
	int32_t m_nAvailableEntitySteadyState; // 0x6f4	
	bool m_bHasAnySteadyStateEnts; // 0x6f8	
private:
	[[maybe_unused]] uint8_t __pad06f9[0xf]; // 0x6f9
public:
	// MNetworkEnable
	// MNetworkEncoder "fixed64"
	// MNetworkChangeCallback "OnSteamIDChanged"
	uint64_t m_steamID; // 0x708	
	// MNetworkEnable
	uint32_t m_iDesiredFOV; // 0x710	
	
	// Static fields:
	static bool &Get_sm_bRunningPredictedClientStringCommands(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBasePlayerController")->GetStaticFields()[0]->m_pInstance);};
	
	// Datamap fields:
	// bool fakeclient; // 0x7fffffff
	// bool is_hltv; // 0x7fffffff
	// const char * playername; // 0x7fffffff
	// bool reserving; // 0x7fffffff
	// void m_pCurrentCommand; // 0x700
	// void m_LastCmd; // 0x5c0
	// void m_nLastRealCommandNumberExecuted; // 0x6cc
	// void m_nLastLateCommandExecuted; // 0x6d0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_GenericPerson_3 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_HealthSwapVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BloodExchangeParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Muted : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_Targeted_Silence_Debuff : public CCitadel_Modifier_Silenced
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x260
// Has VTable
class CCitadel_Modifier_TechBleed_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	float m_flDamage; // 0x170	
	int32_t m_nDamageTick; // 0x174	
	CHandle< CBaseEntity > m_hTarget; // 0x178	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ApplyDebuff_ProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_DebuffModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CModifier_Synth_Grasp_BulletShield : public CCitadelModifier
{
public:
	float m_fBulletShield; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1
// Has Trivial Constructor
// Has Trivial Destructor
// 
// MPulseProvideFeatureTag "PulseEntities"
// MPulseLibraryBindings
class CPointTemplateAPI
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x1]; // 0x0
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x898
// Has VTable
class CFuncTrackTrain : public CBaseModelEntity
{
public:
	CHandle< CPathTrack > m_ppath; // 0x748	
	float m_length; // 0x74c	
	Vector m_vPosPrev; // 0x750	
	QAngle m_angPrev; // 0x75c	
	Vector m_controlMins; // 0x768	
	Vector m_controlMaxs; // 0x774	
	Vector m_lastBlockPos; // 0x780	
	int32_t m_lastBlockTick; // 0x78c	
	float m_flVolume; // 0x790	
	float m_flBank; // 0x794	
	float m_oldSpeed; // 0x798	
	float m_flBlockDamage; // 0x79c	
	float m_height; // 0x7a0	
	float m_maxSpeed; // 0x7a4	
	float m_dir; // 0x7a8	
private:
	[[maybe_unused]] uint8_t __pad07ac[0x4]; // 0x7ac
public:
	CUtlSymbolLarge m_iszSoundMove; // 0x7b0	
	CUtlSymbolLarge m_iszSoundMovePing; // 0x7b8	
	CUtlSymbolLarge m_iszSoundStart; // 0x7c0	
	CUtlSymbolLarge m_iszSoundStop; // 0x7c8	
	CUtlSymbolLarge m_strPathTarget; // 0x7d0	
	float m_flMoveSoundMinDuration; // 0x7d8	
	float m_flMoveSoundMaxDuration; // 0x7dc	
	GameTime_t m_flNextMoveSoundTime; // 0x7e0	
	float m_flMoveSoundMinPitch; // 0x7e4	
	float m_flMoveSoundMaxPitch; // 0x7e8	
	TrainOrientationType_t m_eOrientationType; // 0x7ec	
	TrainVelocityType_t m_eVelocityType; // 0x7f0	
private:
	[[maybe_unused]] uint8_t __pad07f4[0xc]; // 0x7f4
public:
	CEntityIOOutput m_OnStart; // 0x800	
	CEntityIOOutput m_OnNext; // 0x828	
	CEntityIOOutput m_OnArrivedAtDestinationNode; // 0x850	
	bool m_bManualSpeedChanges; // 0x878	
private:
	[[maybe_unused]] uint8_t __pad0879[0x3]; // 0x879
public:
	float m_flDesiredSpeed; // 0x87c	
	GameTime_t m_flSpeedChangeTime; // 0x880	
	float m_flAccelSpeed; // 0x884	
	float m_flDecelSpeed; // 0x888	
	bool m_bAccelToSpeed; // 0x88c	
private:
	[[maybe_unused]] uint8_t __pad088d[0x3]; // 0x88d
public:
	GameTime_t m_flNextMPSoundTime; // 0x890	
	
	// Datamap fields:
	// int64_t m_soundMoveGuid; // 0x7f4
	// void InputStop; // 0x0
	// void InputStartForward; // 0x0
	// void InputStartBackward; // 0x0
	// void InputToggle; // 0x0
	// void InputResume; // 0x0
	// void InputReverse; // 0x0
	// float InputSetSpeed; // 0x0
	// float InputSetSpeedDir; // 0x0
	// float InputSetSpeedReal; // 0x0
	// float InputSetMaxSpeed; // 0x0
	// float InputSetSpeedDirAccel; // 0x0
	// CUtlSymbolLarge InputMoveToPathNode; // 0x0
	// CUtlSymbolLarge InputTeleportToPathNode; // 0x0
	// void InputLockOrientation; // 0x0
	// void InputUnlockOrientation; // 0x0
	// void CFuncTrackTrainNext; // 0x0
	// void CFuncTrackTrainFind; // 0x0
	// void CFuncTrackTrainNearestPath; // 0x0
	// void CFuncTrackTrainDeadEnd; // 0x0
	// int32_t volume; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CModifier_Synth_Affliction_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x658
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierGangActivityAbilitySwapVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Ability References"
	CSubclassName< 4 > m_SummonGangster; // 0x5f8	
	CSubclassName< 4 > m_TeleportToGangster; // 0x608	
	CSubclassName< 4 > m_Cancel; // 0x618	
	CSubclassName< 4 > m_ReplaceWithSummonGangster; // 0x628	
	CSubclassName< 4 > m_ReplaceWithTeleportToGangster; // 0x638	
	CSubclassName< 4 > m_ReplaceWithCancel; // 0x648	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierRestorativeGooVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RestorativeGooEndParticle; // 0x5f8	
	float m_flDistanceCameraOffsetLerpTime; // 0x6d8	
	float m_flDistanceCameraOffsetBias; // 0x6dc	
	float m_flDistanceCameraOffset; // 0x6e0	
private:
	[[maybe_unused]] uint8_t __pad06e4[0x4]; // 0x6e4
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BreakoutProgressBarModifier; // 0x6e8	
	CEmbeddedSubclass< CCitadelModifier > m_PostCubeBuffModifier; // 0x6f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_NonTargetLoopingSound; // 0x708	
	CSoundEventName m_TargetLoopingSound; // 0x718	
	CSoundEventName m_LightMeleeImpact; // 0x728	
	CSoundEventName m_HeavyMeleeImpact; // 0x738	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Chrono_PulseGrenade_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x230
// Has VTable
class CCitadel_Modifier_BeltFed_Magazine : public CCitadelModifier
{
public:
	bool m_bInitialized; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00c9[0x3]; // 0xc9
public:
	float m_flSpinUpRateOverride; // 0xcc	
	float m_flSpinUpDecayOverride; // 0xd0	
	float m_flMaxCycleTimeOverride; // 0xd4	
	float m_flMaxBurstFireCooldownOverride; // 0xd8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x770
// Has VTable
class CFogVolume : public CServerOnlyModelEntity
{
public:
	CUtlSymbolLarge m_fogName; // 0x748	
	CUtlSymbolLarge m_postProcessName; // 0x750	
	CUtlSymbolLarge m_colorCorrectionName; // 0x758	
private:
	[[maybe_unused]] uint8_t __pad0760[0x8]; // 0x760
public:
	bool m_bDisabled; // 0x768	
	bool m_bInFogVolumesList; // 0x769	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// CHandle< CBaseEntity > m_hFogController; // 0x760
	// CHandle< CBaseEntity > m_hColorCorrectionController; // 0x764
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5168
// Has VTable
class CCitadel_Modifier_ItemWalkBack : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x4fd8]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7d8
// Has VTable
class CFire : public CBaseModelEntity
{
public:
	CHandle< CBaseFire > m_hEffect; // 0x748	
	CHandle< CBaseEntity > m_hOwner; // 0x74c	
	int32_t m_nFireType; // 0x750	
	float m_flFuel; // 0x754	
	GameTime_t m_flDamageTime; // 0x758	
	GameTime_t m_lastDamage; // 0x75c	
	float m_flFireSize; // 0x760	
	GameTime_t m_flLastNavUpdateTime; // 0x764	
	float m_flHeatLevel; // 0x768	
	float m_flHeatAbsorb; // 0x76c	
	float m_flDamageScale; // 0x770	
	float m_flMaxHeat; // 0x774	
	float m_flLastHeatLevel; // 0x778	
	float m_flAttackTime; // 0x77c	
	bool m_bEnabled; // 0x780	
	bool m_bStartDisabled; // 0x781	
	bool m_bDidActivate; // 0x782	
private:
	[[maybe_unused]] uint8_t __pad0783[0x5]; // 0x783
public:
	CEntityIOOutput m_OnIgnited; // 0x788	
	CEntityIOOutput m_OnExtinguished; // 0x7b0	
	
	// Datamap fields:
	// void CFireBurnThink; // 0x0
	// void CFireGoOutThink; // 0x0
	// void InputStartFire; // 0x0
	// float InputExtinguish; // 0x0
	// float InputExtinguishTemporary; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x580
// Has VTable
// 
// MNetworkVarNames "CAnimGraphNetworkedVariables m_animGraphNetworkedVars"
// MNetworkVarNames "HSequence m_hSequence"
// MNetworkVarNames "GameTime_t m_flSeqStartTime"
// MNetworkVarNames "float m_flSeqFixedCycle"
// MNetworkVarNames "AnimLoopMode_t m_nAnimLoopMode"
class CBaseAnimGraphController : public CSkeletonAnimationController
{
private:
	[[maybe_unused]] uint8_t __pad0010[0x8]; // 0x10
public:
	// MNetworkEnable
	CAnimGraphNetworkedVariables m_animGraphNetworkedVars; // 0x18	
	// MNetworkDisable
	bool m_bSequenceFinished; // 0x220	
private:
	[[maybe_unused]] uint8_t __pad0221[0x3]; // 0x221
public:
	// MNetworkDisable
	float m_flSoundSyncTime; // 0x224	
	// MNetworkDisable
	uint32_t m_nActiveIKChainMask; // 0x228	
	// MNetworkEnable
	// MNetworkSerializer "minusone"
	// MNetworkChangeCallback "OnNetworkedSequenceChanged"
	// MNetworkPriority "32"
	HSequence m_hSequence; // 0x22c	
	// MNetworkEnable
	// MNetworkChangeCallback "OnNetworkedAnimationChanged"
	// MNetworkPriority "32"
	GameTime_t m_flSeqStartTime; // 0x230	
	// MNetworkEnable
	// MNetworkChangeCallback "OnNetworkedAnimationChanged"
	// MNetworkPriority "32"
	float m_flSeqFixedCycle; // 0x234	
	// MNetworkEnable
	// MNetworkChangeCallback "OnNetworkedAnimationChanged"
	// MNetworkPriority "32"
	AnimLoopMode_t m_nAnimLoopMode; // 0x238	
	// MNetworkEnable
	// MNetworkBitCount "8"
	// MNetworkMinValue "-4.000000"
	// MNetworkMaxValue "12.000000"
	// MNetworkEncodeFlags "5"
	// MNetworkPriority "32"
	// MNetworkChangeCallback "OnNetworkedAnimationChanged"
	CNetworkedQuantizedFloat m_flPlaybackRate; // 0x23c	
private:
	[[maybe_unused]] uint8_t __pad0244[0x4]; // 0x244
public:
	// MNetworkDisable
	SequenceFinishNotifyState_t m_nNotifyState; // 0x248	
private:
	[[maybe_unused]] uint8_t __pad0249[0x1]; // 0x249
public:
	// MNetworkDisable
	bool m_bNetworkedAnimationInputsChanged; // 0x24a	
	// MNetworkDisable
	bool m_bNetworkedSequenceChanged; // 0x24b	
	// MNetworkDisable
	bool m_bLastUpdateSkipped; // 0x24c	
private:
	[[maybe_unused]] uint8_t __pad024d[0x3]; // 0x24d
public:
	// MNetworkDisable
	GameTime_t m_flPrevAnimUpdateTime; // 0x250	
	
	// Datamap fields:
	// void m_pAnimGraphInstance; // 0x4f0
	// float m_flCachedSequenceCycleRate; // 0x244
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc18
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flPostCastHoldEndTime"
class CCitadel_Ability_HealthSwap : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_nFXIndex; // 0xab0	
	float m_flHealthToCaster; // 0xab4	
	float m_flTargetHealthLost; // 0xab8	
private:
	[[maybe_unused]] uint8_t __pad0abc[0x11c]; // 0xabc
public:
	// MNetworkEnable
	GameTime_t m_flPostCastHoldEndTime; // 0xbd8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x808
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ChainLightningVData : public CCitadel_Modifier_BaseBulletPreRollProcVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x718	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ChainModifier; // 0x7f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe0
// Has VTable
class CCitadel_Modifier_Push : public CCitadelModifier
{
public:
	Vector m_vPushForce; // 0xc8	
	float m_flDecayRate; // 0xd4	
	GameTime_t m_TimeDestroy; // 0xd8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x810
// Has VTable
class CFuncPlatRot : public CFuncPlat
{
public:
	QAngle m_end; // 0x7f8	
	QAngle m_start; // 0x804	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe8
// Has VTable
class CCitadel_Modifier_Hero_Testing_Damage_Aura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ItemPickupAuraVData : public CCitadelModifierAuraVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x598
// Has VTable
// 
// MNetworkVarNames "float m_flParticleSpacing"
// MNetworkVarNames "float m_flSlack"
// MNetworkVarNames "float m_flRadius"
// MNetworkVarNames "Color m_ColorTint"
// MNetworkVarNames "int m_nEffectState"
// MNetworkVarNames "HParticleSystemDefinitionStrong m_iEffectIndex"
// MNetworkVarNames "Vector m_PathNodes_Position"
// MNetworkVarNames "Vector m_PathNodes_TangentIn"
// MNetworkVarNames "Vector m_PathNodes_TangentOut"
// MNetworkVarNames "Vector m_PathNodes_Color"
// MNetworkVarNames "bool m_PathNodes_PinEnabled"
// MNetworkVarNames "float m_PathNodes_RadiusScale"
class CPathParticleRope : public CBaseEntity
{
public:
	bool m_bStartActive; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	float m_flMaxSimulationTime; // 0x4bc	
	CUtlSymbolLarge m_iszEffectName; // 0x4c0	
	CUtlVector< CUtlSymbolLarge > m_PathNodes_Name; // 0x4c8	
	// MNetworkEnable
	float m_flParticleSpacing; // 0x4e0	
	// MNetworkEnable
	// MNetworkChangeCallback "parametersChanged"
	float m_flSlack; // 0x4e4	
	// MNetworkEnable
	// MNetworkChangeCallback "parametersChanged"
	float m_flRadius; // 0x4e8	
	// MNetworkEnable
	// MNetworkChangeCallback "parametersChanged"
	Color m_ColorTint; // 0x4ec	
	// MNetworkEnable
	// MNetworkChangeCallback "effectStateChanged"
	int32_t m_nEffectState; // 0x4f0	
private:
	[[maybe_unused]] uint8_t __pad04f4[0x4]; // 0x4f4
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIParticleSystemDefinition > m_iEffectIndex; // 0x4f8	
	// MNetworkEnable
	CNetworkUtlVectorBase< Vector > m_PathNodes_Position; // 0x500	
	// MNetworkEnable
	CNetworkUtlVectorBase< Vector > m_PathNodes_TangentIn; // 0x518	
	// MNetworkEnable
	CNetworkUtlVectorBase< Vector > m_PathNodes_TangentOut; // 0x530	
	// MNetworkEnable
	CNetworkUtlVectorBase< Vector > m_PathNodes_Color; // 0x548	
	// MNetworkEnable
	// MNetworkChangeCallback "pinStateChanged"
	CNetworkUtlVectorBase< bool > m_PathNodes_PinEnabled; // 0x560	
	// MNetworkEnable
	CNetworkUtlVectorBase< float32 > m_PathNodes_RadiusScale; // 0x578	
	
	// Datamap fields:
	// CUtlSymbolLarge pathNodes; // 0x7fffffff
	// void InputStart; // 0x0
	// void InputStop; // 0x0
	// void InputStopEndCap; // 0x0
	// void InputDestroy; // 0x0
	// CUtlSymbolLarge InputDisablePin; // 0x0
	// float InputSetRadius; // 0x0
	// float InputSetSlack; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x660
// Has VTable
class CGenericConstraint : public CPhysConstraint
{
private:
	[[maybe_unused]] uint8_t __pad0530[0x8]; // 0x530
public:
	JointMotion_t m_nLinearMotionX; // 0x538	
	JointMotion_t m_nLinearMotionY; // 0x53c	
	JointMotion_t m_nLinearMotionZ; // 0x540	
	float m_flLinearFrequencyX; // 0x544	
	float m_flLinearFrequencyY; // 0x548	
	float m_flLinearFrequencyZ; // 0x54c	
	float m_flLinearDampingRatioX; // 0x550	
	float m_flLinearDampingRatioY; // 0x554	
	float m_flLinearDampingRatioZ; // 0x558	
	float m_flMaxLinearImpulseX; // 0x55c	
	float m_flMaxLinearImpulseY; // 0x560	
	float m_flMaxLinearImpulseZ; // 0x564	
	float m_flBreakAfterTimeX; // 0x568	
	float m_flBreakAfterTimeY; // 0x56c	
	float m_flBreakAfterTimeZ; // 0x570	
	GameTime_t m_flBreakAfterTimeStartTimeX; // 0x574	
	GameTime_t m_flBreakAfterTimeStartTimeY; // 0x578	
	GameTime_t m_flBreakAfterTimeStartTimeZ; // 0x57c	
	float m_flBreakAfterTimeThresholdX; // 0x580	
	float m_flBreakAfterTimeThresholdY; // 0x584	
	float m_flBreakAfterTimeThresholdZ; // 0x588	
	float m_flNotifyForceX; // 0x58c	
	float m_flNotifyForceY; // 0x590	
	float m_flNotifyForceZ; // 0x594	
	float m_flNotifyForceMinTimeX; // 0x598	
	float m_flNotifyForceMinTimeY; // 0x59c	
	float m_flNotifyForceMinTimeZ; // 0x5a0	
	GameTime_t m_flNotifyForceLastTimeX; // 0x5a4	
	GameTime_t m_flNotifyForceLastTimeY; // 0x5a8	
	GameTime_t m_flNotifyForceLastTimeZ; // 0x5ac	
	bool m_bAxisNotifiedX; // 0x5b0	
	bool m_bAxisNotifiedY; // 0x5b1	
	bool m_bAxisNotifiedZ; // 0x5b2	
private:
	[[maybe_unused]] uint8_t __pad05b3[0x1]; // 0x5b3
public:
	JointMotion_t m_nAngularMotionX; // 0x5b4	
	JointMotion_t m_nAngularMotionY; // 0x5b8	
	JointMotion_t m_nAngularMotionZ; // 0x5bc	
	float m_flAngularFrequencyX; // 0x5c0	
	float m_flAngularFrequencyY; // 0x5c4	
	float m_flAngularFrequencyZ; // 0x5c8	
	float m_flAngularDampingRatioX; // 0x5cc	
	float m_flAngularDampingRatioY; // 0x5d0	
	float m_flAngularDampingRatioZ; // 0x5d4	
	float m_flMaxAngularImpulseX; // 0x5d8	
	float m_flMaxAngularImpulseY; // 0x5dc	
	float m_flMaxAngularImpulseZ; // 0x5e0	
private:
	[[maybe_unused]] uint8_t __pad05e4[0x4]; // 0x5e4
public:
	CEntityIOOutput m_NotifyForceReachedX; // 0x5e8	
	CEntityIOOutput m_NotifyForceReachedY; // 0x610	
	CEntityIOOutput m_NotifyForceReachedZ; // 0x638	
	
	// Datamap fields:
	// void CGenericConstraintUpdateThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Synth_Barrage_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BarrageCasterModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_AmpModifier; // 0x14f8	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x1508	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShootParticle; // 0x1518	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x15f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelParticle; // 0x16d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strProjectileLaunchSound; // 0x17b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x700
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierUppercuttedVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StunParticle; // 0x5f8	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strStunSound; // 0x6d8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_NoExplodeModifier; // 0x6e8	
	// MPropertyStartGroup "Gameplay"
	float m_flEnemyNoAirDashDuration; // 0x6f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_PsychicDagger : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1020
// Has VTable
// 
// MNetworkIncludeByName "m_lifeState"
// MNetworkIncludeByName "m_spawnflags"
// MNetworkVarNames "NPC_STATE m_NPCState"
// MNetworkVarNames "bool m_bFadeCorpse"
// MNetworkVarNames "bool m_bImportantRagdoll"
class CAI_BaseNPC : public CBaseCombatCharacter
{
private:
	[[maybe_unused]] uint8_t __pad0a78[0x10]; // 0xa78
public:
	bool m_bCheckContacts; // 0xa88	
	bool m_bIsUsingSmallHull; // 0xa89	
private:
	[[maybe_unused]] uint8_t __pad0a8a[0x2]; // 0xa8a
public:
	Vector m_vecLastPosition; // 0xa8c	
	float m_flLastPositionTolerance; // 0xa98	
	CHandle< CAI_BaseNPC > m_hSynchronizedPrimaryNPC; // 0xa9c	
	CUtlVector< CHandle< CAI_BaseNPC > > m_vecSynchronizedSecondaryNPCs; // 0xaa0	
	// MNetworkEnable
	NPC_STATE m_NPCState; // 0xab8	
	NPC_STATE m_nPreModifierNPCState; // 0xabc	
	NPC_STATE m_IdealNPCState; // 0xac0	
	GameTime_t m_flLastStateChangeTime; // 0xac4	
private:
	[[maybe_unused]] uint8_t __pad0ac8[0x8]; // 0xac8
public:
	CAI_ScheduleBits m_Conditions; // 0xad0	
	CAI_ScheduleBits m_NonGatherConditions; // 0xaf4	
	CAI_ScheduleBits m_CustomInterruptConditions; // 0xb18	
	bool m_bForceConditionsGather; // 0xb3c	
	bool m_bConditionsGathered; // 0xb3d	
	bool m_bDoPostRestoreRefindPath; // 0xb3e	
private:
	[[maybe_unused]] uint8_t __pad0b3f[0x1]; // 0xb3f
public:
	CAI_BehaviorHost* m_pBehaviorHost; // 0xb40	
private:
	[[maybe_unused]] uint8_t __pad0b48[0x8]; // 0xb48
public:
	CAI_EnemyServices* m_pEnemyServices; // 0xb50	
	CRandStopwatch m_GiveUpOnDeadEnemyTimer; // 0xb58	
	CSimpleSimTimer m_FailChooseEnemyTimer; // 0xb6c	
	GameTime_t m_flAcceptableTimeSeenEnemy; // 0xb74	
	bool m_bSkippedChooseEnemy; // 0xb78	
	bool m_bIgnoreUnseenEnemies; // 0xb79	
private:
	[[maybe_unused]] uint8_t __pad0b7a[0x2]; // 0xb7a
public:
	CHandle< CBaseFilter > m_hEnemyFilter; // 0xb7c	
	CUtlSymbolLarge m_iszEnemyFilterName; // 0xb80	
	CHandle< CBaseEntity > m_hTargetEnt; // 0xb88	
	bool m_bClearTargetOnScheduleEnd; // 0xb8c	
private:
	[[maybe_unused]] uint8_t __pad0b8d[0x3]; // 0xb8d
public:
	GameTime_t m_flSoundWaitTime; // 0xb90	
	int32_t m_nSoundPriority; // 0xb94	
	bool m_bSuppressFootsteps; // 0xb98	
private:
	[[maybe_unused]] uint8_t __pad0b99[0x3]; // 0xb99
public:
	int32_t m_afCapability; // 0xb9c	
	// MNetworkDisable
	float m_flGroundSpeed; // 0xba0	
	GameTime_t m_flMoveWaitFinished; // 0xba4	
	CHandle< CBaseEntity > m_hOpeningDoor; // 0xba8	
private:
	[[maybe_unused]] uint8_t __pad0bac[0x4]; // 0xbac
public:
	CUnreachableTargetList m_UnreachableTargets; // 0xbb0	
	CHandle< CBaseEntity > m_hPathObstructor; // 0xbd0	
	float m_flJumpMaxRise; // 0xbd4	
	float m_flJumpMaxDrop; // 0xbd8	
	float m_flJumpMaxDist; // 0xbdc	
	float m_flJumpMinDist; // 0xbe0	
private:
	[[maybe_unused]] uint8_t __pad0be4[0x4]; // 0xbe4
public:
	CAI_AnimGraphServices* m_pAnimGraphServices; // 0xbe8	
	bool m_bAnimGraphIsAnimatingDeath; // 0xbf0	
	bool m_bDeferredNavigation; // 0xbf1	
private:
	[[maybe_unused]] uint8_t __pad0bf2[0x6]; // 0xbf2
public:
	// -> m_ScheduleState - 0xc38
	// -> m_failSchedule - 0xc60
	// -> m_translatedSchedule - 0xc68
	// -> m_untranslatedSchedule - 0xc70
	// -> m_sInterruptText - 0xc98
	CAI_Scheduler m_Scheduler; // 0xbf8	
	CAI_Navigator* m_pNavigatorNavmesh; // 0xca0	
private:
	[[maybe_unused]] uint8_t __pad0ca8[0x18]; // 0xca8
public:
	CAI_Motor* m_pMotor; // 0xcc0	
	GameTime_t m_flTimeLastMovement; // 0xcc8	
	GameTime_t m_flTimeLastFootstep; // 0xccc	
	CSimpleSimTimer m_CheckOnGroundTimer; // 0xcd0	
	CUtlSymbolLarge m_strNavRestrictionVolume; // 0xcd8	
	Vector m_vDefaultEyeOffset; // 0xce0	
	int32_t m_afMemory; // 0xcec	
	GameTime_t m_flLastAttackTime; // 0xcf0	
	GameTime_t m_flLastTookDamageTime; // 0xcf4	
	GameTime_t m_flLastTookDamageFromPlayerTime; // 0xcf8	
	Vector m_vecLastTookDamageAttackVector; // 0xcfc	
private:
	[[maybe_unused]] uint8_t __pad0d08[0x8]; // 0xd08
public:
	CUtlSymbolLarge m_iszSquadName; // 0xd10	
	CUtlVector< SquadSlotNPCEntry_t > m_vecMySquadSlots; // 0xd18	
	int32_t m_nPrevHealthDuringModifyDamage; // 0xd30	
	// MNetworkEnable
	bool m_bFadeCorpse; // 0xd34	
	// MNetworkEnable
	bool m_bImportantRagdoll; // 0xd35	
private:
	[[maybe_unused]] uint8_t __pad0d36[0x2]; // 0xd36
public:
	CTakeDamageResult m_deathBlowResult; // 0xd38	
	bool m_bDidDeathCleanup; // 0xd50	
	bool m_bReceivedEnemyDeadNotification; // 0xd51	
private:
	[[maybe_unused]] uint8_t __pad0d52[0x2]; // 0xd52
public:
	GameTime_t m_flWaitFinished; // 0xd54	
	bool m_fNoDamageDecal; // 0xd58	
private:
	[[maybe_unused]] uint8_t __pad0d59[0x7]; // 0xd59
public:
	CUtlVector< CHandle< CBaseEntity > >* m_pVecAttachments; // 0xd60	
	CEntityIOOutput m_OnDamaged; // 0xd68	
	CEntityIOOutput m_OnDeath; // 0xd90	
	CEntityIOOutput m_OnQuarterHealth; // 0xdb8	
	CEntityIOOutput m_OnHalfHealth; // 0xde0	
	CEntityIOOutput m_OnThreeQuarterHealth; // 0xe08	
	CEntityOutputTemplate< CHandle< CBaseEntity > > m_OnFoundEnemy; // 0xe30	
	CEntityIOOutput m_OnLostEnemy; // 0xe58	
	CEntityIOOutput m_OnLostPlayer; // 0xe80	
	CEntityIOOutput m_OnDamagedByPlayer; // 0xea8	
	CEntityIOOutput m_OnDamagedByPlayerSquad; // 0xed0	
	CEntityIOOutput m_OnPlayerUse; // 0xef8	
	CEntityIOOutput m_OnUse; // 0xf20	
	CEntityIOOutput m_OnStartTouchMaterial; // 0xf48	
	CEntityIOOutput m_OnEndTouchMaterial; // 0xf70	
	CEntityIOOutput m_OnLostEnemyLOS; // 0xf98	
	CEntityIOOutput m_OnLostPlayerLOS; // 0xfc0	
	uint64_t m_nAITraceMask; // 0xfe8	
	float m_flThinkTime; // 0xff0	
private:
	[[maybe_unused]] uint8_t __pad0ff4[0x4]; // 0xff4
public:
	CUtlVector< TaskThinkTime_t > m_vecTaskThinkTime; // 0xff8	
	CUtlSymbolLarge m_iScheduleRunDuringThink; // 0x1010	
	int32_t m_nDebugCurIndex; // 0x1018	
	struct 
	{
		uint8_t m_bInvokingBehaviorIsValidEnemy: 1; 		
		uint8_t m_bInvokingBehaviorBestEnemy: 1; 		
		uint8_t m_bInvokingBehaviorShouldIgnoreSound: 1; 		
		uint8_t m_bInvokingBehaviorIsInterruptable: 1; 		
		uint8_t m_bInvokingBehaviorOnTakeDamage_React_Alive: 1; 		
		uint8_t m_bInvokingBehaviorQueryHearSound: 1; 		
		uint8_t m_bInvokingBehaviorOnCalcBaseMove: 1; 		
		uint8_t m_bInvokingBehaviorShouldAlwaysGatherEnvironmentalConditions: 1; 		
		uint8_t m_bInvokingBehaviorAimGun: 1; 		
		uint8_t __pad2: 1;
	}; // 10 bits
	
	// Static fields:
	static CUtlSymbolLarge &Get_sm_iszPlayerSquad(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_BaseNPC")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_sm_nDebugBits(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_BaseNPC")->GetStaticFields()[1]->m_pInstance);};
	static int32_t &Get_sm_nDebugPauseIndex(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_BaseNPC")->GetStaticFields()[2]->m_pInstance);};
	
	// Datamap fields:
	// CAI_Senses m_pSenses; // 0xac8
	// void m_pSquad; // 0xd08
	// CAI_Pathfinder m_pPathfinderNavmesh; // 0xca8
	// CUtlSymbolLarge InputSetEnemyFilter; // 0x0
	// int32_t InputOverrideHealth; // 0x0
	// int32_t InputSetHealth; // 0x0
	// CUtlSymbolLarge InputSetSquad; // 0x0
	// CUtlSymbolLarge InputForgetEntity; // 0x0
	// void InputBreak; // 0x0
	// void InputGagEnable; // 0x0
	// void InputGagDisable; // 0x0
	// void InputInsideTransition; // 0x0
	// void InputOutsideTransition; // 0x0
	// CUtlSymbolLarge InputUpdateEnemyMemory; // 0x0
	// CUtlSymbolLarge InputSetNavRestrictionVolume; // 0x0
	// void CAI_BaseNPCCallNPCThink; // 0x0
	// void CAI_BaseNPCCallNPCPerTickThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xba0
// Has VTable
class CItemFlare : public CItemGeneric
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
// Has Trivial Destructor
class CConstantForceController
{
private:
	[[maybe_unused]] uint8_t __pad0000[0xc]; // 0x0
public:
	Vector m_linear; // 0xc	
	RotationVector m_angular; // 0x18	
	Vector m_linearSave; // 0x24	
	RotationVector m_angularSave; // 0x30	
	
	// Datamap fields:
	// bool m_bLocalSpace; // 0x8
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Tokamak_HeatSinks_DOT_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sAfterburnParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sAfterburnExplodeParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a58
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityUppercutVData : public CAbilityMeleeVData
{
public:
	AttackData_t m_UppercutAttackData; // 0x1500	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_UppercutModifier; // 0x1a20	
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x1a30	
	CEmbeddedSubclass< CCitadelModifier > m_ClipModifier; // 0x1a40	
	// MPropertyStartGroup "Gameplay"
	float m_flMaxPitchUp; // 0x1a50	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb60
// Has VTable
class CCitadel_Ability_Gravity_Lasso : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_IceDomeVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_BlockerModel; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DomeParticle; // 0x6d8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_FriendlyAuraModifier; // 0x7b8	
	CEmbeddedSubclass< CCitadelModifier > m_EnemyAuraModifier; // 0x7c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strDomeEndSound; // 0x7d8	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strTargetLoopingSound; // 0x7e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_ImmobilizeTrapDOT_Thinker : public CCitadelModifier
{
public:
	float m_flDPS; // 0xc8	
	float m_flRadius; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_HealthSwapPrecast : public CCitadelModifier
{
public:
	CHandle< CBaseEntity > m_hTarget; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_StaticChargeVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x14e8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_StaticChargeModifier; // 0x15c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_MeleeDamageOnly : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb38
// Has VTable
// 
// MNetworkVarNames "uint32 m_boneIndexAttached"
// MNetworkVarNames "uint32 m_ragdollAttachedObjectIndex"
// MNetworkVarNames "Vector m_attachmentPointBoneSpace"
// MNetworkVarNames "Vector m_attachmentPointRagdollSpace"
class CRagdollPropAttached : public CRagdollProp
{
public:
	// MNetworkEnable
	uint32_t m_boneIndexAttached; // 0xaf8	
	// MNetworkEnable
	uint32_t m_ragdollAttachedObjectIndex; // 0xafc	
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector m_attachmentPointBoneSpace; // 0xb00	
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector m_attachmentPointRagdollSpace; // 0xb0c	
	bool m_bShouldDetach; // 0xb18	
private:
	[[maybe_unused]] uint8_t __pad0b19[0xf]; // 0xb19
public:
	bool m_bShouldDeleteAttachedActivationRecord; // 0xb28	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x958
// Has VTable
class CItemSoda : public CBaseAnimGraph
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x190
// Has VTable
class CModifier_Mirage_Tornado_Aura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe8
// Has VTable
class CCitadel_Modifier_MobileResupplyAura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_IceDomeVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_IceDomeModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierLashFlogDebuffVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FlogDebuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x50
// Has VTable
// Is Abstract
class CAI_LocalNavigatorBase : public CAI_Component
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1
// Has Trivial Constructor
// Has Trivial Destructor
// 
// MPulseProvideFeatureTag "PulseEntities"
// MPulseLibraryBindings
class CBasePlayerControllerAPI
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x1]; // 0x0
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf0
// Has VTable
class CCitadel_Modifier_ControlPointBlockerAura : public CCitadelModifierAura
{
public:
	CHandle< CCitadelControlPointTrigger > m_hCP; // 0xe8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb00
// Has VTable
class CCitadelProjectile_ImmobilizeTrap : public CCitadelProjectile
{
public:
	GameTime_t m_flStartTime; // 0x800	
	Vector m_vecStartPos; // 0x804	
	Vector m_vecEndPos; // 0x810	
	GameTime_t m_flProjectileLandTime; // 0x81c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb10
// Has VTable
class CCitadel_Item_WarpStone : public CCitadel_Item
{
public:
	ParticleIndex_t m_nCastDelayParticleIndex; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb48
// Has VTable
// 
// MNetworkVarNames "int m_iStacks"
class CCitadel_WeaponUpgrade_SiphonBullets : public CCitadel_Item
{
public:
	// MNetworkEnable
	int32_t m_iStacks; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x220
// Has VTable
class CCitadel_Modifier_RapidFire : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x150]; // 0xc8
public:
	GameTime_t m_flNextAttackTime; // 0x218	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_ThrownShiv_Slow_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x898
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SilencedVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EmpParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EmpPlayerParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EmpStatusParticle; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_BulletShieldImpact : public CCitadelModifier
{
public:
	ParticleIndex_t m_AmbientEffect; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_Backdoor_Protection : public CCitadelModifier
{
public:
	int32_t m_MaxHealth; // 0xc8	
	GameTime_t m_flLastAttackedTime; // 0xcc	
	ParticleIndex_t m_nActiveShieldEffect; // 0xd0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x11a8
// Has VTable
// 
// MGetKV3ClassDefaults
class CNPC_TrooperNeutralNodeMoverVData : public CNPC_TrooperNeutralVData
{
public:
	// MPropertyStartGroup "Node Movement"
	bool m_bEnableMovementToNodes; // 0x1180	
private:
	[[maybe_unused]] uint8_t __pad1181[0x3]; // 0x1181
public:
	CRangeFloat m_flExposedDuration; // 0x1184	
	CRangeFloat m_flHideDuration; // 0x118c	
private:
	[[maybe_unused]] uint8_t __pad1194[0x4]; // 0x1194
public:
	CEmbeddedSubclass< CCitadelModifier > m_HidingModifier; // 0x1198	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
// 
// MNetworkVarNames "float32 m_flFadeStartDist"
// MNetworkVarNames "float32 m_flFadeEndDist"
class CEnvDetailController : public CBaseEntity
{
public:
	// MNetworkEnable
	float m_flFadeStartDist; // 0x4b8	
	// MNetworkEnable
	float m_flFadeEndDist; // 0x4bc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x90
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "int16 scale"
// MNetworkVarNames "Vector origin"
// MNetworkVarNames "bool bClip3DSkyBoxNearToWorldFar"
// MNetworkVarNames "float32 flClip3DSkyBoxNearToWorldFarOffset"
// MNetworkVarNames "fogparams_t fog"
// MNetworkVarNames "WorldGroupId_t m_nWorldGroupID"
struct sky3dparams_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	int16_t scale; // 0x8	
private:
	[[maybe_unused]] uint8_t __pad000a[0x2]; // 0xa
public:
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector origin; // 0xc	
	// MNetworkEnable
	bool bClip3DSkyBoxNearToWorldFar; // 0x18	
private:
	[[maybe_unused]] uint8_t __pad0019[0x3]; // 0x19
public:
	// MNetworkEnable
	float flClip3DSkyBoxNearToWorldFarOffset; // 0x1c	
	// MNetworkEnable
	fogparams_t fog; // 0x20	
	// MNetworkEnable
	WorldGroupId_t m_nWorldGroupID; // 0x88	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x940
// Has VTable
class CTriggerOnce : public CTriggerMultiple
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x800
// Has VTable
class CCitadel_Projectile_RocketLauncher_Rocket : public CCitadelProjectile
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb70
// Has VTable
class CCitadel_Ability_GoldenIdol : public CCitadel_Ability_BaseHeldItem
{
public:
	int32_t m_nGold; // 0xaf8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CInfoTeleportDestination : public CPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x598
// Has VTable
class CMathRemap : public CLogicalEntity
{
public:
	float m_flInMin; // 0x4b8	
	float m_flInMax; // 0x4bc	
	float m_flOut1; // 0x4c0	
	float m_flOut2; // 0x4c4	
	float m_flOldInValue; // 0x4c8	
	bool m_bEnabled; // 0x4cc	
private:
	[[maybe_unused]] uint8_t __pad04cd[0x3]; // 0x4cd
public:
	CEntityOutputTemplate< float32 > m_OutValue; // 0x4d0	
	CEntityIOOutput m_OnRoseAboveMin; // 0x4f8	
	CEntityIOOutput m_OnRoseAboveMax; // 0x520	
	CEntityIOOutput m_OnFellBelowMin; // 0x548	
	CEntityIOOutput m_OnFellBelowMax; // 0x570	
	
	// Datamap fields:
	// float InputValue; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CInstructorEventEntity : public CPointEntity
{
public:
	CUtlSymbolLarge m_iszName; // 0x4b8	
	CUtlSymbolLarge m_iszHintTargetEntity; // 0x4c0	
	CHandle< CBasePlayerPawn > m_hTargetPlayer; // 0x4c8	
	
	// Datamap fields:
	// CUtlSymbolLarge InputShowHint; // 0x0
	// void InputEndHint; // 0x0
	// void InputSetTargetPlayerToActivator; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f8
// Has VTable
// 
// MNetworkVarNames "HRenderTextureStrong m_hGradientFogTexture"
// MNetworkVarNames "float m_flFogStartDistance"
// MNetworkVarNames "float m_flFogEndDistance"
// MNetworkVarNames "bool m_bHeightFogEnabled"
// MNetworkVarNames "float m_flFogStartHeight"
// MNetworkVarNames "float m_flFogEndHeight"
// MNetworkVarNames "float m_flFarZ"
// MNetworkVarNames "float m_flFogMaxOpacity"
// MNetworkVarNames "float m_flFogFalloffExponent"
// MNetworkVarNames "float m_flFogVerticalExponent"
// MNetworkVarNames "Color m_fogColor"
// MNetworkVarNames "float m_flFogStrength"
// MNetworkVarNames "float m_flFadeTime"
// MNetworkVarNames "bool m_bStartDisabled"
// MNetworkVarNames "bool m_bIsEnabled"
class CGradientFog : public CBaseEntity
{
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hGradientFogTexture; // 0x4b8	
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	float m_flFogStartDistance; // 0x4c0	
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	float m_flFogEndDistance; // 0x4c4	
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	bool m_bHeightFogEnabled; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04c9[0x3]; // 0x4c9
public:
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	float m_flFogStartHeight; // 0x4cc	
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	float m_flFogEndHeight; // 0x4d0	
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	float m_flFarZ; // 0x4d4	
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	float m_flFogMaxOpacity; // 0x4d8	
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	float m_flFogFalloffExponent; // 0x4dc	
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	float m_flFogVerticalExponent; // 0x4e0	
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	Color m_fogColor; // 0x4e4	
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	float m_flFogStrength; // 0x4e8	
	// MNetworkEnable
	// MNetworkChangeCallback "FogStateChanged"
	float m_flFadeTime; // 0x4ec	
	// MNetworkEnable
	bool m_bStartDisabled; // 0x4f0	
	// MNetworkEnable
	bool m_bIsEnabled; // 0x4f1	
	bool m_bGradientFogNeedsTextures; // 0x4f2	
	
	// Datamap fields:
	// bool InputEnable; // 0x0
	// bool InputDisable; // 0x0
	// float InputSetFogStartDistance; // 0x0
	// float InputSetFogEndDistance; // 0x0
	// float InputSetFogStartHeight; // 0x0
	// float InputSetFogEndHeight; // 0x0
	// float InputSetFogMaxOpacity; // 0x0
	// float InputSetFogFalloffExponent; // 0x0
	// float InputSetFogVerticalExponent; // 0x0
	// Color InputSetFogColor; // 0x0
	// float InputSetFogStrength; // 0x0
	// float InputSetFarZ; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Targetdummy_3 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_StaticCharge : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x70]; // 0xc8
public:
	float m_flRadius; // 0x138	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CModifier_Upgrade_KineticSash : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad8
// Has VTable
// 
// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkVarNames "CCitadelRegenComponent::Storage_t m_CCitadelRegenComponent"
class CCitadelAnimatingModelEntity : public CBaseAnimGraph
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelRegenComponent"
	// MNetworkAlias "CCitadelRegenComponent"
	// MNetworkTypeAlias "CCitadelRegenComponent"
	CCitadelRegenComponent m_CCitadelRegenComponent; // 0x958	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_ArmorUpgrade_CloakingDevice : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_ArmorUpgrade_RegenerativeArmor : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Citadel_Bull_Leap_LandingBonuses_VData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1860
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityDashVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DashParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DownDashParticle; // 0x15c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strArriveSound; // 0x16a8	
	CSoundEventName m_strStaminaDrainedSound; // 0x16b8	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceGroundDashActivate; // 0x16c8	
	CitadelCameraOperationsSequence_t m_cameraSequenceAirDashActivate; // 0x1748	
	// MPropertyStartGroup "Ground Dash Stuff"
	float m_flMaxAngDiff; // 0x17c8	
	float m_flDurationScaleForSpeed; // 0x17cc	
	float m_flSlideEarlyOutWindow; // 0x17d0	
	float m_flSlideLockoutTime; // 0x17d4	
	float m_flGroundDashAirbornDrag; // 0x17d8	
	float m_flGroundDashAirbornSpeedClamp; // 0x17dc	
	CSoundEventName m_strGroundDashActivate; // 0x17e0	
	CPiecewiseCurve m_curvePosition; // 0x17f0	
	float m_flGroundDashDuration; // 0x1830	
	float m_flGroundDashDistanceInMeters; // 0x1834	
	// MPropertyStartGroup "Air Dash Stuff"
	float m_flAirDashEndVelocityScale; // 0x1838	
	float m_flAirDashAccPct; // 0x183c	
	float m_flDuringDrag; // 0x1840	
	float m_flPostDrag; // 0x1844	
	float m_flPostDragDuration; // 0x1848	
	float m_flDownwardAirDashSpeed; // 0x184c	
	CSoundEventName m_strDashActivate; // 0x1850	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_DebuffImmunity : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8
// Has Trivial Destructor
class CAI_ProxTester
{
public:
	float m_distSq; // 0x0	
	bool m_fInside; // 0x4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x758
// Has VTable
class CTriggerVolume : public CBaseModelEntity
{
public:
	CUtlSymbolLarge m_iFilterName; // 0x748	
	CHandle< CBaseFilter > m_hFilter; // 0x750	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x50
// Has VTable
class CAI_CitadelLocalNavigator : public CAI_LocalNavigatorBase
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ConsumedProtectionRacketVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strShieldBreakSound; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe0
// Has VTable
class CCitadel_Modifier_Wrecker_Ultimate_ThrowEnemy : public CCitadel_Modifier_Stunned
{
public:
	Vector m_vThrowVelocity; // 0xd0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_WreckerSalvage_Buff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_StickyBombAttached : public CCitadelModifier
{
public:
	float m_flDamage; // 0xc8	
	ParticleIndex_t m_nParticleIndex; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityNikumanVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_NikumanModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_SelfBuffModifier; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1728
// Has VTable
// 
// MGetKV3ClassDefaults
class CItem_ActiveReload_VData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SuccessModifier; // 0x1530	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strSuccessSound; // 0x1540	
	CSoundEventName m_strFailureSound; // 0x1550	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SuccessParticle; // 0x1560	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FailureParticle; // 0x1640	
	// MPropertyStartGroup "Gameplay"
	float m_flGraceTime; // 0x1720	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1708
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_TechDamagePulseVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PulseParticle; // 0x1530	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetParticle; // 0x1610	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strPulseTickSound; // 0x16f0	
	// MPropertyStartGroup "Gameplay"
	int32_t m_iMaxTargets; // 0x1700	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CMarkupVolume : public CBaseModelEntity
{
public:
	bool m_bDisabled; // 0x748	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_FlameDashGroundAuraVData : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GroundParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_Item_QuickSilver : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
class CCitadel_Item_AOE_Tech_Shield : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CGameModifier_SetMoveType : public CCitadelModifier
{
public:
	MoveType_t m_nMoveType; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x550
// Has VTable
class CEnvSoundscapeAlias_snd_soundscape : public CEnvSoundscape
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_TangoTetherTarget : public CCitadel_Modifier_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_PristineEmblem : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Objective_Bullet_Resist : public CCitadelModifier
{
public:
	CHandle< CTriggerTrooperDetector > m_hTrigger; // 0xc8	
	int32_t m_iEnemyHeroCount; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
class CFishPool : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x10]; // 0x4b8
public:
	int32_t m_fishCount; // 0x4c8	
	float m_maxRange; // 0x4cc	
	float m_swimDepth; // 0x4d0	
	float m_waterLevel; // 0x4d4	
	bool m_isDormant; // 0x4d8	
private:
	[[maybe_unused]] uint8_t __pad04d9[0x7]; // 0x4d9
public:
	CUtlVector< CHandle< CFish > > m_fishes; // 0x4e0	
	CountdownTimer m_visTimer; // 0x4f8	
	
	// Datamap fields:
	// void CFishPoolUpdate; // 0x0
	// float max_range; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x570
// Has VTable
class CInfoHeroTestingController : public CPointEntity
{
public:
	// Datamap fields:
	// void InputStartLaneTest; // 0x0
	// void InputEndLaneTest; // 0x0
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x120
// Has VTable
class CCitadel_Modifier_Tokamak_AllySmokeAOE : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_Item_Disarm : public CCitadel_Item_TrackingProjectileApplyModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CPointClientCommand : public CPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CFuncVPhysicsClip : public CBaseModelEntity
{
public:
	bool m_bDisabled; // 0x748	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Synth_Barrage_Caster_VData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityGangActivityCancelVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AbilitySwap; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x230
// Has VTable
class CCitadel_Modifier_HookTarget : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x4]; // 0xc8
public:
	float m_flCurrentVerticalSpeed; // 0xcc	
	bool m_bSuccess; // 0xd0	
	bool m_bSameTeam; // 0xd1	
	bool m_bPlayedApproachingWhoosh; // 0xd2	
private:
	[[maybe_unused]] uint8_t __pad00d3[0x1]; // 0xd3
public:
	float m_flInitialTravelDistance; // 0xd4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilitySleepDaggerVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SleepModifier; // 0x15c8	
	CEmbeddedSubclass< CCitadelModifier > m_DrowsyModifier; // 0x15d8	
	CEmbeddedSubclass< CCitadelModifier > m_SleepBombModifier; // 0x15e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityLashFlogVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FlogParticle; // 0x14e8	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FlogLifeLeachParticle; // 0x15c8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_FlogDebuffModifier; // 0x16a8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x250
// Has VTable
class CCitadel_Modifier_BoxingGlove : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Inhibitor_ProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1d0
// Has VTable
class CCitadel_Modifier_ChainLightning : public CCitadel_Modifier_BaseBulletPreRollProc
{
private:
	[[maybe_unused]] uint8_t __pad0190[0x38]; // 0x190
public:
	GameTime_t m_flNextProcTime; // 0x1c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa18
// Has VTable
// 
// MNetworkVarNames "bool m_bIsPlayingBack"
// MNetworkVarNames "bool m_bPaused"
// MNetworkVarNames "bool m_bMultiplayer"
// MNetworkVarNames "bool m_bAutogenerated"
// MNetworkVarNames "float32 m_flForceClientTime"
// MNetworkVarNames "CHandle< CBaseFlex > m_hActorList"
// MNetworkVarNames "uint16 m_nSceneStringIndex"
class CSceneEntity : public CPointEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CUtlSymbolLarge m_iszSceneFile; // 0x4c0	
	CUtlSymbolLarge m_iszResumeSceneFile; // 0x4c8	
	CUtlSymbolLarge m_iszTarget1; // 0x4d0	
	CUtlSymbolLarge m_iszTarget2; // 0x4d8	
	CUtlSymbolLarge m_iszTarget3; // 0x4e0	
	CUtlSymbolLarge m_iszTarget4; // 0x4e8	
	CUtlSymbolLarge m_iszTarget5; // 0x4f0	
	CUtlSymbolLarge m_iszTarget6; // 0x4f8	
	CUtlSymbolLarge m_iszTarget7; // 0x500	
	CUtlSymbolLarge m_iszTarget8; // 0x508	
	CHandle< CBaseEntity > m_hTarget1; // 0x510	
	CHandle< CBaseEntity > m_hTarget2; // 0x514	
	CHandle< CBaseEntity > m_hTarget3; // 0x518	
	CHandle< CBaseEntity > m_hTarget4; // 0x51c	
	CHandle< CBaseEntity > m_hTarget5; // 0x520	
	CHandle< CBaseEntity > m_hTarget6; // 0x524	
	CHandle< CBaseEntity > m_hTarget7; // 0x528	
	CHandle< CBaseEntity > m_hTarget8; // 0x52c	
	CUtlSymbolLarge m_sTargetAttachment; // 0x530	
	// MNetworkEnable
	bool m_bIsPlayingBack; // 0x538	
	// MNetworkEnable
	bool m_bPaused; // 0x539	
	// MNetworkEnable
	bool m_bMultiplayer; // 0x53a	
	// MNetworkEnable
	bool m_bAutogenerated; // 0x53b	
	// MNetworkEnable
	float m_flForceClientTime; // 0x53c	
	float m_flCurrentTime; // 0x540	
	float m_flFrameTime; // 0x544	
	bool m_bCancelAtNextInterrupt; // 0x548	
private:
	[[maybe_unused]] uint8_t __pad0549[0x3]; // 0x549
public:
	float m_fPitch; // 0x54c	
	bool m_bAutomated; // 0x550	
private:
	[[maybe_unused]] uint8_t __pad0551[0x3]; // 0x551
public:
	int32_t m_nAutomatedAction; // 0x554	
	float m_flAutomationDelay; // 0x558	
	float m_flAutomationTime; // 0x55c	
	CHandle< CBaseEntity > m_hWaitingForThisResumeScene; // 0x560	
	bool m_bWaitingForResumeScene; // 0x564	
	bool m_bPausedViaInput; // 0x565	
	bool m_bPauseAtNextInterrupt; // 0x566	
	bool m_bWaitingForActor; // 0x567	
	bool m_bWaitingForInterrupt; // 0x568	
	bool m_bInterruptedActorsScenes; // 0x569	
	bool m_bBreakOnNonIdle; // 0x56a	
	bool m_bSceneFinished; // 0x56b	
private:
	[[maybe_unused]] uint8_t __pad056c[0x4]; // 0x56c
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< CHandle< CBaseFlex > > m_hActorList; // 0x570	
	CUtlVector< CHandle< CBaseEntity > > m_hRemoveActorList; // 0x588	
private:
	[[maybe_unused]] uint8_t __pad05a0[0x30]; // 0x5a0
public:
	int32_t m_nSceneFlushCounter; // 0x5d0	
	// MNetworkEnable
	uint16_t m_nSceneStringIndex; // 0x5d4	
private:
	[[maybe_unused]] uint8_t __pad05d6[0x2]; // 0x5d6
public:
	CEntityIOOutput m_OnStart; // 0x5d8	
	CEntityIOOutput m_OnCompletion; // 0x600	
	CEntityIOOutput m_OnCanceled; // 0x628	
	CEntityIOOutput m_OnPaused; // 0x650	
	CEntityIOOutput m_OnResumed; // 0x678	
	CEntityIOOutput m_OnTrigger[16]; // 0x6a0	
private:
	[[maybe_unused]] uint8_t __pad0920[0x90]; // 0x920
public:
	CHandle< CSceneEntity > m_hInterruptScene; // 0x9b0	
	int32_t m_nInterruptCount; // 0x9b4	
	bool m_bSceneMissing; // 0x9b8	
	bool m_bInterrupted; // 0x9b9	
	bool m_bCompletedEarly; // 0x9ba	
	bool m_bInterruptSceneFinished; // 0x9bb	
	bool m_bRestoring; // 0x9bc	
private:
	[[maybe_unused]] uint8_t __pad09bd[0x3]; // 0x9bd
public:
	CUtlVector< CHandle< CSceneEntity > > m_hNotifySceneCompletion; // 0x9c0	
	CUtlVector< CHandle< CSceneListManager > > m_hListManagers; // 0x9d8	
	CUtlSymbolLarge m_iszSoundName; // 0x9f0	
	CUtlSymbolLarge m_iszSequenceName; // 0x9f8	
	CHandle< CBaseFlex > m_hActor; // 0xa00	
	CHandle< CBaseEntity > m_hActivator; // 0xa04	
	int32_t m_BusyActor; // 0xa08	
	SceneOnPlayerDeath_t m_iPlayerDeathBehavior; // 0xa0c	
	
	// Static fields:
	static int32_t &Get_s_nSceneFlushCounter(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CSceneEntity")->GetStaticFields()[0]->m_pInstance);};
	
	// Datamap fields:
	// void m_pScene; // 0x5c8
	// void m_pRecipientFilter; // 0xa10
	// void InputStartPlayback; // 0x0
	// void InputPausePlayback; // 0x0
	// void InputResumePlayback; // 0x0
	// void InputCancelPlayback; // 0x0
	// void InputCancelAtNextInterrupt; // 0x0
	// float InputPitchShiftPlayback; // 0x0
	// CUtlSymbolLarge InputInterjectResponse; // 0x0
	// void InputStopWaitingForActor; // 0x0
	// int32_t InputTriggerEvent; // 0x0
	// CUtlSymbolLarge InputSetTarget1; // 0x0
	// CUtlSymbolLarge InputSetTarget2; // 0x0
	// void InputScriptPlayerDeath; // 0x0
	// void InputPauseAtNextInterrupt; // 0x0
	// void m_OnTrigger[ 0 ]; // 0x6a0
	// void m_OnTrigger[ 1 ]; // 0x6c8
	// void m_OnTrigger[ 2 ]; // 0x6f0
	// void m_OnTrigger[ 3 ]; // 0x718
	// void m_OnTrigger[ 4 ]; // 0x740
	// void m_OnTrigger[ 5 ]; // 0x768
	// void m_OnTrigger[ 6 ]; // 0x790
	// void m_OnTrigger[ 7 ]; // 0x7b8
	// void m_OnTrigger[ 8 ]; // 0x7e0
	// void m_OnTrigger[ 9 ]; // 0x808
	// void m_OnTrigger[ 10 ]; // 0x830
	// void m_OnTrigger[ 11 ]; // 0x858
	// void m_OnTrigger[ 12 ]; // 0x880
	// void m_OnTrigger[ 13 ]; // 0x8a8
	// void m_OnTrigger[ 14 ]; // 0x8d0
	// void m_OnTrigger[ 15 ]; // 0x8f8
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbb0
// Has VTable
class CCitadel_UtilityUpgrade_HealthNova : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xce0
// Has VTable
// 
// MNetworkExcludeByName "m_iEffectIndex"
// MNetworkIncludeByName "m_iTeamNum"
// MNetworkVarNames "HParticleSystemDefinitionStrong m_iFriendlyEffectIndex"
// MNetworkVarNames "HParticleSystemDefinitionStrong m_iEnemyEffectIndex"
class CTeamRelativeParticleSystem : public CParticleSystem
{
public:
	CUtlSymbolLarge m_iszFriendlyEffectName; // 0xcc0	
	CUtlSymbolLarge m_iszEnemyEffectName; // 0xcc8	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIParticleSystemDefinition > m_iFriendlyEffectIndex; // 0xcd0	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIParticleSystemDefinition > m_iEnemyEffectIndex; // 0xcd8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8c8
// Has VTable
// 
// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkVarNames "CCitadelRegenComponent::Storage_t m_CCitadelRegenComponent"
class CCitadelModelEntity : public CBaseModelEntity
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelRegenComponent"
	// MNetworkAlias "CCitadelRegenComponent"
	// MNetworkTypeAlias "CCitadelRegenComponent"
	CCitadelRegenComponent m_CCitadelRegenComponent; // 0x748	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18a8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelAbilityHealingSlashVData : public CCitadelYamatoBaseVData
{
public:
	float m_flEffectSize; // 0x14f0	
	float m_flMaxAttackAngle; // 0x14f4	
	CRemapFloat m_remapAngleToTime; // 0x14f8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_DebuffModifier; // 0x1508	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x1518	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HealingSlashParticle; // 0x15f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HealingSlashSwordGlow; // 0x16d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x17b8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strDamageTarget; // 0x1898	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x258
// Has VTable
// 
// MGetKV3ClassDefaults
class CBasePlayerWeaponVData
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x10]; // 0x0
public:
	// MPropertyDescription "The name of the weapon entity to spawn for this NPC weapon."
	CUtlString m_szClassName; // 0x10	
	// MPropertyDescription "Model used on the ground or held by an entity"
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_szWorldModel; // 0x18	
	// MPropertyDescription "Was the weapon was built right-handed?"
	// MPropertyGroupName "Visuals"
	bool m_bBuiltRightHanded; // 0xf8	
	// MPropertyDescription "Allows flipping the model, regardless of whether it is built left or right handed"
	// MPropertyGroupName "Visuals"
	bool m_bAllowFlipping; // 0xf9	
private:
	[[maybe_unused]] uint8_t __pad00fa[0x6]; // 0xfa
public:
	// MPropertyGroupName "Visuals"
	// MPropertyDescription "Attachment to fire bullets from"
	// MPropertyAttributeEditor "VDataModelAttachment( m_szWorldModel )"
	CUtlString m_sMuzzleAttachment; // 0x100	
	// MPropertyDescription "Effect when firing this weapon"
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_szMuzzleFlashParticle; // 0x108	
	CUtlVector< CEmbeddedSubclass< CCitadelModifier > > m_vecIntrinsicModifiers; // 0x1e8	
	ItemFlagTypes_t m_iFlags; // 0x200	
	// MPropertyAttributeEditor "VDataChoice( scripts/ammo.vdata )"
	// MPropertyGroupName "Ammo"
	// MPropertyCustomFGDType "string"
	AmmoIndex_t m_nPrimaryAmmoType; // 0x201	
	// MPropertyAttributeEditor "VDataChoice( scripts/ammo.vdata )"
	// MPropertyGroupName "Ammo"
	// MPropertyCustomFGDType "string"
	AmmoIndex_t m_nSecondaryAmmoType; // 0x202	
private:
	[[maybe_unused]] uint8_t __pad0203[0x1]; // 0x203
public:
	// MPropertyFriendlyName "Primary Clip Size"
	// MPropertyDescription "How many bullets this gun can fire before it reloads (0 if no clip)"
	// MPropertyAttributeRange "0 255"
	// MPropertyGroupName "Ammo"
	int32_t m_iMaxClip1; // 0x204	
	// MPropertyFriendlyName "Secondary Clip Size"
	// MPropertyDescription "How many secondary bullets this gun can fire before it reloads (0 if no clip)"
	// MPropertyGroupName "Ammo"
	// MPropertyAttributeRange "0 255"
	int32_t m_iMaxClip2; // 0x208	
	// MPropertyDescription "Primary Initial Clip (-1 means use clip size)"
	// MPropertyGroupName "Ammo"
	// MPropertyAttributeRange "-1 255"
	int32_t m_iDefaultClip1; // 0x20c	
	// MPropertyDescription "Secondary Initial Clip (-1 means use clip size)"
	// MPropertyGroupName "Ammo"
	// MPropertyAttributeRange "-1 255"
	int32_t m_iDefaultClip2; // 0x210	
	// MPropertyDescription "This value used to determine this weapon's importance in autoselection"
	// MPropertyGroupName "UI"
	int32_t m_iWeight; // 0x214	
	// MPropertyFriendlyName "Safe To Auto-Switch To"
	// MPropertyDescription "Whether this weapon is safe to automatically switch to (should be false for eg. explosives that can the player may accidentally hurt themselves with)"
	// MPropertyGroupName "UI"
	bool m_bAutoSwitchTo; // 0x218	
	// MPropertyFriendlyName "Safe To Auto-Switch Away From"
	// MPropertyGroupName "UI"
	bool m_bAutoSwitchFrom; // 0x219	
private:
	[[maybe_unused]] uint8_t __pad021a[0x2]; // 0x21a
public:
	// MPropertyGroupName "UI"
	RumbleEffect_t m_iRumbleEffect; // 0x21c	
	// MPropertyDescription "Should both primary and secondary attacks be cooled down together (so cooling down primary attack would cooldown both primary + secondary attacks)?"
	bool m_bLinkedCooldowns; // 0x220	
	// MPropertyGroupName "Ammo"
	// MPropertyDescription "Indicates whether to treat reserve ammo as clips (reloads) instead of raw bullets"
	bool m_bReserveAmmoAsClips; // 0x221	
private:
	[[maybe_unused]] uint8_t __pad0222[0x6]; // 0x222
public:
	CUtlOrderedMap< WeaponSound_t, CSoundEventName > m_aShootSounds; // 0x228	
	// MPropertyFriendlyName "HUD Bucket"
	// MPropertyDescription "Which 'column' to display this weapon in the HUD"
	// MPropertyGroupName "UI"
	int32_t m_iSlot; // 0x250	
	// MPropertyFriendlyName "HUD Bucket Position"
	// MPropertyDescription "Which 'row' to display this weapon in the HUD"
	// MPropertyGroupName "UI"
	int32_t m_iPosition; // 0x254	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa38
// Has VTable
class CScriptItem : public CItem
{
public:
	MoveType_t m_MoveTypeOverride; // 0xa30	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x168
// Has VTable
class CCitadel_Modifier_Item_AOESilence : public CCitadelModifierAura
{
public:
	float m_flStartRadius; // 0xe8	
	float m_flEndRadius; // 0xec	
	float m_flSpreadDuration; // 0xf0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Shiv_KillingBlow_Leap : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityLightningBallVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ZapModifier; // 0x14e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strHitSound; // 0x14f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strProjectileLoopingSound; // 0x1508	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZapParticle; // 0x1518	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8
// Has Trivial Destructor
struct CCitadel_Modifier_ExplosiveShots__BulletEntityPair_t
{
public:
	CHandle< CBaseEntity > m_hEntHit; // 0x0	
	ShotID_t m_ShotHit; // 0x4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
// 
// MGetKV3ClassDefaults
// MVDataRoot
// MVDataNodeType "1"
// MVDataOverlayType "1"
class CScaleFunctionVData : public CEntitySubclassVDataBase
{
public:
	EStatsType m_eSpecificStatScaleType; // 0x28	
	float m_flStatScale; // 0x2c	
	bool m_bFunctionDisabled; // 0x30	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x10
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "GameTime_t m_timestamp"
// MNetworkVarNames "WorldGroupId_t m_nWorldGroupId"
class IntervalTimer
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	GameTime_t m_timestamp; // 0x8	
	// MNetworkEnable
	WorldGroupId_t m_nWorldGroupId; // 0xc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x930
// Has VTable
class CTriggerTeamBase : public CBaseTrigger
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x128
// Has VTable
class CCitadel_Item_StasisBomb_Aura : public CCitadelModifierAura
{
public:
	float m_AuraRadius; // 0xe8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x64
// Has Trivial Constructor
// Has Trivial Destructor
struct dynpitchvol_base_t
{
public:
	int32_t preset; // 0x0	
	int32_t pitchrun; // 0x4	
	int32_t pitchstart; // 0x8	
	int32_t spinup; // 0xc	
	int32_t spindown; // 0x10	
	int32_t volrun; // 0x14	
	int32_t volstart; // 0x18	
	int32_t fadein; // 0x1c	
	int32_t fadeout; // 0x20	
	int32_t lfotype; // 0x24	
	int32_t lforate; // 0x28	
	int32_t lfomodpitch; // 0x2c	
	int32_t lfomodvol; // 0x30	
	int32_t cspinup; // 0x34	
	int32_t cspincount; // 0x38	
	int32_t pitch; // 0x3c	
	int32_t spinupsav; // 0x40	
	int32_t spindownsav; // 0x44	
	int32_t pitchfrac; // 0x48	
	int32_t vol; // 0x4c	
	int32_t fadeinsav; // 0x50	
	int32_t fadeoutsav; // 0x54	
	int32_t volfrac; // 0x58	
	int32_t lfofrac; // 0x5c	
	int32_t lfomult; // 0x60	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x760
// Has VTable
// 
// MNetworkVarNames "uint8 m_Flags"
// MNetworkVarNames "uint8 m_LightStyle"
// MNetworkVarNames "float32 m_Radius"
// MNetworkVarNames "int32 m_Exponent"
// MNetworkVarNames "float32 m_InnerAngle"
// MNetworkVarNames "float32 m_OuterAngle"
// MNetworkVarNames "float32 m_SpotRadius"
class CDynamicLight : public CBaseModelEntity
{
public:
	uint8_t m_ActualFlags; // 0x748	
	// MNetworkEnable
	uint8_t m_Flags; // 0x749	
	// MNetworkEnable
	uint8_t m_LightStyle; // 0x74a	
	bool m_On; // 0x74b	
	// MNetworkEnable
	float m_Radius; // 0x74c	
	// MNetworkEnable
	int32_t m_Exponent; // 0x750	
	// MNetworkEnable
	// MNetworkBitCount "8"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "360.000000"
	float m_InnerAngle; // 0x754	
	// MNetworkEnable
	// MNetworkBitCount "8"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "360.000000"
	float m_OuterAngle; // 0x758	
	// MNetworkEnable
	float m_SpotRadius; // 0x75c	
	
	// Datamap fields:
	// void CDynamicLightDynamicLightThink; // 0x0
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// void InputToggle; // 0x0
	// Color _light; // 0x7fffffff
	// float pitch; // 0x7fffffff
	// int32_t spawnflags; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Targetdummy_1 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf0
// Has VTable
class CCitadel_Modifier_SettingSunThinker : public CCitadelModifier
{
public:
	float m_flTickInterval; // 0xc8	
	float m_flRadius; // 0xcc	
	float m_CenterRadius; // 0xd0	
	float m_CenterDamage; // 0xd4	
	float m_OuterDamage; // 0xd8	
	float m_StunDuration; // 0xdc	
	float m_TargetingDuration; // 0xe0	
	float m_ShootDuration; // 0xe4	
	bool m_bTargetingCompleted; // 0xe8	
	bool m_bSecondHit; // 0xe9	
	bool m_bTwoHits; // 0xea	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierHighAlertBuffVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTrappersBoloVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TrapModifier; // 0x15c8	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e0
// Has VTable
class CCitadel_Modifier_DisarmProcWatcher : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_RevealTarget : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d8
// Has VTable
class CPathAccompany : public CBaseEntity
{
public:
	CUtlVector< PathAccompanyNode_t > m_vecNodes; // 0x4b8	
	
	// Datamap fields:
	// CUtlSymbolLarge pathNodes; // 0x7fffffff
	// CUtlSymbolLarge pathNodeRadiusScales; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x918
// Has VTable
class CTriggerToggleSave : public CBaseTrigger
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x918
// Has VTable
class CPrecipitation : public CBaseTrigger
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CPointServerCommand : public CPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x60
// Has VTable
// 
// MNetworkVarNames "CEconItemAttribute m_Attributes"
class CAttributeList
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	// MNetworkTypeAlias "CUtlVector< CEconItemAttribute >"
	CUtlVectorEmbeddedNetworkVar< CEconItemAttribute > m_Attributes; // 0x8	
	CAttributeManager* m_pManager; // 0x58	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityDistruptiveChargeVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_Particle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x15c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x50
struct CitadelAbilityProjectileCreateInfo_t
{
public:
	Vector m_vecCreatePosition; // 0x0	
	QAngle m_angAngles; // 0xc	
	Vector m_vecVelocity; // 0x18	
	float m_flGravity; // 0x24	
	float m_flLifeTime; // 0x28	
	bool m_bPrimaryAttack; // 0x2c	
	bool m_bWantsInitialVelocity; // 0x2d	
private:
	[[maybe_unused]] uint8_t __pad002e[0x2]; // 0x2e
public:
	float m_flChargeAmount; // 0x30	
	float m_flArmingTime; // 0x34	
	CUtlString m_sOverrideClassName; // 0x38	
	bool m_bShouldHitThrower; // 0x40	
	bool m_bLagCompensatePosition; // 0x41	
private:
	[[maybe_unused]] uint8_t __pad0042[0x2]; // 0x42
public:
	float m_flHitThrowerDelay; // 0x44	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x898
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_MutedVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_MutedParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_MutedPlayerParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_MutedStatusParticle; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_TurnCameraToTarget : public CCitadelModifier
{
public:
	CHandle< CBaseEntity > m_hTarget; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e8
// Has VTable
class CPhysicsNPCSolver : public CLogicalEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CPhysicsNPCSolver* m_pNext; // 0x4c0	
	CHandle< CAI_BaseNPC > m_hNPC; // 0x4c8	
	CHandle< CBaseEntity > m_hEntity; // 0x4cc	
private:
	[[maybe_unused]] uint8_t __pad04d0[0x8]; // 0x4d0
public:
	float m_separationDuration; // 0x4d8	
	GameTime_t m_cancelTime; // 0x4dc	
	bool m_allowIntersection; // 0x4e0	
	
	// Datamap fields:
	// void m_pController; // 0x4d0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x470
// Has VTable
// 
// MNetworkVarNames "CSkeletonInstance m_skeletonInstance"
class CBodyComponentSkeletonInstance : public CBodyComponent
{
public:
	// MNetworkEnable
	// -> m_modelState - 0x1c0
	// -> m_bIsAnimationEnabled - 0x3f0
	// -> m_bUseParentRenderBounds - 0x3f1
	// -> m_bDisableSolidCollisionsForHierarchy - 0x3f2
	// -> m_materialGroup - 0x3f4
	// -> m_nHitboxSet - 0x3f8
	CSkeletonInstance m_skeletonInstance; // 0x50	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBodyComponentSkeletonInstance")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_contained_but_impl_is_referenced(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBodyComponentSkeletonInstance")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xce8
// Has VTable
class CPhysicsPropRespawnable : public CPhysicsProp
{
public:
	Vector m_vOriginalSpawnOrigin; // 0xcb0	
	QAngle m_vOriginalSpawnAngles; // 0xcbc	
	Vector m_vOriginalMins; // 0xcc8	
	Vector m_vOriginalMaxs; // 0xcd4	
	float m_flRespawnDuration; // 0xce0	
	
	// Datamap fields:
	// void CPhysicsPropRespawnableMaterialize; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CFuncWall : public CBaseModelEntity
{
public:
	int32_t m_nState; // 0x748	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Cadence_SilenceContraptionsDebuffVData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc28
// Has VTable
class CCitadel_Ability_Trappers_Bolo : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x38]; // 0xab0
public:
	CHandle< CBaseEntity > m_hProjectile; // 0xae8	
	CHandle< CBaseEntity > m_hNextTarget; // 0xaec	
	CUtlVector< CHandle< CBaseEntity > > m_hHitTargets; // 0xaf0	
	int32_t m_iBounces; // 0xb08	
	bool m_bReturning; // 0xb0c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_SlowingBullets_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x10
// Has Trivial Destructor
struct CCitadel_Modifier_TechCleave__DamageTaken_t
{
public:
	float m_flDamageAmount; // 0x0	
	GameTime_t m_flTimeToExpire; // 0x4	
	CHandle< CBaseEntity > m_ProcAbility; // 0x8	
	CHandle< CBaseEntity > m_pTarget; // 0xc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Slork_Gun_Poison : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_GenericPerson_4 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityWreckerScrapBlastVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SprayParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelStartParticle; // 0x15c8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_DebuffModifier; // 0x16a8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x728
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Item_Bleeding_Bullets_ActiveVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BleedModifier; // 0x628	
	CEmbeddedSubclass< CCitadel_Modifier_Base_Buildup > m_BuildUpModifier; // 0x638	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BulletImpactParticle; // 0x648	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Stimpak_regen : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe0
// Has VTable
class CCitadel_Modifier_BlastPush : public CCitadelModifier
{
public:
	Vector m_vPush; // 0xc8	
	float m_flPushVelocity; // 0xd4	
	float m_flMaxPushVelocity; // 0xd8	
	float m_flMaxPushVelocitySqr; // 0xdc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CScaleFunctionAbilityProperty_WeaponDamage : public CScaleFunctionBase
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x20
// Has VTable
class CCitadelPlayerClipComponent : public CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0008[0x10]; // 0x8
public:
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerClipComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_referenced_but_impl_is_contained(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerClipComponent")->GetStaticFields()[1]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
class CFilterModifier : public CBaseFilter
{
public:
	CUtlSymbolLarge m_iFilterModifier; // 0x510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CItemAOESilenceAuraVData : public CCitadelModifierAuraVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_empWaveParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_Disruptive_Charge : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x628
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TargetPracticeDebuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x5f8	
	CEmbeddedSubclass< CCitadelModifier > m_BulletResistModifier; // 0x608	
	CEmbeddedSubclass< CCitadelModifier > m_EMPModifier; // 0x618	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbb8
// Has VTable
// 
// MNetworkVarNames "Vector m_vecStartPos"
// MNetworkVarNames "Vector m_vecPosition"
// MNetworkVarNames "Vector m_vecInitialPosition"
// MNetworkVarNames "GameTime_t m_CastTime"
// MNetworkVarNames "Vector m_vecDirection"
// MNetworkVarNames "Vector m_vecLeft"
// MNetworkVarNames "float m_Length"
// MNetworkVarNames "bool m_bTraveling"
// MNetworkVarNames "bool m_bPreview"
class CCitadel_Ability_FissureWall : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0xb8]; // 0xab0
public:
	// MNetworkEnable
	Vector m_vecStartPos; // 0xb68	
	// MNetworkEnable
	Vector m_vecPosition; // 0xb74	
	// MNetworkEnable
	Vector m_vecInitialPosition; // 0xb80	
	// MNetworkEnable
	GameTime_t m_CastTime; // 0xb8c	
	// MNetworkEnable
	Vector m_vecDirection; // 0xb90	
	// MNetworkEnable
	Vector m_vecLeft; // 0xb9c	
	// MNetworkEnable
	float m_Length; // 0xba8	
private:
	[[maybe_unused]] uint8_t __pad0bac[0xa]; // 0xbac
public:
	// MNetworkEnable
	bool m_bTraveling; // 0xbb6	
	// MNetworkEnable
	bool m_bPreview; // 0xbb7	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x218
// Has VTable
class CCitadel_Modifier_LifestrikeGauntlets : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x898
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_CheatDeathImmunityVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffPlayerParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIMaterial2 > > m_StatusEffect; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x628
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Siphon_Bullets_WatcherVData : public CCitadel_Modifier_StatStealBaseVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_HealModifier; // 0x618	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f0
// Has VTable
class CCitadelBotTestNode : public CServerOnlyPointEntity
{
public:
	EBotTestNodeType m_eNodeType; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	CUtlSymbolLarge m_sNextNode; // 0x4c0	
	CUtlSymbolLarge m_sShootTarget; // 0x4c8	
	CHandle< CCitadelBotTestNode > m_hNextNode; // 0x4d0	
	CHandle< CCitadelBotTestNode > m_hShootTarget; // 0x4d4	
	CHandle< CCitadelPlayerPawn > m_hLockingEntity; // 0x4d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x918
// Has VTable
class CTriggerIcePathVolume : public CBaseTrigger
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbb8
// Has VTable
// 
// MNetworkVarNames "float m_flTotalPendingDamage"
class CCitadel_Ability_Shiv_Defer_Damage : public CCitadelBaseShivAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0xe0]; // 0xab0
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	float m_flTotalPendingDamage; // 0xb90	
private:
	[[maybe_unused]] uint8_t __pad0b94[0x1c]; // 0xb94
public:
	GameTime_t m_flLastDeferredDamageApplicationTime; // 0xbb0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1728
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_IceBeamVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x15c8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x16a8	
	CEmbeddedSubclass< CCitadel_Modifier_Base_Buildup > m_BuildupModifier; // 0x16b8	
	CEmbeddedSubclass< CCitadelModifier > m_BuildupProcModifier; // 0x16c8	
	// MPropertyStartGroup "Sound"
	CSoundEventName m_BeamStartSound; // 0x16d8	
	CSoundEventName m_BeamStopSound; // 0x16e8	
	CSoundEventName m_BeamPointStartLoopSound; // 0x16f8	
	CSoundEventName m_BeamPointEndLoopSound; // 0x1708	
	CSoundEventName m_BeamPointClosestLoopSound; // 0x1718	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc20
// Has VTable
class CCitadel_Ability_Kobun : public CCitadelBaseAbility
{
public:
	bool m_bFlipOffset; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd00
// Has VTable
// 
// MNetworkVarNames "EViscousChargedGunState m_ChargeState"
// MNetworkVarNames "float m_nClipConsumed"
// MNetworkVarNames "bool m_bIsCharging"
// MNetworkVarNames "bool m_bIsToggled"
class CCitadel_Ability_ViscousWeapon_Alt : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	EViscousChargedGunState m_ChargeState; // 0xab0	
	// MNetworkEnable
	float m_nClipConsumed; // 0xab4	
	// MNetworkEnable
	bool m_bIsCharging; // 0xab8	
	// MNetworkEnable
	bool m_bIsToggled; // 0xab9	
private:
	[[maybe_unused]] uint8_t __pad0aba[0x2]; // 0xaba
public:
	ParticleIndex_t m_fxChargingParticle; // 0xabc	
private:
	[[maybe_unused]] uint8_t __pad0ac0[0x8]; // 0xac0
public:
	GameTime_t m_flLastBulletConsumedTime; // 0xac8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1c0
// Has VTable
class CCitadel_Modifier_ColdFrontAOE : public CCitadelModifier
{
public:
	CUtlVector< CBaseEntity* > m_vecDamagedTargets; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x968
// Has VTable
// 
// MNetworkVarNames "float m_flBulletTimeScale"
// MNetworkVarNames "float m_flProjectileTimeScale"
// MNetworkVarNames "GameTime_t m_flExpireTime"
// MNetworkVarNames "float m_flStopDuration"
class CCitadelBulletTimeWarp : public CBaseModelEntity
{
public:
	// MNetworkEnable
	float m_flBulletTimeScale; // 0x748	
	// MNetworkEnable
	float m_flProjectileTimeScale; // 0x74c	
	// MNetworkEnable
	GameTime_t m_flExpireTime; // 0x750	
	// MNetworkEnable
	float m_flStopDuration; // 0x754	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityRiptideVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TossModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb58
// Has VTable
class CCitadel_Ability_Slork_Invis : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierChargedTackleActiveVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TackleParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PullEnemiesParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x288
// Has VTable
class CCitadel_Modifier_AfterburnWatcher : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_TriggerTowerRegen : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_Item_HealthNova : public CCitadelModifier
{
public:
	float m_flAmountPerSecond; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_MagicClarityWatcherVData : public CCitadel_Modifier_Intrinsic_BaseVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe0
// Has VTable
class CCitadel_Modifier_TossUp : public CCitadelModifier
{
public:
	bool m_bForceApplied; // 0xc8	
	bool m_bLandedOnGround; // 0xc9	
private:
	[[maybe_unused]] uint8_t __pad00ca[0x2]; // 0xca
public:
	Vector m_vTossUpForce; // 0xcc	
	float m_flCurrentVelocityScale; // 0xd8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f8
// Has VTable
// 
// MNetworkVarNames "Vector m_vecLadderDir"
// MNetworkVarNames "Vector m_vecPlayerMountPositionTop"
// MNetworkVarNames "Vector m_vecPlayerMountPositionBottom"
// MNetworkVarNames "float m_flAutoRideSpeed"
// MNetworkVarNames "bool m_bFakeLadder"
class CFuncLadder : public CBaseModelEntity
{
public:
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector m_vecLadderDir; // 0x748	
private:
	[[maybe_unused]] uint8_t __pad0754[0x4]; // 0x754
public:
	CUtlVector< CHandle< CInfoLadderDismount > > m_Dismounts; // 0x758	
	Vector m_vecLocalTop; // 0x770	
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector m_vecPlayerMountPositionTop; // 0x77c	
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector m_vecPlayerMountPositionBottom; // 0x788	
	// MNetworkEnable
	float m_flAutoRideSpeed; // 0x794	
	bool m_bDisabled; // 0x798	
	// MNetworkEnable
	bool m_bFakeLadder; // 0x799	
	bool m_bHasSlack; // 0x79a	
private:
	[[maybe_unused]] uint8_t __pad079b[0x5]; // 0x79b
public:
	CUtlSymbolLarge m_surfacePropName; // 0x7a0	
	CEntityIOOutput m_OnPlayerGotOnLadder; // 0x7a8	
	CEntityIOOutput m_OnPlayerGotOffLadder; // 0x7d0	
	
	// Static fields:
	static CUtlVector< CFuncLadder* > &Get_s_Ladders(){return *reinterpret_cast<CUtlVector< CFuncLadder* >*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CFuncLadder")->GetStaticFields()[0]->m_pInstance);};
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_ArmorUpgrade_AbilityLifeSteal : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_Item_RejuvTrackingProjectile : public CCitadel_Item_TrackingProjectileApplyModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7d0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ItemPickupPunchableVData : public CCitadelModifierVData
{
public:
	float m_flPhysicsRadius; // 0x5f8	
private:
	[[maybe_unused]] uint8_t __pad05fc[0x4]; // 0x5fc
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_IsDroppingParticle; // 0x600	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_IsPunchableParticle; // 0x6e0	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_NearRejuvAuraModifier; // 0x7c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc78
// Has VTable
class CTriggerSndSosOpvar : public CBaseTrigger
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_hTouchingPlayers; // 0x918	
	Vector m_flPosition; // 0x930	
	float m_flCenterSize; // 0x93c	
	float m_flMinVal; // 0x940	
	float m_flMaxVal; // 0x944	
	CUtlSymbolLarge m_opvarName; // 0x948	
	CUtlSymbolLarge m_stackName; // 0x950	
	CUtlSymbolLarge m_operatorName; // 0x958	
	bool m_bVolIs2D; // 0x960	
	char m_opvarNameChar[256]; // 0x961	
	char m_stackNameChar[256]; // 0xa61	
	char m_operatorNameChar[256]; // 0xb61	
private:
	[[maybe_unused]] uint8_t __pad0c61[0x3]; // 0xc61
public:
	Vector m_VecNormPos; // 0xc64	
	float m_flNormCenterSize; // 0xc70	
	
	// Datamap fields:
	// void CTriggerSndSosOpvarSndSosTriggerOpvarWaitOver; // 0x0
	// void m_opvarNameChar; // 0x961
	// void m_stackNameChar; // 0xa61
	// void m_operatorNameChar; // 0xb61
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Astro_Rifle_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x2b0
// Has VTable
class CCitadel_Modifier_LashGrappleEnemy_Debuff : public CCitadel_Modifier_Stunned
{
public:
	Vector m_vCrashDir; // 0xd0	
	Vector m_vLiftTarget; // 0xdc	
	GameTime_t m_flStartTime; // 0xe8	
	bool m_bCrashingDown; // 0xec	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CModifier_Healbane_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x628
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_RespawnCreditVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Respawn Settings"
	ERejuvenatorRespawnMechanic m_eRespawnMechanic; // 0x5f8	
	// MPropertySuppressExpr "m_eRespawnMechanic != RejuvenatorRespawnMechanic_FixedDelay"
	// MPropertyDescription "Respawn time is set to this fixed duration after dying."
	float m_flRespawnDelay; // 0x5fc	
	// MPropertySuppressExpr "m_eRespawnMechanic != RejuvenatorRespawnMechanic_PercentOfNormal"
	// MPropertyDescription "Respawn time is set to this percent (0-1) of the normal respawn time."
	float m_flPercentOfNormalRespawn; // 0x600	
	// MPropertyStartGroup "Buff Values"
	float m_flBonusClipSize; // 0x604	
	float m_flBonusFirerate; // 0x608	
	float m_flBonusHealth; // 0x60c	
	float m_flBonusMoveSpeedMeterPerSecond; // 0x610	
private:
	[[maybe_unused]] uint8_t __pad0614[0x4]; // 0x614
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sExpireSound; // 0x618	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc38
// Has VTable
// 
// MNetworkVarNames "CUtlString m_strDefaultSkin"
// MNetworkVarNames "CUtlString m_strFriendlySkin"
// MNetworkVarNames "CUtlString m_strEnemySkin"
// MNetworkVarNames "bool m_bIsWorld"
class CCitadel_DynamicProp : public CDynamicProp
{
private:
	[[maybe_unused]] uint8_t __pad0c08[0x10]; // 0xc08
public:
	// MNetworkEnable
	CUtlString m_strDefaultSkin; // 0xc18	
	// MNetworkEnable
	CUtlString m_strFriendlySkin; // 0xc20	
	// MNetworkEnable
	CUtlString m_strEnemySkin; // 0xc28	
	// MNetworkEnable
	bool m_bIsWorld; // 0xc30	
	
	// Datamap fields:
	// CUtlSymbolLarge SetFriendlySkin; // 0x0
	// CUtlSymbolLarge SetEnemySkin; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CItem_FleetfootBoots : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1f8
// Has VTable
class CCitadel_Modifier_Bubble : public CCitadel_Modifier_Silenced
{
public:
	float m_flDampingFactor; // 0xd0	
private:
	[[maybe_unused]] uint8_t __pad00d4[0x11c]; // 0xd4
public:
	ParticleIndex_t m_ParticleIndex; // 0x1f0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 16
// Size: 0x7d0
// Has VTable
class CScriptedSequence : public CBaseEntity
{
public:
	CUtlSymbolLarge m_iszEntry; // 0x4b8	
	CUtlSymbolLarge m_iszPreIdle; // 0x4c0	
	CUtlSymbolLarge m_iszPlay; // 0x4c8	
	CUtlSymbolLarge m_iszPostIdle; // 0x4d0	
	CUtlSymbolLarge m_iszModifierToAddOnPlay; // 0x4d8	
	CUtlSymbolLarge m_iszNextScript; // 0x4e0	
	CUtlSymbolLarge m_iszEntity; // 0x4e8	
	CUtlSymbolLarge m_iszSyncGroup; // 0x4f0	
	ScriptedMoveTo_t m_nMoveTo; // 0x4f8	
	MovementGait_t m_nMoveToGait; // 0x4fc	
private:
	[[maybe_unused]] uint8_t __pad04fd[0x3]; // 0x4fd
public:
	ScriptedHeldWeaponBehavior_t m_nHeldWeaponBehavior; // 0x500	
	bool m_bIsPlayingPreIdle; // 0x504	
	bool m_bIsPlayingEntry; // 0x505	
	bool m_bIsPlayingAction; // 0x506	
	bool m_bIsPlayingPostIdle; // 0x507	
	bool m_bDontRotateOther; // 0x508	
	bool m_bIsRepeatable; // 0x509	
	bool m_bShouldLeaveCorpse; // 0x50a	
	bool m_bStartOnSpawn; // 0x50b	
	bool m_bDisallowInterrupts; // 0x50c	
	bool m_bCanOverrideNPCState; // 0x50d	
	bool m_bDontTeleportAtEnd; // 0x50e	
	bool m_bHighPriority; // 0x50f	
	bool m_bHideDebugComplaints; // 0x510	
	bool m_bContinueOnDeath; // 0x511	
	bool m_bLoopPreIdleSequence; // 0x512	
	bool m_bLoopActionSequence; // 0x513	
	bool m_bLoopPostIdleSequence; // 0x514	
	bool m_bSynchPostIdles; // 0x515	
	bool m_bIgnoreLookAt; // 0x516	
	bool m_bIgnoreGravity; // 0x517	
	bool m_bDisableNPCCollisions; // 0x518	
	bool m_bKeepAnimgraphLockedPost; // 0x519	
	bool m_bDontAddModifiers; // 0x51a	
private:
	[[maybe_unused]] uint8_t __pad051b[0x1]; // 0x51b
public:
	float m_flRadius; // 0x51c	
	float m_flRepeat; // 0x520	
	float m_flPlayAnimFadeInTime; // 0x524	
	float m_flMoveInterpTime; // 0x528	
	float m_flAngRate; // 0x52c	
	bool m_bWaitUntilMoveCompletesToStartAnimation; // 0x530	
private:
	[[maybe_unused]] uint8_t __pad0531[0x3]; // 0x531
public:
	int32_t m_nNotReadySequenceCount; // 0x534	
	GameTime_t m_startTime; // 0x538	
	bool m_bWaitForBeginSequence; // 0x53c	
private:
	[[maybe_unused]] uint8_t __pad053d[0x3]; // 0x53d
public:
	int32_t m_saved_effects; // 0x540	
	int32_t m_savedFlags; // 0x544	
	int32_t m_savedCollisionGroup; // 0x548	
	bool m_bInterruptable; // 0x54c	
	bool m_sequenceStarted; // 0x54d	
	bool m_bPositionRelativeToOtherEntity; // 0x54e	
private:
	[[maybe_unused]] uint8_t __pad054f[0x1]; // 0x54f
public:
	CHandle< CBaseEntity > m_hTargetEnt; // 0x550	
	CHandle< CScriptedSequence > m_hNextCine; // 0x554	
	bool m_bThinking; // 0x558	
	bool m_bInitiatedSelfDelete; // 0x559	
	bool m_bIsTeleportingDueToMoveTo; // 0x55a	
	bool m_bAllowCustomInterruptConditions; // 0x55b	
	CHandle< CBaseAnimGraph > m_hForcedTarget; // 0x55c	
	bool m_bDontCancelOtherSequences; // 0x560	
	bool m_bForceSynch; // 0x561	
	bool m_bPreventUpdateYawOnFinish; // 0x562	
	bool m_bEnsureOnNavmeshOnFinish; // 0x563	
	ScriptedOnDeath_t m_onDeathBehavior; // 0x564	
	ScriptedConflictResponse_t m_ConflictResponse; // 0x568	
private:
	[[maybe_unused]] uint8_t __pad056c[0x4]; // 0x56c
public:
	CEntityIOOutput m_OnBeginSequence; // 0x570	
	CEntityIOOutput m_OnActionStartOrLoop; // 0x598	
	CEntityIOOutput m_OnEndSequence; // 0x5c0	
	CEntityIOOutput m_OnPostIdleEndSequence; // 0x5e8	
	CEntityIOOutput m_OnCancelSequence; // 0x610	
	CEntityIOOutput m_OnCancelFailedSequence; // 0x638	
	CEntityIOOutput m_OnScriptEvent[8]; // 0x660	
	CTransform m_matOtherToMain; // 0x7a0	
	CHandle< CBaseEntity > m_hInteractionMainEntity; // 0x7c0	
	int32_t m_iPlayerDeathBehavior; // 0x7c4	
	
	// Datamap fields:
	// void CScriptedSequenceScriptThink; // 0x0
	// void InputMoveToPosition; // 0x0
	// void InputBeginSequence; // 0x0
	// void InputCancelSequence; // 0x0
	// CUtlSymbolLarge InputSetActionSequence; // 0x0
	// void InputScriptPlayerDeath; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_WreckerSalvage : public CCitadelModifier
{
public:
	float m_flDPS; // 0xc8	
	Vector m_vLiftTarget; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TargetPracticeEnemyVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x5f8	
	CEmbeddedSubclass< CCitadelModifier > m_BuildupCompleteModifier; // 0x608	
	CEmbeddedSubclass< CCitadel_Modifier_Base_Buildup > m_BuildupModifier; // 0x618	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetParticle; // 0x628	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x708	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HeadParticle; // 0x7e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strTargetHitSound; // 0x8c8	
	CSoundEventName m_strTargetHeadShotHitSound; // 0x8d8	
	CSoundEventName m_strTargetCompleteSound; // 0x8e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbd0
// Has VTable
class CCitadel_Ability_Lash_Flog : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x118]; // 0xab0
public:
	ParticleIndex_t m_SandEffect; // 0xbc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_WeaponUpgrade_SiphonBulletsVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_PermanentHealthLoss; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ChainLightningEffectVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChainParticle; // 0x5f8	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_ChainSound; // 0x6d8	
	CSoundEventName m_VictimSound; // 0x6e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
class CNodeEnt_InfoNodeClimb : public CNodeEnt
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9b0
// Has VTable
// 
// MNetworkVarNames "CHandle< CBaseEntity> m_hTargetEntity"
// MNetworkVarNames "bool m_bState"
// MNetworkVarNames "bool m_bAlwaysUpdate"
// MNetworkVarNames "float32 m_flLightFOV"
// MNetworkVarNames "bool m_bEnableShadows"
// MNetworkVarNames "bool m_bSimpleProjection"
// MNetworkVarNames "bool m_bLightOnlyTarget"
// MNetworkVarNames "bool m_bLightWorld"
// MNetworkVarNames "bool m_bCameraSpace"
// MNetworkVarNames "float32 m_flBrightnessScale"
// MNetworkVarNames "Color m_LightColor"
// MNetworkVarNames "float32 m_flIntensity"
// MNetworkVarNames "float32 m_flLinearAttenuation"
// MNetworkVarNames "float32 m_flQuadraticAttenuation"
// MNetworkVarNames "bool m_bVolumetric"
// MNetworkVarNames "float32 m_flNoiseStrength"
// MNetworkVarNames "float32 m_flFlashlightTime"
// MNetworkVarNames "uint32 m_nNumPlanes"
// MNetworkVarNames "float32 m_flPlaneOffset"
// MNetworkVarNames "float32 m_flVolumetricIntensity"
// MNetworkVarNames "float32 m_flColorTransitionTime"
// MNetworkVarNames "float32 m_flAmbient"
// MNetworkVarNames "char m_SpotlightTextureName"
// MNetworkVarNames "int32 m_nSpotlightTextureFrame"
// MNetworkVarNames "uint32 m_nShadowQuality"
// MNetworkVarNames "float32 m_flNearZ"
// MNetworkVarNames "float32 m_flFarZ"
// MNetworkVarNames "float32 m_flProjectionSize"
// MNetworkVarNames "float32 m_flRotation"
// MNetworkVarNames "bool m_bFlipHorizontal"
class CEnvProjectedTexture : public CModelPointEntity
{
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTargetEntity; // 0x748	
	// MNetworkEnable
	bool m_bState; // 0x74c	
	// MNetworkEnable
	bool m_bAlwaysUpdate; // 0x74d	
private:
	[[maybe_unused]] uint8_t __pad074e[0x2]; // 0x74e
public:
	// MNetworkEnable
	float m_flLightFOV; // 0x750	
	// MNetworkEnable
	bool m_bEnableShadows; // 0x754	
	// MNetworkEnable
	bool m_bSimpleProjection; // 0x755	
	// MNetworkEnable
	bool m_bLightOnlyTarget; // 0x756	
	// MNetworkEnable
	bool m_bLightWorld; // 0x757	
	// MNetworkEnable
	bool m_bCameraSpace; // 0x758	
private:
	[[maybe_unused]] uint8_t __pad0759[0x3]; // 0x759
public:
	// MNetworkEnable
	float m_flBrightnessScale; // 0x75c	
	// MNetworkEnable
	Color m_LightColor; // 0x760	
	// MNetworkEnable
	float m_flIntensity; // 0x764	
	// MNetworkEnable
	float m_flLinearAttenuation; // 0x768	
	// MNetworkEnable
	float m_flQuadraticAttenuation; // 0x76c	
	// MNetworkEnable
	bool m_bVolumetric; // 0x770	
private:
	[[maybe_unused]] uint8_t __pad0771[0x3]; // 0x771
public:
	// MNetworkEnable
	float m_flNoiseStrength; // 0x774	
	// MNetworkEnable
	float m_flFlashlightTime; // 0x778	
	// MNetworkEnable
	uint32_t m_nNumPlanes; // 0x77c	
	// MNetworkEnable
	float m_flPlaneOffset; // 0x780	
	// MNetworkEnable
	float m_flVolumetricIntensity; // 0x784	
	// MNetworkEnable
	float m_flColorTransitionTime; // 0x788	
	// MNetworkEnable
	float m_flAmbient; // 0x78c	
	// MNetworkEnable
	char m_SpotlightTextureName[512]; // 0x790	
	// MNetworkEnable
	int32_t m_nSpotlightTextureFrame; // 0x990	
	// MNetworkEnable
	uint32_t m_nShadowQuality; // 0x994	
	// MNetworkEnable
	// MNetworkBitCount "16"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "500.000000"
	// MNetworkEncodeFlags "1"
	float m_flNearZ; // 0x998	
	// MNetworkEnable
	// MNetworkBitCount "18"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "1500.000000"
	// MNetworkEncodeFlags "1"
	float m_flFarZ; // 0x99c	
	// MNetworkEnable
	float m_flProjectionSize; // 0x9a0	
	// MNetworkEnable
	float m_flRotation; // 0x9a4	
	// MNetworkEnable
	bool m_bFlipHorizontal; // 0x9a8	
	
	// Datamap fields:
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// void InputAlwaysUpdateOn; // 0x0
	// void InputAlwaysUpdateOff; // 0x0
	// float InputSetFOV; // 0x0
	// CHandle< CBaseEntity > InputSetTarget; // 0x0
	// bool InputSetCameraSpace; // 0x0
	// bool InputSetLightOnlyTarget; // 0x0
	// bool InputSetLightWorld; // 0x0
	// bool InputSetEnableShadows; // 0x0
	// Color InputSetLightColor; // 0x0
	// float InputSetLightIntensity; // 0x0
	// float InputSetAmbient; // 0x0
	// CUtlSymbolLarge InputSetSpotlightTexture; // 0x0
	// void CEnvProjectedTextureInitialThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CModifier_WarpStone_Caster : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Succor_MoveVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_PullSound; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1578
// Has VTable
// Is Abstract
// 
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iTeam"
// MNetworkIncludeByName "m_vecViewOffset"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByName "m_flEncodedController"
// MNetworkExcludeByName "m_flPoseParameter"
// MNetworkVarNames "CCitadelAbilityComponent::Storage_t m_CCitadelAbilityComponent"
// MNetworkVarNames "CCitadelRegenComponent::Storage_t m_CCitadelRegenComponent"
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
// MNetworkVarNames "WeakPoint_t m_vecWeakPoints"
// MNetworkVarNames "bool m_bMinion"
// MNetworkVarNames "EHANDLE m_hLookTarget"
// MNetworkVarNames "bool m_bBeamActive"
// MNetworkVarNames "Vector m_vEyeBeamTarget"
class CAI_CitadelNPC : public CAI_BaseNPC
{
private:
	[[maybe_unused]] uint8_t __pad1020[0x18]; // 0x1020
public:
	Vector m_vLastGroundEntityCheckPos; // 0x1038	
private:
	[[maybe_unused]] uint8_t __pad1044[0x4]; // 0x1044
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelAbilityComponent"
	// MNetworkAlias "CCitadelAbilityComponent"
	// MNetworkTypeAlias "CCitadelAbilityComponent"
	CCitadelAbilityComponent m_CCitadelAbilityComponent; // 0x1048	
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelRegenComponent"
	// MNetworkAlias "CCitadelRegenComponent"
	// MNetworkTypeAlias "CCitadelRegenComponent"
	CCitadelRegenComponent m_CCitadelRegenComponent; // 0x1250	
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0x13d0	
private:
	[[maybe_unused]] uint8_t __pad13e8[0x4]; // 0x13e8
public:
	int32_t m_iBaseGoldReward; // 0x13ec	
	int32_t m_iSkillShotReward; // 0x13f0	
private:
	[[maybe_unused]] uint8_t __pad13f4[0x2c]; // 0x13f4
public:
	CHandle< CCitadelBaseAbility > m_hAbilityOwner; // 0x1420	
private:
	[[maybe_unused]] uint8_t __pad1424[0x4c]; // 0x1424
public:
	// MNetworkEnable
	CUtlVectorEmbeddedNetworkVar< WeakPoint_t > m_vecWeakPoints; // 0x1470	
	// MNetworkEnable
	bool m_bMinion; // 0x14c0	
private:
	[[maybe_unused]] uint8_t __pad14c1[0x3]; // 0x14c1
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hLookTarget; // 0x14c4	
private:
	[[maybe_unused]] uint8_t __pad14c8[0x10]; // 0x14c8
public:
	int32_t m_iCoverGroupID; // 0x14d8	
private:
	[[maybe_unused]] uint8_t __pad14dc[0x5c]; // 0x14dc
public:
	Vector m_vecSpawnOrigin; // 0x1538	
private:
	[[maybe_unused]] uint8_t __pad1544[0x18]; // 0x1544
public:
	// MNetworkEnable
	bool m_bBeamActive; // 0x155c	
private:
	[[maybe_unused]] uint8_t __pad155d[0x3]; // 0x155d
public:
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector m_vEyeBeamTarget; // 0x1560	
	
	// Static fields:
	static ConditionId_t &Get_COND_RECEIVED_AGGRO(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[0]->m_pInstance);};
	static ConditionId_t &Get_COND_STUNNED(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[1]->m_pInstance);};
	static ConditionId_t &Get_COND_FORCED_AGGRO(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[2]->m_pInstance);};
	static ConditionId_t &Get_COND_FORCED_CALM(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[3]->m_pInstance);};
	static ConditionId_t &Get_COND_IMMOBILIZED(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[4]->m_pInstance);};
	static ConditionId_t &Get_COND_DISARMED(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[5]->m_pInstance);};
	static ConditionId_t &Get_COND_CAN_MELEE_ATTACK(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[6]->m_pInstance);};
	static ConditionId_t &Get_COND_CAN_MELEE_ATTACK_CLOSE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[7]->m_pInstance);};
	static ConditionId_t &Get_COND_CAN_RANGE_ATTACK(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[8]->m_pInstance);};
	static ConditionId_t &Get_COND_RANGE_ATTACK_LOS_BLOCKED(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[9]->m_pInstance);};
	static ConditionId_t &Get_COND_RANGE_ATTACK_TOO_CLOSE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[10]->m_pInstance);};
	static ConditionId_t &Get_COND_RANGE_ATTACK_TOO_FAR(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[11]->m_pInstance);};
	static ConditionId_t &Get_COND_TAKEN_DAMAGE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[12]->m_pInstance);};
	static ConditionId_t &Get_COND_TAKEN_FLINCH_DAMAGE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[13]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_WAIT_RANDOM(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[14]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_NO_OP(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[15]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_WAIT_STUNNED(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[16]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_PUSH_AWAY_FROM_BLOCKING_NPC(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[17]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_RUN_TEST_PATH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[18]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_RUN_TEST_PATH_TO_COVER_POINT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[19]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MOVE_TO_MELEE_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[20]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MOVE_TO_SHOOT_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[21]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MOVE_TO_OWNER_AGRO(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[22]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MOVE_TO_OWNER(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[23]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TURN_TOWARD_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[24]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GET_PATH_TO_SPAWN(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[25]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_PUSH_AWAY_FROM_BLOCKING_NPC(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[26]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GET_PATH_ADVANCE_ON_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[27]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GET_PATH_TO_MELEE_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[28]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GET_TEST_PATH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[29]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GET_TEST_PATH_TO_COVER_POINT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[30]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_FIND_PATH_TO_COVER(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[31]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GET_PATH_FORWARD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[32]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GET_PATH_TO_NAV_MESH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[33]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_RELOAD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[34]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_CROUCH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[35]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_STAND(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[36]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_WAIT_FACE_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[37]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BUILD_PATH_TO_OWNER(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[38]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MELEE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[39]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BEAM_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[40]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_SLEEP(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC")->GetStaticFields()[41]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc08
// Has VTable
class CDynamicPropAlias_prop_dynamic_override : public CDynamicProp
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x590
// Has VTable
class CSceneListManager : public CLogicalEntity
{
public:
	CUtlVector< CHandle< CSceneListManager > > m_hListManagers; // 0x4b8	
	CUtlSymbolLarge m_iszScenes[16]; // 0x4d0	
	CHandle< CBaseEntity > m_hScenes[16]; // 0x550	
	
	// Datamap fields:
	// void InputShutdown; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x588
// Has VTable
class CSplineConstraint : public CPhysConstraint
{
private:
	[[maybe_unused]] uint8_t __pad0530[0x48]; // 0x530
public:
	Vector m_vAnchorOffsetRestore; // 0x578	
	
	// Datamap fields:
	// void CSplineConstraintUpdateThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1008
// Has VTable
class CCitadel_Ability_TrooperZipLine : public CCitadel_Ability_ZipLine
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x738
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_DetentionAmmoVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadel_Modifier_Base_Buildup > m_BuildUpModifier; // 0x628	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x638	
	CEmbeddedSubclass< CCitadelModifier > m_ImmunityModifier; // 0x648	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x658	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CScaleFunctionAbilityPropertySingleStat : public CScaleFunctionBase
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc08
// Has VTable
class CDynamicPropAlias_dynamic_prop : public CDynamicProp
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x948
// Has VTable
class CTriggerNeutralShield : public CBaseTrigger
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecPlayers; // 0x918	
	CUtlVector< CHandle< CBaseEntity > > m_vecNeutrals; // 0x930	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_UtilityUpgrade_AOESmokeBomb : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f8
// Has VTable
class CNPCSpawnDestination : public CPointEntity
{
public:
	float m_ReuseDelay; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	CUtlSymbolLarge m_RenameNPC; // 0x4c0	
	GameTime_t m_TimeNextAvailable; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04cc[0x4]; // 0x4cc
public:
	CEntityIOOutput m_OnSpawnNPC; // 0x4d0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_SleepDagger : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x180
// Has VTable
class CCitadel_Modifier_FlameDash : public CCitadelModifier
{
public:
	Vector m_vLastDropZonePos; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CScaleFunctionAbilityProperty_KineticCarbine : public CScaleFunctionBase
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x68
// 
// MNetworkVarNames "ModelConfigHandle_t m_Handle"
// MNetworkVarNames "string_t m_Name"
// MNetworkVarNames "CHandle< CBaseModelEntity > m_AssociatedEntities"
// MNetworkVarNames "string_t m_AssociatedEntityNames"
struct ActiveModelConfig_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x28]; // 0x0
public:
	// MNetworkEnable
	ModelConfigHandle_t m_Handle; // 0x28	
private:
	[[maybe_unused]] uint8_t __pad002c[0x4]; // 0x2c
public:
	// MNetworkEnable
	CUtlSymbolLarge m_Name; // 0x30	
	// MNetworkEnable
	CNetworkUtlVectorBase< CHandle< CBaseModelEntity > > m_AssociatedEntities; // 0x38	
	// MNetworkEnable
	CNetworkUtlVectorBase< CUtlSymbolLarge > m_AssociatedEntityNames; // 0x50	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15c0
// Has VTable
class CCitadel_PestilenceDroneDispenser : public CAI_CitadelNPC
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x850
// Has VTable
class CFuncTrackChange : public CFuncPlatRot
{
public:
	CPathTrack* m_trackTop; // 0x810	
	CPathTrack* m_trackBottom; // 0x818	
	CFuncTrackTrain* m_train; // 0x820	
	CUtlSymbolLarge m_trackTopName; // 0x828	
	CUtlSymbolLarge m_trackBottomName; // 0x830	
	CUtlSymbolLarge m_trainName; // 0x838	
	TRAIN_CODE m_code; // 0x840	
	int32_t m_targetState; // 0x844	
	int32_t m_use; // 0x848	
	
	// Datamap fields:
	// void CFuncTrackChangeFind; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Mirage_Tornado_Lift_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_SlowModifier; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LiftParticle; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab8
// Has VTable
class CCitadel_Ability_Fealty : public CCitadelBaseAbility
{
public:
	CHandle< CBaseEntity > m_hTarget; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb00
// Has VTable
class CCitadel_Ability_SummonGangster : public CCitadelBaseAbility
{
public:
	CUtlVector< CHandle< CNPC_YakuzaGangster > > m_vecGangsters; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Bull_Leap_Boosting : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_ZipLine_Boost : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x788
// Has VTable
class CMarkupVolumeTagged : public CMarkupVolume
{
private:
	[[maybe_unused]] uint8_t __pad0750[0x30]; // 0x750
public:
	bool m_bIsGroup; // 0x780	
	bool m_bGroupByPrefab; // 0x781	
	bool m_bGroupByVolume; // 0x782	
	bool m_bGroupOtherGroups; // 0x783	
	bool m_bIsInGroup; // 0x784	
	
	// Datamap fields:
	// void m_GroupNames; // 0x750
	// void m_Tags; // 0x768
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x180
// Has VTable
class CCitadel_Modifier_Thumper_2_Aura : public CCitadelModifierAura
{
public:
	Vector m_vecOrigin; // 0xe8	
	Vector m_vecWorldSpaceMins; // 0xf4	
	Vector m_vecWorldSpaceMaxs; // 0x100	
	float m_flBarbedWireAuraRadius; // 0x10c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x818
// Has VTable
// 
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
class CCitadel_Projectile_Guided_Arrow : public CCitadelProjectile
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0x800	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14
// Has Trivial Destructor
class VelocitySampler
{
public:
	Vector m_prevSample; // 0x0	
	GameTime_t m_fPrevSampleTime; // 0xc	
	float m_fIdealSampleRate; // 0x10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierIntimidatedVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EffectParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1620
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Upgrade_AerialAssualtVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_WatcherModifier; // 0x1530	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaunchParticle; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe0
// Has VTable
class CCitadel_Modifier_Unstoppable : public CCitadelModifier
{
public:
	CUtlVector< CCitadelModifier* > m_vecCheckedModifiers; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x818
// Has VTable
// 
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
class CCitadel_Projectile_Wrecker_Teleport : public CCitadelProjectile
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0x800	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierVData_SetMoveType : public CCitadelModifierVData
{
public:
	// MPropertyDescription "The move type to switch to.  Some move types will have weird behaviors when swapped to, ie: MOVETYPE_SYNC"
	MoveType_t m_nMoveType; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CTankTargetChange : public CPointEntity
{
public:
	CVariantBase< CVariantDefaultAllocator > m_newTarget; // 0x4b8	
	CUtlSymbolLarge m_newTargetName; // 0x4c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x560
// Has VTable
class CLogicCompare : public CLogicalEntity
{
public:
	float m_flInValue; // 0x4b8	
	float m_flCompareValue; // 0x4bc	
	CEntityOutputTemplate< float32 > m_OnLessThan; // 0x4c0	
	CEntityOutputTemplate< float32 > m_OnEqualTo; // 0x4e8	
	CEntityOutputTemplate< float32 > m_OnNotEqualTo; // 0x510	
	CEntityOutputTemplate< float32 > m_OnGreaterThan; // 0x538	
	
	// Datamap fields:
	// float InputSetValue; // 0x0
	// float InputSetValueCompare; // 0x0
	// float InputSetCompareValue; // 0x0
	// void InputCompare; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xba0
// Has VTable
// 
// MNetworkVarNames "int m_nPlayersHit"
class CCitadel_Ability_StickyBomb : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x8]; // 0xab0
public:
	// MNetworkEnable
	int32_t m_nPlayersHit; // 0xab8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_LightningBullet : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x18]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1620
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_UtilityUpgrade_RocketBootsVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaunchParticle; // 0x1530	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_InAirWatcherModifier; // 0x1610	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Magic_Clarity_BuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_VisualModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_AcolytesGlove_VData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_DebuffModifier; // 0x628	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SwingParticle; // 0x638	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x718	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1d8
// Has VTable
// 
// MNetworkVarNames "int32 m_iLevel"
// MNetworkVarNames "int32 m_iMaxAmmo"
// MNetworkVarNames "int32 m_iHealthMax"
// MNetworkVarNames "float m_flHealthRegen"
// MNetworkVarNames "GameTime_t m_flRespawnTime"
// MNetworkVarNames "HeroID_t m_nHeroID"
// MNetworkVarNames "int32 m_iGoldNetWorth"
// MNetworkVarNames "int32 m_iAPNetWorth"
// MNetworkVarNames "int32 m_iCreepGold"
// MNetworkVarNames "int32 m_iCreepGoldSoloBonus"
// MNetworkVarNames "int32 m_iCreepGoldKill"
// MNetworkVarNames "int32 m_iCreepGoldAirOrb"
// MNetworkVarNames "int32 m_iCreepGoldGroundOrb"
// MNetworkVarNames "int32 m_iCreepGoldDeny"
// MNetworkVarNames "int32 m_iCreepGoldNeutral"
// MNetworkVarNames "int32 m_iFarmBaseline"
// MNetworkVarNames "int32 m_iHealth"
// MNetworkVarNames "int32 m_iPlayerKills"
// MNetworkVarNames "int32 m_iPlayerAssists"
// MNetworkVarNames "int32 m_iDeaths"
// MNetworkVarNames "int32 m_iDenies"
// MNetworkVarNames "int32 m_iLastHits"
// MNetworkVarNames "bool m_bAlive"
// MNetworkVarNames "int32 m_nHeroDraftPosition"
// MNetworkVarNames "bool m_bUltimateTrained"
// MNetworkVarNames "GameTime_t m_flUltimateCooldownStart"
// MNetworkVarNames "GameTime_t m_flUltimateCooldownEnd"
// MNetworkVarNames "bool m_bHasRejuvenator"
// MNetworkVarNames "bool m_bHasRebirth"
// MNetworkVarNames "int32 m_iHeroDamage"
// MNetworkVarNames "int32 m_iHeroHealing"
// MNetworkVarNames "int32 m_iObjectiveDamage"
// MNetworkVarNames "int32 m_nHeroAbilityUpgradeBits"
// MNetworkVarNames "EntitySubclassID_t m_vecUpgrades"
// MNetworkVarNames "EntitySubclassID_t m_vecBonusCounterAbilities"
// MNetworkVarNames "int32 m_vecBonusCounterValues"
// MNetworkVarNames "AbilityID_t m_tHeldItem"
// MNetworkVarNames "ItemImbuementPair_t m_vecImbuements"
// MNetworkVarNames "DynamicAbilityValues_t m_vecDynamicAbilityValues"
// MNetworkVarNames "StatViewerModifierValues_t m_vecStatViewerModifierValues"
struct PlayerDataGlobal_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	int32_t m_iLevel; // 0x8	
	// MNetworkEnable
	int32_t m_iMaxAmmo; // 0xc	
	// MNetworkEnable
	int32_t m_iHealthMax; // 0x10	
	// MNetworkEnable
	float m_flHealthRegen; // 0x14	
	// MNetworkEnable
	GameTime_t m_flRespawnTime; // 0x18	
	// MNetworkEnable
	HeroID_t m_nHeroID; // 0x1c	
	// MNetworkEnable
	int32_t m_iGoldNetWorth; // 0x20	
	// MNetworkEnable
	int32_t m_iAPNetWorth; // 0x24	
	// MNetworkEnable
	int32_t m_iCreepGold; // 0x28	
	// MNetworkEnable
	int32_t m_iCreepGoldSoloBonus; // 0x2c	
	// MNetworkEnable
	int32_t m_iCreepGoldKill; // 0x30	
	// MNetworkEnable
	int32_t m_iCreepGoldAirOrb; // 0x34	
	// MNetworkEnable
	int32_t m_iCreepGoldGroundOrb; // 0x38	
	// MNetworkEnable
	int32_t m_iCreepGoldDeny; // 0x3c	
	// MNetworkEnable
	int32_t m_iCreepGoldNeutral; // 0x40	
	// MNetworkEnable
	int32_t m_iFarmBaseline; // 0x44	
	// MNetworkEnable
	int32_t m_iHealth; // 0x48	
	// MNetworkEnable
	int32_t m_iPlayerKills; // 0x4c	
	// MNetworkEnable
	int32_t m_iPlayerAssists; // 0x50	
	// MNetworkEnable
	int32_t m_iDeaths; // 0x54	
	// MNetworkEnable
	int32_t m_iDenies; // 0x58	
	// MNetworkEnable
	int32_t m_iLastHits; // 0x5c	
	// MNetworkEnable
	bool m_bAlive; // 0x60	
private:
	[[maybe_unused]] uint8_t __pad0061[0x3]; // 0x61
public:
	// MNetworkEnable
	// MNetworkChangeCallback "HeroDraftPositionChanged"
	int32_t m_nHeroDraftPosition; // 0x64	
	// MNetworkEnable
	bool m_bUltimateTrained; // 0x68	
private:
	[[maybe_unused]] uint8_t __pad0069[0x3]; // 0x69
public:
	// MNetworkEnable
	GameTime_t m_flUltimateCooldownStart; // 0x6c	
	// MNetworkEnable
	GameTime_t m_flUltimateCooldownEnd; // 0x70	
	// MNetworkEnable
	bool m_bHasRejuvenator; // 0x74	
	// MNetworkEnable
	bool m_bHasRebirth; // 0x75	
private:
	[[maybe_unused]] uint8_t __pad0076[0x2]; // 0x76
public:
	// MNetworkEnable
	int32_t m_iHeroDamage; // 0x78	
	// MNetworkEnable
	int32_t m_iHeroHealing; // 0x7c	
	// MNetworkEnable
	int32_t m_iObjectiveDamage; // 0x80	
	// MNetworkEnable
	// MNetworkUserGroup "Abilities"
	// MNetworkChangeCallback "pdgAbilitiesChanged"
	int32_t m_nHeroAbilityUpgradeBits[4]; // 0x84	
private:
	[[maybe_unused]] uint8_t __pad0094[0x4]; // 0x94
public:
	// MNetworkEnable
	// MNetworkUserGroup "Abilities"
	// MNetworkChangeCallback "pdgUpgradesChanged"
	CNetworkUtlVectorBase< CUtlStringToken > m_vecUpgrades; // 0x98	
	// MNetworkEnable
	CNetworkUtlVectorBase< CUtlStringToken > m_vecBonusCounterAbilities; // 0xb0	
	// MNetworkEnable
	// MNetworkUserGroup "Abilities"
	// MNetworkChangeCallback "pdgBonusCounterChanged"
	CNetworkUtlVectorBase< int32 > m_vecBonusCounterValues; // 0xc8	
	// MNetworkEnable
	// MNetworkUserGroup "Abilities"
	// MNetworkChangeCallback "pdgUpgradesChanged"
	CUtlStringToken m_tHeldItem; // 0xe0	
private:
	[[maybe_unused]] uint8_t __pad00e4[0x4]; // 0xe4
public:
	// MNetworkEnable
	CUtlVectorEmbeddedNetworkVar< ItemImbuementPair_t > m_vecImbuements; // 0xe8	
	// MNetworkEnable
	CUtlVectorEmbeddedNetworkVar< DynamicAbilityValues_t > m_vecDynamicAbilityValues; // 0x138	
	// MNetworkEnable
	CUtlVectorEmbeddedNetworkVar< StatViewerModifierValues_t > m_vecStatViewerModifierValues; // 0x188	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CCitadelMinimapBoundary : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
class CLogicRelay : public CLogicalEntity
{
public:
	CEntityIOOutput m_OnTrigger; // 0x4b8	
	CEntityIOOutput m_OnSpawn; // 0x4e0	
	bool m_bDisabled; // 0x508	
	bool m_bWaitForRefire; // 0x509	
	bool m_bTriggerOnce; // 0x50a	
	bool m_bFastRetrigger; // 0x50b	
	bool m_bPassthoughCaller; // 0x50c	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputEnableRefire; // 0x0
	// void InputDisable; // 0x0
	// void InputToggle; // 0x0
	// void InputTrigger; // 0x0
	// void InputCancelPending; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Mirage_Tornado_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TornadoCastParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TornadoAura; // 0x15c8	
	CEmbeddedSubclass< CCitadelModifier > m_GrenadeTrailModifier; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab8
// Has VTable
// Is Abstract
class CCitadelBaseYamatoAbility : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Bomber_Ability02 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_HealthSwap : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
// Is Abstract
class CTier3BossAbility : public CCitadelBaseAbilityServerOnly
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CModifier_Synth_Blitz_TechAmp : public CCitadel_Modifier_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb10
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_nFastFireEndTime"
class CCitadel_WeaponUpgrade_BurstFire : public CCitadel_Item
{
public:
	// MNetworkEnable
	GameTime_t m_nFastFireEndTime; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CModifier_Synth_Barrage_Caster : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb58
// Has VTable
class CAbility_Synth_Pulse : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6f0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_VacuumAuraTargetModifierVData : public CCitadel_Modifier_StunnedVData
{
public:
	float m_flOuterSpeedScale; // 0x6d8	
	float m_flSpeedScaleBias; // 0x6dc	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_TargetLoopingSound; // 0x6e0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Chrono_KineticCarbine_Slow : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_PowerJump : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CModifier_Upgrade_ArcaneMedallion : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f8
// Has VTable
class CKeepUpright : public CPointEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	Vector m_worldGoalAxis; // 0x4c0	
	Vector m_localTestAxis; // 0x4cc	
private:
	[[maybe_unused]] uint8_t __pad04d8[0x8]; // 0x4d8
public:
	CUtlSymbolLarge m_nameAttach; // 0x4e0	
	CHandle< CBaseEntity > m_attachedObject; // 0x4e8	
	float m_angularLimit; // 0x4ec	
	bool m_bActive; // 0x4f0	
	bool m_bDampAllRotation; // 0x4f1	
	
	// Datamap fields:
	// void m_pController; // 0x4d8
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// float InputSetAngularLimit; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x758
// Has VTable
class CRevertSaved : public CModelPointEntity
{
public:
	float m_loadTime; // 0x748	
	float m_Duration; // 0x74c	
	float m_HoldTime; // 0x750	
	
	// Datamap fields:
	// void InputReload; // 0x0
	// void CRevertSavedLoadThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SpinVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AoEParticle; // 0x5f8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityIntimidateVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_EnemyModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x14f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AoEPlayerParticle; // 0x1508	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AoEParticle; // 0x15e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
// 
// MNetworkVarNames "CHandle< CCitadelBaseAbility> m_hAbility"
// MNetworkVarNames "bool m_bFloating"
class CCitadel_MobileResupply : public CCitadelAnimatingModelEntity
{
private:
	[[maybe_unused]] uint8_t __pad0ad8[0x5c]; // 0xad8
public:
	// MNetworkEnable
	CHandle< CCitadelBaseAbility > m_hAbility; // 0xb34	
	// MNetworkEnable
	bool m_bFloating; // 0xb38	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CFuncTimescale : public CBaseEntity
{
public:
	float m_flDesiredTimescale; // 0x4b8	
	float m_flAcceleration; // 0x4bc	
	float m_flMinBlendRate; // 0x4c0	
	float m_flBlendDeltaMultiplier; // 0x4c4	
	bool m_isStarted; // 0x4c8	
	
	// Datamap fields:
	// void InputStart; // 0x0
	// void InputStop; // 0x0
	// void InputReset; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Wraith_RapidFireVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RapidFireParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CModifier_HornetLeap : public CCitadelModifier
{
public:
	int32_t m_iBonusClip; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SilenceProcWatcherVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadel_Modifier_Base_Buildup > m_BuildUpModifier; // 0x628	
	CEmbeddedSubclass< CCitadelModifier > m_SilenceProcModifier; // 0x638	
	CEmbeddedSubclass< CCitadelModifier > m_SilenceActiveModifier; // 0x648	
	CEmbeddedSubclass< CCitadelModifier > m_ImmunityModifier; // 0x658	
	CUtlString m_sInstantProcIfCasterHasModifier; // 0x668	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x670	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1628
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Rutger_ForceField_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AuraModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_VictimPushModifier; // 0x14f8	
	CEmbeddedSubclass< CBaseModifier > m_SlowModifier; // 0x1508	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strDomeCreated; // 0x1518	
	CSoundEventName m_strChargeUpSound; // 0x1528	
	CSoundEventName m_strPushAndDamage; // 0x1538	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChronoSphereChargeParticle; // 0x1548	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_TrooperDisabledInvulnerabilityFX : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
class CCitadel_UtilityUpgrade_RocketBoots : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_Item_SelfBuffModifier : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e0
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "float m_flAutoExposureMin"
// MNetworkVarNames "float m_flAutoExposureMax"
// MNetworkVarNames "float m_flTonemapPercentTarget"
// MNetworkVarNames "float m_flTonemapPercentBrightPixels"
// MNetworkVarNames "float m_flTonemapMinAvgLum"
// MNetworkVarNames "float m_flExposureAdaptationSpeedUp"
// MNetworkVarNames "float m_flExposureAdaptationSpeedDown"
// MNetworkVarNames "float m_flTonemapEVSmoothingRange"
class CTonemapController2 : public CBaseEntity
{
public:
	// MNetworkEnable
	float m_flAutoExposureMin; // 0x4b8	
	// MNetworkEnable
	float m_flAutoExposureMax; // 0x4bc	
	// MNetworkEnable
	float m_flTonemapPercentTarget; // 0x4c0	
	// MNetworkEnable
	float m_flTonemapPercentBrightPixels; // 0x4c4	
	// MNetworkEnable
	float m_flTonemapMinAvgLum; // 0x4c8	
	// MNetworkEnable
	float m_flExposureAdaptationSpeedUp; // 0x4cc	
	// MNetworkEnable
	float m_flExposureAdaptationSpeedDown; // 0x4d0	
	// MNetworkEnable
	float m_flTonemapEVSmoothingRange; // 0x4d4	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// float InputSetMinExposure; // 0x0
	// float InputSetMaxExposure; // 0x0
	// float InputSetPercentTarget; // 0x0
	// float InputSetPercentBrightPixels; // 0x0
	// float InputSetMinAverageLuminosity; // 0x0
	// float InputSetExposureAdaptationSpeedUp; // 0x0
	// float InputSetExposureAdaptationSpeedDown; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_Cadence_Anthem : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a10
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityPowerSlashVData : public CCitadelYamatoBaseVData
{
public:
	float m_flAirDrag; // 0x14f0	
	float m_flMaxPowerPadding; // 0x14f4	
	float m_flEffectGroundTrace; // 0x14f8	
	float m_flWhizbyMaxRange; // 0x14fc	
	float m_flStartPosTestCapsuleLength; // 0x1500	
	// MPropertyDescription "Visual offset for the origin of the long-slash particle effect"
	Vector m_vecLongEffectOffset; // 0x1504	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PowerSlashParticle; // 0x1510	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PowerSlashFullParticle; // 0x15f0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x16d0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x17b0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PowerUpParticle; // 0x1890	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strStartSound; // 0x1970	
	CSoundEventName m_strDamageImpactSound; // 0x1980	
	CSoundEventName m_strDamageImpactVictimSound; // 0x1990	
	CSoundEventName m_strPowerUp1Sounds; // 0x19a0	
	CSoundEventName m_strPowerUp2Sounds; // 0x19b0	
	CSoundEventName m_strPowerUp3Sounds; // 0x19c0	
	CSoundEventName m_strWhizbySound; // 0x19d0	
	CSoundEventName m_strSlashSound; // 0x19e0	
	CSoundEventName m_strSlashFullSound; // 0x19f0	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_SlowModifier; // 0x1a00	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_IceGrenadeVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_IceGrenadeSlowModifier; // 0x15c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplosionSound; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_ArmorUpgrade_ReturnFireVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ReactiveArmorModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_TechShieldImpact : public CCitadelModifier
{
public:
	ParticleIndex_t m_AmbientEffect; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x20
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "HeroID_t m_nHeroID"
// MNetworkVarNames "HeroID_t m_nHeroLoading"
class CCitadelHeroComponent : public CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0008[0xc]; // 0x8
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnHeroChanged"
	HeroID_t m_nHeroID; // 0x14	
	// MNetworkEnable
	// MNetworkPriority "32"
	HeroID_t m_nHeroLoading; // 0x18	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelHeroComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_referenced_but_impl_is_contained(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelHeroComponent")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7a0
// Has VTable
class CRopeKeyframeAlias_move_rope : public CRopeKeyframe
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Tokamak_EnemySmokeAOE_VData : public CCitadelModifierAuraVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x830
// Has VTable
class CCitadel_Projectile_BloodBomb : public CCitadelProjectile
{
public:
	bool m_bSecondBomb; // 0x800	
private:
	[[maybe_unused]] uint8_t __pad0801[0x3]; // 0x801
public:
	int32_t m_nBeepSoundBuildupCount; // 0x804	
	float m_flBeepSoundIntervalBias; // 0x808	
	float m_flBeepSoundMaxFrequency; // 0x80c	
	float m_flArmingDuration; // 0x810	
private:
	[[maybe_unused]] uint8_t __pad0814[0x4]; // 0x814
public:
	CUtlVector< float32 > m_vecBeepIntervals; // 0x818	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1668
// Has VTable
// 
// MNetworkVarNames "int m_iLane"
// MNetworkVarNames "EHANDLE m_hTargetedEnemy"
// MNetworkVarNames "GameTime_t m_flFadeOutStart"
// MNetworkVarNames "GameTime_t m_flFadeOutEnd"
// MNetworkVarNames "Vector m_vecElectricBeamLookTarget"
// MNetworkVarNames "int m_nElectricBeamCasts"
class CNPC_Boss_Tier2 : public CAI_CitadelNPC
{
private:
	[[maybe_unused]] uint8_t __pad1578[0x8]; // 0x1578
public:
	Vector m_vecStartingPosition; // 0x1580	
	// MNetworkEnable
	int32_t m_iLane; // 0x158c	
private:
	[[maybe_unused]] uint8_t __pad1590[0x8]; // 0x1590
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTargetedEnemy; // 0x1598	
	// MNetworkEnable
	GameTime_t m_flFadeOutStart; // 0x159c	
	// MNetworkEnable
	GameTime_t m_flFadeOutEnd; // 0x15a0	
private:
	[[maybe_unused]] uint8_t __pad15a4[0x24]; // 0x15a4
public:
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector m_vecElectricBeamLookTarget; // 0x15c8	
	// MNetworkEnable
	int32_t m_nElectricBeamCasts; // 0x15d4	
private:
	[[maybe_unused]] uint8_t __pad15d8[0x28]; // 0x15d8
public:
	CEntityIOOutput m_eventOnBossKilled; // 0x1600	
	
	// Static fields:
	static ConditionId_t &Get_COND_STAGGERED(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[0]->m_pInstance);};
	static ConditionId_t &Get_COND_T2BOSS_ELECTRIC_BEAM_ATTACK_AVAILABLE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[1]->m_pInstance);};
	static ConditionId_t &Get_COND_T2BOSS_ELECTRIC_BEAM_TARGET_LOST(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[2]->m_pInstance);};
	static ConditionId_t &Get_COND_T2BOSS_ROCKET_BARRAGE_ATTACK_AVAILABLE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[3]->m_pInstance);};
	static ConditionId_t &Get_COND_T2BOSS_STOMP_ATTACK_AVAILABLE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[4]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_STAND_STILL(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[5]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_IDLE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[6]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_WANDER(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[7]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_STUNNED(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[8]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_STAGGERED(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[9]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_MOVE_TO_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[10]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_ATTACK_WITH_GUN_STANDING(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[11]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_ATTACK_WITH_GUN_ROAMING(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[12]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_ATTACK_WITH_GUN_ADVANCING(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[13]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_ATTACK_WITH_ROCKET_BARRAGE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[14]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_ATTACK_WITH_ELECTRIC_BEAM(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[15]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T2BOSS_ATTACK_WITH_STOMP(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[16]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_MOVE_TO_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[17]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_WANDER_BASE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[18]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_STUNNED(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[19]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_STAGGERED(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[20]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_GUN_SELECT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[21]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_GUN_FIRE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[22]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_GUN_WALK_AND_FIRE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[23]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_ROCKET_BARRAGE_SELECT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[24]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_ROCKET_BARRAGE_ACTIVATE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[25]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_ROCKET_BARRAGE_FIRING(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[26]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_ELECTRIC_BEAM_SELECT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[27]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_ELECTRIC_BEAM_ACTIVATE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[28]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_ELECTRIC_BEAM_FIRING(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[29]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_ELECTRIC_BEAM_WALK_AND_FIRE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[30]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T2BOSS_STOMP_ACTIVATE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2")->GetStaticFields()[31]->m_pInstance);};
	
	// Datamap fields:
	// CUtlSymbolLarge m_strBossEntityName; // 0x1630
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_WeaponUpgrade_SurgingPower : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f8
// Has VTable
class CEnvInstructorVRHint : public CPointEntity
{
public:
	CUtlSymbolLarge m_iszName; // 0x4b8	
	CUtlSymbolLarge m_iszHintTargetEntity; // 0x4c0	
	int32_t m_iTimeout; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04cc[0x4]; // 0x4cc
public:
	CUtlSymbolLarge m_iszCaption; // 0x4d0	
	CUtlSymbolLarge m_iszStartSound; // 0x4d8	
	int32_t m_iLayoutFileType; // 0x4e0	
private:
	[[maybe_unused]] uint8_t __pad04e4[0x4]; // 0x4e4
public:
	CUtlSymbolLarge m_iszCustomLayoutFile; // 0x4e8	
	int32_t m_iAttachType; // 0x4f0	
	float m_flHeightOffset; // 0x4f4	
	
	// Datamap fields:
	// CUtlSymbolLarge InputShowHint; // 0x0
	// void InputEndHint; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_SmokeBomb : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb98
// Has VTable
class CCitadel_Ability_ChargedShot : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_ChannelParticle; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Tier2Boss_RocketDamage_AuraDebuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CPlatTrigger : public CBaseModelEntity
{
public:
	CHandle< CFuncPlat > m_pPlatform; // 0x748	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityCadenceAnthemVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AnthemAOEModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CModifier_FleetfootBoots_BonusClip : public CCitadelModifier
{
public:
	int32_t m_nBonusClip; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x190
// Has VTable
// Is Abstract
class CCitadel_Modifier_StatStealBase : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Glitch : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CCitadelHeroLoader : public CBaseEntity
{
public:
	CUtlSymbolLarge m_hero; // 0x4b8	
	int32_t m_nLoadSeq; // 0x4c0	
	CHandle< CBaseEntity > m_hOwner; // 0x4c4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Disarmed : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_ArmorUpgrade_VexBarrier : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe88
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelPlayerBotNPCBrainVData : public CAI_CitadelNPCVData
{
public:
	// MPropertyStartGroup "Movement"
	float m_flJumpMaxRise; // 0xe18	
	float m_flAirJumpMin; // 0xe1c	
	float m_flJumpMaxDrop; // 0xe20	
	float m_flJumpMaxDist; // 0xe24	
	float m_flJumpMinDist; // 0xe28	
	float m_flClimbUpCostBase; // 0xe2c	
	float m_flClimbUpCostScalar; // 0xe30	
	float m_flFaceTargetDistance; // 0xe34	
	float m_flNavGoalTolerance; // 0xe38	
	float m_flVerticalAttachOffset; // 0xe3c	
	float m_flStuckTime; // 0xe40	
	float m_flStuckTimeAir; // 0xe44	
	float m_flMajorStuckTime; // 0xe48	
	float m_flStuckDistance; // 0xe4c	
	float m_flMaxPathDistance; // 0xe50	
	float m_flMinLanePathDistance; // 0xe54	
	float m_flEnemyDistanceForReload; // 0xe58	
	float m_flReloadEnemyFarPct; // 0xe5c	
	float m_flReloadEnemyLoSPct; // 0xe60	
	float m_flReloadEnemyLosTime; // 0xe64	
	float m_flMinShootTimeToReload; // 0xe68	
	float m_flDashDamageThreshold; // 0xe6c	
	float m_flDashDamageTickDown; // 0xe70	
	float m_flMinDesiredDashDist; // 0xe74	
	float m_flMinAbilityAimTime; // 0xe78	
	float m_flDisengageFromEnemyToLaneDist; // 0xe7c	
	float m_flDefendBaseSearchRadius; // 0xe80	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x678
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Wrecker_UltimateVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_EnemyGrabModifier; // 0x5f8	
	CEmbeddedSubclass< CCitadelModifier > m_EnemyThrowModifier; // 0x608	
	CEmbeddedSubclass< CCitadelModifier > m_EnemyDamageModifier; // 0x618	
	CEmbeddedSubclass< CCitadelModifier > m_InvincibleModifier; // 0x628	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_StartSound; // 0x638	
	CSoundEventName m_AmbientLoopingSound; // 0x648	
	CSoundEventName m_GrabSound; // 0x658	
	CSoundEventName m_ThrowSound; // 0x668	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Low_Health_Glow : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1b8
// Has VTable
class CCitadel_Modifier_Magic_Clarity_Buff : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xa8]; // 0xc8
public:
	uint64_t m_iAbilityID; // 0x170	
private:
	[[maybe_unused]] uint8_t __pad0178[0x38]; // 0x178
public:
	bool m_bAbilityLocked; // 0x1b0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x258
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flStartTime"
// MNetworkVarNames "uint32 m_iWindSeed"
// MNetworkVarNames "uint16 m_iMinWind"
// MNetworkVarNames "uint16 m_iMaxWind"
// MNetworkVarNames "int32 m_windRadius"
// MNetworkVarNames "uint16 m_iMinGust"
// MNetworkVarNames "uint16 m_iMaxGust"
// MNetworkVarNames "float32 m_flMinGustDelay"
// MNetworkVarNames "float32 m_flMaxGustDelay"
// MNetworkVarNames "float32 m_flGustDuration"
// MNetworkVarNames "uint16 m_iGustDirChange"
// MNetworkVarNames "Vector m_location"
// MNetworkVarNames "uint16 m_iInitialWindDir"
// MNetworkVarNames "float32 m_flInitialWindSpeed"
class CEnvWindShared
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	GameTime_t m_flStartTime; // 0x8	
	// MNetworkEnable
	uint32_t m_iWindSeed; // 0xc	
	// MNetworkEnable
	uint16_t m_iMinWind; // 0x10	
	// MNetworkEnable
	uint16_t m_iMaxWind; // 0x12	
	// MNetworkEnable
	int32_t m_windRadius; // 0x14	
	// MNetworkEnable
	uint16_t m_iMinGust; // 0x18	
	// MNetworkEnable
	uint16_t m_iMaxGust; // 0x1a	
	// MNetworkEnable
	float m_flMinGustDelay; // 0x1c	
	// MNetworkEnable
	float m_flMaxGustDelay; // 0x20	
	// MNetworkEnable
	float m_flGustDuration; // 0x24	
	// MNetworkEnable
	uint16_t m_iGustDirChange; // 0x28	
private:
	[[maybe_unused]] uint8_t __pad002a[0x2]; // 0x2a
public:
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector m_location; // 0x2c	
	int32_t m_iszGustSound; // 0x38	
	int32_t m_iWindDir; // 0x3c	
	float m_flWindSpeed; // 0x40	
	Vector m_currentWindVector; // 0x44	
	Vector m_CurrentSwayVector; // 0x50	
	Vector m_PrevSwayVector; // 0x5c	
	// MNetworkEnable
	uint16_t m_iInitialWindDir; // 0x68	
private:
	[[maybe_unused]] uint8_t __pad006a[0x2]; // 0x6a
public:
	// MNetworkEnable
	float m_flInitialWindSpeed; // 0x6c	
	CEntityIOOutput m_OnGustStart; // 0x70	
	CEntityIOOutput m_OnGustEnd; // 0x98	
	GameTime_t m_flVariationTime; // 0xc0	
	GameTime_t m_flSwayTime; // 0xc4	
	GameTime_t m_flSimTime; // 0xc8	
	GameTime_t m_flSwitchTime; // 0xcc	
	float m_flAveWindSpeed; // 0xd0	
	bool m_bGusting; // 0xd4	
private:
	[[maybe_unused]] uint8_t __pad00d5[0x3]; // 0xd5
public:
	float m_flWindAngleVariation; // 0xd8	
	float m_flWindSpeedVariation; // 0xdc	
	CHandle< CBaseEntity > m_hEntOwner; // 0xe0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BreakablePropExtraStaminaVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Powerup Values"
	float m_nExtraStamina; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d8
// Has VTable
class CPointHurt : public CPointEntity
{
public:
	int32_t m_nDamage; // 0x4b8	
	int32_t m_bitsDamageType; // 0x4bc	
	float m_flRadius; // 0x4c0	
	float m_flDelay; // 0x4c4	
	CUtlSymbolLarge m_strTarget; // 0x4c8	
	CHandle< CBaseEntity > m_pActivator; // 0x4d0	
	
	// Datamap fields:
	// void CPointHurtHurtThink; // 0x0
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// void InputToggle; // 0x0
	// void InputHurt; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6b0
// Has VTable
// 
// MNetworkVarNames "bool m_bDisabled"
// MNetworkVarNames "bool m_bUpdateOnClient"
// MNetworkVarNames "ValueRemapperInputType_t m_nInputType"
// MNetworkVarNames "CHandle< CBaseEntity> m_hRemapLineStart"
// MNetworkVarNames "CHandle< CBaseEntity> m_hRemapLineEnd"
// MNetworkVarNames "float m_flMaximumChangePerSecond"
// MNetworkVarNames "float m_flDisengageDistance"
// MNetworkVarNames "float m_flEngageDistance"
// MNetworkVarNames "bool m_bRequiresUseKey"
// MNetworkVarNames "ValueRemapperOutputType_t m_nOutputType"
// MNetworkVarNames "CHandle< CBaseEntity > m_hOutputEntities"
// MNetworkVarNames "ValueRemapperHapticsType_t m_nHapticsType"
// MNetworkVarNames "ValueRemapperMomentumType_t m_nMomentumType"
// MNetworkVarNames "float m_flMomentumModifier"
// MNetworkVarNames "float m_flSnapValue"
// MNetworkVarNames "ValueRemapperRatchetType_t m_nRatchetType"
// MNetworkVarNames "float m_flInputOffset"
class CPointValueRemapper : public CBaseEntity
{
public:
	// MNetworkEnable
	bool m_bDisabled; // 0x4b8	
	// MNetworkEnable
	bool m_bUpdateOnClient; // 0x4b9	
private:
	[[maybe_unused]] uint8_t __pad04ba[0x2]; // 0x4ba
public:
	// MNetworkEnable
	ValueRemapperInputType_t m_nInputType; // 0x4bc	
	CUtlSymbolLarge m_iszRemapLineStartName; // 0x4c0	
	CUtlSymbolLarge m_iszRemapLineEndName; // 0x4c8	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hRemapLineStart; // 0x4d0	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hRemapLineEnd; // 0x4d4	
	// MNetworkEnable
	float m_flMaximumChangePerSecond; // 0x4d8	
	// MNetworkEnable
	float m_flDisengageDistance; // 0x4dc	
	// MNetworkEnable
	float m_flEngageDistance; // 0x4e0	
	// MNetworkEnable
	bool m_bRequiresUseKey; // 0x4e4	
private:
	[[maybe_unused]] uint8_t __pad04e5[0x3]; // 0x4e5
public:
	// MNetworkEnable
	ValueRemapperOutputType_t m_nOutputType; // 0x4e8	
private:
	[[maybe_unused]] uint8_t __pad04ec[0x4]; // 0x4ec
public:
	CUtlSymbolLarge m_iszOutputEntityName; // 0x4f0	
	CUtlSymbolLarge m_iszOutputEntity2Name; // 0x4f8	
	CUtlSymbolLarge m_iszOutputEntity3Name; // 0x500	
	CUtlSymbolLarge m_iszOutputEntity4Name; // 0x508	
	// MNetworkEnable
	CNetworkUtlVectorBase< CHandle< CBaseEntity > > m_hOutputEntities; // 0x510	
	// MNetworkEnable
	ValueRemapperHapticsType_t m_nHapticsType; // 0x528	
	// MNetworkEnable
	ValueRemapperMomentumType_t m_nMomentumType; // 0x52c	
	// MNetworkEnable
	float m_flMomentumModifier; // 0x530	
	// MNetworkEnable
	float m_flSnapValue; // 0x534	
	float m_flCurrentMomentum; // 0x538	
	// MNetworkEnable
	ValueRemapperRatchetType_t m_nRatchetType; // 0x53c	
	float m_flRatchetOffset; // 0x540	
	// MNetworkEnable
	float m_flInputOffset; // 0x544	
	bool m_bEngaged; // 0x548	
	bool m_bFirstUpdate; // 0x549	
private:
	[[maybe_unused]] uint8_t __pad054a[0x2]; // 0x54a
public:
	float m_flPreviousValue; // 0x54c	
	GameTime_t m_flPreviousUpdateTickTime; // 0x550	
	Vector m_vecPreviousTestPoint; // 0x554	
	CHandle< CBasePlayerPawn > m_hUsingPlayer; // 0x560	
	float m_flCustomOutputValue; // 0x564	
	CUtlSymbolLarge m_iszSoundEngage; // 0x568	
	CUtlSymbolLarge m_iszSoundDisengage; // 0x570	
	CUtlSymbolLarge m_iszSoundReachedValueZero; // 0x578	
	CUtlSymbolLarge m_iszSoundReachedValueOne; // 0x580	
	CUtlSymbolLarge m_iszSoundMovingLoop; // 0x588	
private:
	[[maybe_unused]] uint8_t __pad0590[0x8]; // 0x590
public:
	CEntityOutputTemplate< float32 > m_Position; // 0x598	
	CEntityOutputTemplate< float32 > m_PositionDelta; // 0x5c0	
	CEntityIOOutput m_OnReachedValueZero; // 0x5e8	
	CEntityIOOutput m_OnReachedValueOne; // 0x610	
	CEntityIOOutput m_OnReachedValueCustom; // 0x638	
	CEntityIOOutput m_OnEngage; // 0x660	
	CEntityIOOutput m_OnDisengage; // 0x688	
	
	// Datamap fields:
	// void CPointValueRemapperUpdateThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x828
// Has VTable
class CLogicNPCCounterAABB : public CLogicNPCCounter
{
public:
	Vector m_vDistanceOuterMins; // 0x7f8	
	Vector m_vDistanceOuterMaxs; // 0x804	
	Vector m_vOuterMins; // 0x810	
	Vector m_vOuterMaxs; // 0x81c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_Thumper_3 : public CCitadelModifier
{
public:
	ParticleIndex_t m_nFXIndex; // 0xc8	
	float m_flVisibilityTime; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9c0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_StickyBombAttachedVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BombAttachedParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StunAttachedParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x7b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BombAttachedVictimTeamParticle; // 0x898	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x978	
	CSoundEventName m_strTickTockSound; // 0x988	
	CSoundEventName m_strTickTockFastSound; // 0x998	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x9a8	
	float m_DetonateWarningTime; // 0x9b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa78
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierLashGrappleEnemyDebuffVData : public CCitadel_Modifier_StunnedVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GrappleParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaunchParticle; // 0x7b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x898	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RopeParticle; // 0x978	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ImpactSound; // 0xa58	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0xa68	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_SpeedBoost : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CLightOrthoEntity : public CLightEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CBaseLockonAbilityVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_TargetModifier; // 0x14e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strApplyLockonStack; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x550
// Has VTable
class CEnvSoundscapeTriggerable : public CEnvSoundscape
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_LastBreath : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xa8]; // 0xc8
public:
	float m_flDamageToAbsorb; // 0x170	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Bomber_Ability03 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CScaleFunctionAbilityProperty_NanoTechRoundsDamage : public CScaleFunctionBase
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x78
// Has VTable
class CAI_MotorNavLink : public CAI_MotorTransition
{
public:
	int32_t m_nNavLinkActiveType; // 0x60	
private:
	[[maybe_unused]] uint8_t __pad0064[0x4]; // 0x64
public:
	CGlobalSymbol m_strNavLinkActiveMovement; // 0x68	
	
	// Datamap fields:
	// CHandle< CBaseEntity > m_hNavLinkAreaEntity; // 0x70
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x640
// Has VTable
class CSoundOpvarSetPointEntity : public CSoundOpvarSetPointBase
{
public:
	CEntityIOOutput m_OnEnter; // 0x550	
	CEntityIOOutput m_OnExit; // 0x578	
	bool m_bAutoDisable; // 0x5a0	
private:
	[[maybe_unused]] uint8_t __pad05a1[0x23]; // 0x5a1
public:
	float m_flDistanceMin; // 0x5c4	
	float m_flDistanceMax; // 0x5c8	
	float m_flDistanceMapMin; // 0x5cc	
	float m_flDistanceMapMax; // 0x5d0	
	float m_flOcclusionRadius; // 0x5d4	
	float m_flOcclusionMin; // 0x5d8	
	float m_flOcclusionMax; // 0x5dc	
	float m_flValSetOnDisable; // 0x5e0	
	bool m_bSetValueOnDisable; // 0x5e4	
	bool m_bReloading; // 0x5e5	
private:
	[[maybe_unused]] uint8_t __pad05e6[0x2]; // 0x5e6
public:
	int32_t m_nSimulationMode; // 0x5e8	
	int32_t m_nVisibilitySamples; // 0x5ec	
	Vector m_vDynamicProxyPoint; // 0x5f0	
	float m_flDynamicMaximumOcclusion; // 0x5fc	
	CEntityHandle m_hDynamicEntity; // 0x600	
private:
	[[maybe_unused]] uint8_t __pad0604[0x4]; // 0x604
public:
	CUtlSymbolLarge m_iszDynamicEntityName; // 0x608	
	float m_flPathingDistanceNormFactor; // 0x610	
	Vector m_vPathingSourcePos; // 0x614	
	Vector m_vPathingListenerPos; // 0x620	
	Vector m_vPathingDirection; // 0x62c	
	int32_t m_nPathingSourceIndex; // 0x638	
	
	// Datamap fields:
	// void InputSetDisabledValue; // 0x0
	// void CSoundOpvarSetPointEntitySetOpvarThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc10
// Has VTable
// 
// MNetworkUserGroupProxy "CBasePlayerPawn"
// MNetworkUserGroupProxy "CBasePlayerPawn"
// MNetworkExcludeByUserGroup "FogController"
// MNetworkIncludeByUserGroup "Player"
// MNetworkIncludeByUserGroup "Water"
// MNetworkIncludeByUserGroup "LocalPlayerExclusive"
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkOverride "m_vecX CNetworkOriginCellCoordQuantizedVector"
// MNetworkOverride "m_vecY CNetworkOriginCellCoordQuantizedVector"
// MNetworkOverride "m_vecZ CNetworkOriginCellCoordQuantizedVector"
// MNetworkExcludeByName "m_pWeaponServices"
// MNetworkExcludeByName "m_pItemServices"
// MNetworkExcludeByName "m_pAutoaimServices"
// MNetworkExcludeByName "m_pObserverServices"
// MNetworkExcludeByName "m_pWaterServices"
// MNetworkExcludeByName "m_pUseServices"
// MNetworkExcludeByName "m_pFlashlightServices"
// MNetworkExcludeByName "m_pMovementServices"
// MNetworkVarNames "CPlayer_WeaponServices * m_pWeaponServices"
// MNetworkVarNames "CPlayer_ItemServices * m_pItemServices"
// MNetworkVarNames "CPlayer_AutoaimServices * m_pAutoaimServices"
// MNetworkVarNames "CPlayer_ObserverServices * m_pObserverServices"
// MNetworkVarNames "CPlayer_WaterServices * m_pWaterServices"
// MNetworkVarNames "CPlayer_UseServices * m_pUseServices"
// MNetworkVarNames "CPlayer_FlashlightServices * m_pFlashlightServices"
// MNetworkVarNames "CPlayer_CameraServices * m_pCameraServices"
// MNetworkVarNames "CPlayer_MovementServices * m_pMovementServices"
// MNetworkUserGroupProxy "CBasePlayerPawn"
// MNetworkVarNames "ViewAngleServerChange_t m_ServerViewAngleChanges"
// MNetworkVarNames "uint32 m_iHideHUD"
// MNetworkVarNames "sky3dparams_t m_skybox3d"
// MNetworkVarNames "GameTime_t m_flDeathTime"
// MNetworkVarNames "CHandle< CBasePlayerController> m_hController"
class CBasePlayerPawn : public CBaseCombatCharacter
{
public:
	// MNetworkEnable
	CPlayer_WeaponServices* m_pWeaponServices; // 0xa78	
	// MNetworkEnable
	CPlayer_ItemServices* m_pItemServices; // 0xa80	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	CPlayer_AutoaimServices* m_pAutoaimServices; // 0xa88	
	// MNetworkEnable
	CPlayer_ObserverServices* m_pObserverServices; // 0xa90	
	// MNetworkEnable
	CPlayer_WaterServices* m_pWaterServices; // 0xa98	
	// MNetworkEnable
	CPlayer_UseServices* m_pUseServices; // 0xaa0	
	// MNetworkEnable
	CPlayer_FlashlightServices* m_pFlashlightServices; // 0xaa8	
	// MNetworkEnable
	CPlayer_CameraServices* m_pCameraServices; // 0xab0	
	// MNetworkEnable
	CPlayer_MovementServices* m_pMovementServices; // 0xab8	
private:
	[[maybe_unused]] uint8_t __pad0ac0[0x8]; // 0xac0
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	CUtlVectorEmbeddedNetworkVar< ViewAngleServerChange_t > m_ServerViewAngleChanges; // 0xac8	
	uint32_t m_nHighestGeneratedServerViewAngleChangeIndex; // 0xb18	
	QAngle v_angle; // 0xb1c	
	QAngle v_anglePrevious; // 0xb28	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	uint32_t m_iHideHUD; // 0xb34	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	// -> scale - 0xb40
	// -> origin - 0xb44
	// -> bClip3DSkyBoxNearToWorldFar - 0xb50
	// -> flClip3DSkyBoxNearToWorldFarOffset - 0xb54
	// -> fog - 0xb58
	// -> m_nWorldGroupID - 0xbc0
	sky3dparams_t m_skybox3d; // 0xb38	
	GameTime_t m_fTimeLastHurt; // 0xbc8	
	// MNetworkEnable
	GameTime_t m_flDeathTime; // 0xbcc	
	GameTime_t m_fNextSuicideTime; // 0xbd0	
	bool m_fInitHUD; // 0xbd4	
private:
	[[maybe_unused]] uint8_t __pad0bd5[0x3]; // 0xbd5
public:
	CAI_Expresser* m_pExpresser; // 0xbd8	
	// MNetworkEnable
	CHandle< CBasePlayerController > m_hController; // 0xbe0	
private:
	[[maybe_unused]] uint8_t __pad0be4[0x4]; // 0xbe4
public:
	float m_fHltvReplayDelay; // 0xbe8	
	float m_fHltvReplayEnd; // 0xbec	
	CEntityIndex m_iHltvReplayEntity; // 0xbf0	
private:
	[[maybe_unused]] uint8_t __pad0bf4[0x4]; // 0xbf4
public:
	CUtlVector< sndopvarlatchdata_t > m_sndOpvarLatchData; // 0xbf8	
	
	// Datamap fields:
	// void m_hPawnListEntry; // 0xbe4
	// void m_hLastValidNavArea; // 0xa28
	// void m_hCurrentNavArea; // 0xa18
	// void m_hCurrentNavAreaBlocked; // 0xa38
	// CHandle< CBaseEntity > controller; // 0x7fffffff
	// int32_t InputSetHealth; // 0x0
	// bool InputSetHUDVisibility; // 0x0
	// CUtlSymbolLarge InputSetFogController; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x958
// Has VTable
class CCitadel_Projectile_Riptide : public CCitadelProjectile
{
public:
	int32_t m_cTicksNoMovement; // 0x800	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_ArmorUpgrade_Stimpak : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_Knockback : public CCitadel_Modifier_Stunned
{
public:
	float m_flForce; // 0xd0	
	bool m_bKnockedBack; // 0xd4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x560
// Has VTable
class CLogicPlayerProxy : public CLogicalEntity
{
public:
	CHandle< CBaseEntity > m_hPlayer; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	CEntityIOOutput m_PlayerHasAmmo; // 0x4c0	
	CEntityIOOutput m_PlayerHasNoAmmo; // 0x4e8	
	CEntityIOOutput m_PlayerDied; // 0x510	
	CEntityOutputTemplate< int32 > m_RequestedPlayerHealth; // 0x538	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Hero_Testing_Damage : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb00
// Has VTable
class CAbility_Synth_Grasp : public CCitadelBaseAbility
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecTetheredEnemies; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x50
// Has VTable
// 
// MNetworkVarNames "uint8 m_iObserverMode"
// MNetworkVarNames "CHandle< CBaseEntity> m_hObserverTarget"
class CPlayer_ObserverServices : public CPlayerPawnComponent
{
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnObserverModeChanged"
	uint8_t m_iObserverMode; // 0x40	
private:
	[[maybe_unused]] uint8_t __pad0041[0x3]; // 0x41
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnObserverTargetChanged"
	CHandle< CBaseEntity > m_hObserverTarget; // 0x44	
	ObserverMode_t m_iObserverLastMode; // 0x48	
	bool m_bForcedObserverMode; // 0x4c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xac8
// Has VTable
class CCitadel_Ability_TangoTether_Trigger : public CCitadelBaseTriggerAbility
{
public:
	CHandle< CCitadelBaseAbility > m_hBaseAbility; // 0xac0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x930
// Has VTable
class CTriggerBurrowUnderground : public CBaseTrigger
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_pTouchedEntities; // 0x918	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CPhysImpact : public CPointEntity
{
public:
	float m_damage; // 0x4b8	
	float m_distance; // 0x4bc	
	CUtlSymbolLarge m_directionEntityName; // 0x4c0	
	
	// Datamap fields:
	// void CPhysImpactPointAtEntity; // 0x0
	// void InputImpact; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15c0
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "Color m_Entity_Color"
// MNetworkVarNames "float m_Entity_flBrightness"
// MNetworkVarNames "HRenderTextureStrong m_Entity_hCubemapTexture"
// MNetworkVarNames "bool m_Entity_bCustomCubemapTexture"
// MNetworkVarNames "HRenderTextureStrong m_Entity_hLightProbeTexture"
// MNetworkVarNames "HRenderTextureStrong m_Entity_hLightProbeDirectLightIndicesTexture"
// MNetworkVarNames "HRenderTextureStrong m_Entity_hLightProbeDirectLightScalarsTexture"
// MNetworkVarNames "HRenderTextureStrong m_Entity_hLightProbeDirectLightShadowsTexture"
// MNetworkVarNames "Vector m_Entity_vBoxMins"
// MNetworkVarNames "Vector m_Entity_vBoxMaxs"
// MNetworkVarNames "bool m_Entity_bMoveable"
// MNetworkVarNames "int m_Entity_nHandshake"
// MNetworkVarNames "int m_Entity_nEnvCubeMapArrayIndex"
// MNetworkVarNames "int m_Entity_nPriority"
// MNetworkVarNames "bool m_Entity_bStartDisabled"
// MNetworkVarNames "float m_Entity_flEdgeFadeDist"
// MNetworkVarNames "Vector m_Entity_vEdgeFadeDists"
// MNetworkVarNames "int m_Entity_nLightProbeSizeX"
// MNetworkVarNames "int m_Entity_nLightProbeSizeY"
// MNetworkVarNames "int m_Entity_nLightProbeSizeZ"
// MNetworkVarNames "int m_Entity_nLightProbeAtlasX"
// MNetworkVarNames "int m_Entity_nLightProbeAtlasY"
// MNetworkVarNames "int m_Entity_nLightProbeAtlasZ"
// MNetworkVarNames "bool m_Entity_bEnabled"
class CEnvCombinedLightProbeVolume : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x1060]; // 0x4b8
public:
	// MNetworkEnable
	// MNetworkChangeCallback "StateChanged"
	Color m_Entity_Color; // 0x1518	
	// MNetworkEnable
	// MNetworkChangeCallback "StateChanged"
	float m_Entity_flBrightness; // 0x151c	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_Entity_hCubemapTexture; // 0x1520	
	// MNetworkEnable
	bool m_Entity_bCustomCubemapTexture; // 0x1528	
private:
	[[maybe_unused]] uint8_t __pad1529[0x7]; // 0x1529
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture; // 0x1530	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightIndicesTexture; // 0x1538	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightScalarsTexture; // 0x1540	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightShadowsTexture; // 0x1548	
	// MNetworkEnable
	Vector m_Entity_vBoxMins; // 0x1550	
	// MNetworkEnable
	Vector m_Entity_vBoxMaxs; // 0x155c	
	// MNetworkEnable
	bool m_Entity_bMoveable; // 0x1568	
private:
	[[maybe_unused]] uint8_t __pad1569[0x3]; // 0x1569
public:
	// MNetworkEnable
	int32_t m_Entity_nHandshake; // 0x156c	
	// MNetworkEnable
	int32_t m_Entity_nEnvCubeMapArrayIndex; // 0x1570	
	// MNetworkEnable
	int32_t m_Entity_nPriority; // 0x1574	
	// MNetworkEnable
	bool m_Entity_bStartDisabled; // 0x1578	
private:
	[[maybe_unused]] uint8_t __pad1579[0x3]; // 0x1579
public:
	// MNetworkEnable
	float m_Entity_flEdgeFadeDist; // 0x157c	
	// MNetworkEnable
	Vector m_Entity_vEdgeFadeDists; // 0x1580	
	// MNetworkEnable
	int32_t m_Entity_nLightProbeSizeX; // 0x158c	
	// MNetworkEnable
	int32_t m_Entity_nLightProbeSizeY; // 0x1590	
	// MNetworkEnable
	int32_t m_Entity_nLightProbeSizeZ; // 0x1594	
	// MNetworkEnable
	int32_t m_Entity_nLightProbeAtlasX; // 0x1598	
	// MNetworkEnable
	int32_t m_Entity_nLightProbeAtlasY; // 0x159c	
	// MNetworkEnable
	int32_t m_Entity_nLightProbeAtlasZ; // 0x15a0	
private:
	[[maybe_unused]] uint8_t __pad15a4[0x15]; // 0x15a4
public:
	// MNetworkEnable
	bool m_Entity_bEnabled; // 0x15b9	
	
	// Datamap fields:
	// void m_Entity_pEnvMap; // 0x15a8
	// void m_Entity_pLightProbeVolume; // 0x15b0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityThumper4VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_PullAOEModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x300
// Has VTable
class CCitadel_Modifier_Bounce_Pad_Stomp : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x230]; // 0xc8
public:
	bool m_bStomped; // 0x2f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_ChargedBomb : public CCitadelModifier
{
public:
	GameTime_t m_flNextBeep; // 0xc8	
	float m_flBeepInterval; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x240
// Has VTable
class CCitadel_Modifier_IncendiaryThinker : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xb0]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CPlayer_WaterServices : public CPlayerPawnComponent
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x960
// Has VTable
class CCitadel_PickupItemSpawner : public CBaseAnimGraph
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcd8
// Has VTable
// 
// MNetworkVarNames "float32 m_flAlphaScale"
// MNetworkVarNames "float32 m_flRadiusScale"
// MNetworkVarNames "float32 m_flSelfIllumScale"
// MNetworkVarNames "Color m_ColorTint"
// MNetworkVarNames "HRenderTextureStrong m_hTextureOverride"
class CEnvParticleGlow : public CParticleSystem
{
public:
	// MNetworkEnable
	float m_flAlphaScale; // 0xcc0	
	// MNetworkEnable
	float m_flRadiusScale; // 0xcc4	
	// MNetworkEnable
	float m_flSelfIllumScale; // 0xcc8	
	// MNetworkEnable
	Color m_ColorTint; // 0xccc	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hTextureOverride; // 0xcd0	
	
	// Datamap fields:
	// float InputSetScale; // 0x0
	// float InputSetAlphaScale; // 0x0
	// Color InputSetColorTint; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
class CFuncVehicleClip : public CBaseModelEntity
{
public:
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d8
// Has VTable
// 
// MNetworkVarNames "bool m_bDisabled"
// MNetworkVarNames "string_t m_iszSoundAreaType"
// MNetworkVarNames "Vector m_vPos"
class CSoundAreaEntityBase : public CBaseEntity
{
public:
	// MNetworkEnable
	bool m_bDisabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x7]; // 0x4b9
public:
	// MNetworkEnable
	CUtlSymbolLarge m_iszSoundAreaType; // 0x4c0	
	// MNetworkEnable
	Vector m_vPos; // 0x4c8	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd70
// Has VTable
// 
// MNetworkVarNames "int m_nPowerLevel"
class CCitadel_Ability_PowerSlash : public CCitadelBaseYamatoAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab8[0xc]; // 0xab8
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	int32_t m_nPowerLevel; // 0xac4	
	ParticleIndex_t m_nCastParticle; // 0xac8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_SleepDagger_Drowsy : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x18]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x110
// Has VTable
class CCitadel_Modifier_ShieldTracker_Base : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x28]; // 0xc8
public:
	Vector m_vecShield; // 0xf0	
	float m_flShieldDamageTime; // 0xfc	
	float m_flShieldBreakTime; // 0x100	
	float m_flShieldBreakHealAmount; // 0x104	
	float m_flShieldBreakHealDone; // 0x108	
	bool m_bShieldHealingAfterBreak; // 0x10c	
	bool m_bForceRegen; // 0x10d	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_CanDamageTier3Phase2 : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x768
// Has VTable
class CFuncBrush : public CBaseModelEntity
{
public:
	BrushSolidities_e m_iSolidity; // 0x748	
	int32_t m_iDisabled; // 0x74c	
	bool m_bSolidBsp; // 0x750	
private:
	[[maybe_unused]] uint8_t __pad0751[0x7]; // 0x751
public:
	CUtlSymbolLarge m_iszExcludedClass; // 0x758	
	bool m_bInvertExclusion; // 0x760	
	bool m_bScriptedMovement; // 0x761	
	
	// Datamap fields:
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// void InputToggle; // 0x0
	// CUtlSymbolLarge InputSetExcluded; // 0x0
	// bool InputSetInvert; // 0x0
	// void InputSetSolid; // 0x0
	// void InputSetNonsolid; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb00
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flDashCastStartTime"
// MNetworkVarNames "Vector m_vDashCastDir"
class CCitadelBaseDashCastAbility : public CCitadelBaseAbility
{
public:
	CHandle< CCitadelBaseAbility > m_hAbilityToTrigger; // 0xab0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flDashCastStartTime; // 0xab4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vDashCastDir; // 0xab8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CEnvFunnel : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CInfoMidBossSpawn : public CServerOnlyPointEntity
{
public:
	int32_t m_iCoverGroupID; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	CUtlSymbolLarge m_iszSquadName; // 0x4c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x19c0
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityLashDownStrikeVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetPreviewParticle; // 0x14e8	
	// MPropertyLeafSuggestionProviderFn
	CGlobalSymbol m_strGroundCastAnimGraphParam; // 0x15c8	
	// MPropertyLeafSuggestionProviderFn
	CGlobalSymbol m_strAirCastAnimGraphParam; // 0x15d0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StompParticle; // 0x15d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StompLineParticle; // 0x16b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StompLineObstructedParticle; // 0x1798	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StompImpactParticle; // 0x1878	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_StompExplosionSound; // 0x1958	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_DownStrikeModifier; // 0x1968	
	CEmbeddedSubclass< CBaseModifier > m_ImpactModifier; // 0x1978	
	// MPropertyStartGroup "+Down Strike Params"
	float m_flHeightUILingerTime; // 0x1988	
	float m_flDamageFrustumHalfWidth; // 0x198c	
	float m_flDamageFrustumAngle; // 0x1990	
	float m_flDamageWaveSpeed; // 0x1994	
	float m_flDamageTraceProbeDamageRadius; // 0x1998	
	float m_flDamageTraceProbeWorldRadius; // 0x199c	
	float m_flDamageTraceProbeStepUpHeight; // 0x19a0	
	float m_flDamageTraceProbeStepDownHeight; // 0x19a4	
	float m_flDamageTraceProbeDropDownRate; // 0x19a8	
	float m_flInitialDamageRadiusInMeters; // 0x19ac	
	int32_t m_nGroundCrackGap; // 0x19b0	
	float m_flGroupLengthTolerance; // 0x19b4	
	float m_flDamageEffectScaleMin; // 0x19b8	
	float m_flDamageEffectScaleMax; // 0x19bc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_ProjectMindVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ProjectMindModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_AcolytesGlove : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1640
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_Stasis_BombVData : public CCitadel_Item_BubbleVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_AuraModifier; // 0x1630	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierHoldingGoldenIdolVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_IdolParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18
// Has Trivial Destructor
struct SequenceHistory_t
{
public:
	HSequence m_hSequence; // 0x0	
	GameTime_t m_flSeqStartTime; // 0x4	
	float m_flSeqFixedCycle; // 0x8	
	AnimLoopMode_t m_nSeqLoopMode; // 0xc	
	float m_flPlaybackRate; // 0x10	
	float m_flCyclesPerSecond; // 0x14	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_BaseHeldItemVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_ItemModel; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x328
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_BreakablePropModifierPickupVData : public CCitadel_BreakablePropPickupVData
{
public:
	CEmbeddedSubclass< CCitadelModifier > m_sModifer; // 0x318	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1630
// Has VTable
// 
// MNetworkVarNames "int m_iLane"
// MNetworkVarNames "QAngle m_angTargeting1"
// MNetworkVarNames "QAngle m_angTargeting2"
// MNetworkVarNames "int m_nElectricBeamCasts"
// MNetworkVarNames "ETier3State_t m_eAliveState"
// MNetworkVarNames "ETier3Phase_t m_ePhase"
class CNPC_Boss_Tier3 : public CAI_CitadelNPC
{
public:
	// MNetworkEnable
	int32_t m_iLane; // 0x1578	
private:
	[[maybe_unused]] uint8_t __pad157c[0x30]; // 0x157c
public:
	// MNetworkEnable
	// MNetworkEncoder "qangle"
	QAngle m_angTargeting1; // 0x15ac	
	// MNetworkEnable
	// MNetworkEncoder "qangle"
	QAngle m_angTargeting2; // 0x15b8	
	// MNetworkEnable
	int32_t m_nElectricBeamCasts; // 0x15c4	
private:
	[[maybe_unused]] uint8_t __pad15c8[0x20]; // 0x15c8
public:
	CEntityIOOutput m_eventOnBossKilled; // 0x15e8	
	CUtlSymbolLarge m_backdoorProtectionTrigger; // 0x1610	
private:
	[[maybe_unused]] uint8_t __pad1618[0x4]; // 0x1618
public:
	// MNetworkEnable
	ETier3State_t m_eAliveState; // 0x161c	
private:
	[[maybe_unused]] uint8_t __pad1620[0x4]; // 0x1620
public:
	// MNetworkEnable
	ETier3Phase_t m_ePhase; // 0x1624	
	
	// Static fields:
	static ConditionId_t &Get_COND_T3BOSS_CAN_ELECTRIC_BEAM(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[0]->m_pInstance);};
	static ConditionId_t &Get_COND_T3BOSS_OVER_CORE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[1]->m_pInstance);};
	static ConditionId_t &Get_COND_T3BOSS_HEALTH_PHASE_1(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[2]->m_pInstance);};
	static ConditionId_t &Get_COND_T3BOSS_HEALTH_PHASE_2(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[3]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T3BOSS_STAND_STILL(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[4]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T3BOSS_IDLE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[5]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T3BOSS_ATTACK_WITH_ELECTRIC_BEAM(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[6]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T3BOSS_ATTACK_WITH_ELECTRIC_BEAM_QUICK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[7]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T3BOSS_RETURN_TO_HOME_POSITION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[8]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T3BOSS_FALL_BACK_TO_CORE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[9]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T3BOSS_MOVE_TO_RANDOM_POSITION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[10]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_T3BOSS_MOVE_TO_LARGEST_ENEMY_GROUP(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[11]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T3BOSS_FACE_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[12]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T3BOSS_ELECTRIC_BEAM_SELECT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[13]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T3BOSS_ELECTRIC_BEAM_FIRING(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[14]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T3BOSS_MOVE_TO_DYING_POSITION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[15]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T3BOSS_WAIT_AT_DYING_POSITION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[16]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T3BOSS_MOVE_TO_VULNERABLE_POSITION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[17]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T3BOSS_ARRIVE_AT_VULNERABLE_POSITION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[18]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T3BOSS_MOVE_TO_HOME_POSITION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[19]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T3BOSS_MOVE_TO_RANDOM_POSITION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[20]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_T3BOSS_MOVE_TO_LARGEST_ENEMY_GROUP(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3")->GetStaticFields()[21]->m_pInstance);};
	
	// Datamap fields:
	// void m_vecStartingPosition; // 0x1588
	// int32_t m_nDyingEndCoverPointID; // 0x1598
	// int32_t m_nVulnerableCoverPointID; // 0x159c
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityCadenceGrandFinaleVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_StageModel; // 0x14e8	
	float m_flStageModelHeight; // 0x15c8	
	float m_flStageModelWidth; // 0x15cc	
	float m_flStageModelLength; // 0x15d0	
	float m_flStageModelScale; // 0x15d4	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_GrandFinaleAOEModifier; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x228
// Has VTable
class CCitadel_Modifier_Gravity_Lasso_Enemy : public CCitadel_Modifier_Stunned
{
public:
	ELassoHoldPosition m_eHoldPosition; // 0xd0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flTime"
class CCitadelAutoScaledTime
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	GameTime_t m_flTime; // 0x8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Infuser : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc40
// Has VTable
class CCitadel_Ability_Tier2Boss_RocketBarrage : public CCitadelBaseAbilityServerOnly
{
public:
	int32_t m_nGrenadesLeft; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d8
// Has VTable
class CPointModifierThinker : public CBaseEntity
{
public:
	CModifierHandleTyped< CCitadelModifier > m_hModifier; // 0x4b8	
	bool m_bSendToClients; // 0x4d0	
	
	// Datamap fields:
	// void CPointModifierThinkerOnModifierLost; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb80
// Has VTable
class CCitadel_Item_ZiplineMastery : public CCitadel_Item
{
public:
	bool m_bWasZiplining; // 0xad0	
private:
	[[maybe_unused]] uint8_t __pad0ad1[0x3]; // 0xad1
public:
	GameTime_t m_flZipStartTime; // 0xad4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityLockDownVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x14e8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x15c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x618
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_NearbyEnemyBoostVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_BerserkerSound; // 0x5f8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5e0
// Has VTable
class CPointAngularVelocitySensor : public CPointEntity
{
public:
	CHandle< CBaseEntity > m_hTargetEntity; // 0x4b8	
	float m_flThreshold; // 0x4bc	
	int32_t m_nLastCompareResult; // 0x4c0	
	int32_t m_nLastFireResult; // 0x4c4	
	GameTime_t m_flFireTime; // 0x4c8	
	float m_flFireInterval; // 0x4cc	
	float m_flLastAngVelocity; // 0x4d0	
	QAngle m_lastOrientation; // 0x4d4	
	Vector m_vecAxis; // 0x4e0	
	bool m_bUseHelper; // 0x4ec	
private:
	[[maybe_unused]] uint8_t __pad04ed[0x3]; // 0x4ed
public:
	CEntityOutputTemplate< float32 > m_AngularVelocity; // 0x4f0	
	CEntityIOOutput m_OnLessThan; // 0x518	
	CEntityIOOutput m_OnLessThanOrEqualTo; // 0x540	
	CEntityIOOutput m_OnGreaterThan; // 0x568	
	CEntityIOOutput m_OnGreaterThanOrEqualTo; // 0x590	
	CEntityIOOutput m_OnEqualTo; // 0x5b8	
	
	// Datamap fields:
	// void InputTest; // 0x0
	// void InputTestWithInterval; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_Warden_RiotProtocol_EnemyDebuff : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x38]; // 0xc8
public:
	float m_flEnemyMoveSlow; // 0x100	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_ProjectMind : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Bomber_ULT : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1550
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Upgrade_OverdriveClip_VData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_OverdriveClipModifier; // 0x1530	
	CEmbeddedSubclass< CCitadelModifier > m_ReloadModifier; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Galvanic_Storm_EffectVData : public CCitadel_Modifier_ChainLightningEffectVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffChainParticle; // 0x6f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_Passive_Camouflage : public CCitadelModifier
{
public:
	float m_flRate; // 0xc8	
	Vector m_vLastPosition; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x298
// Has VTable
class CCitadel_Modifier_ThermalDetonator_Thinker : public CCitadelModifierAura
{
public:
	Vector m_vecOrigin; // 0xe8	
	Vector m_vecWorldSpaceMins; // 0xf4	
	Vector m_vecWorldSpaceMaxs; // 0x100	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x528
// Has VTable
class CEnvInstructorHint : public CPointEntity
{
public:
	CUtlSymbolLarge m_iszName; // 0x4b8	
	CUtlSymbolLarge m_iszReplace_Key; // 0x4c0	
	CUtlSymbolLarge m_iszHintTargetEntity; // 0x4c8	
	int32_t m_iTimeout; // 0x4d0	
	int32_t m_iDisplayLimit; // 0x4d4	
	CUtlSymbolLarge m_iszIcon_Onscreen; // 0x4d8	
	CUtlSymbolLarge m_iszIcon_Offscreen; // 0x4e0	
	CUtlSymbolLarge m_iszCaption; // 0x4e8	
	CUtlSymbolLarge m_iszActivatorCaption; // 0x4f0	
	Color m_Color; // 0x4f8	
	float m_fIconOffset; // 0x4fc	
	float m_fRange; // 0x500	
	uint8_t m_iPulseOption; // 0x504	
	uint8_t m_iAlphaOption; // 0x505	
	uint8_t m_iShakeOption; // 0x506	
	bool m_bStatic; // 0x507	
	bool m_bNoOffscreen; // 0x508	
	bool m_bForceCaption; // 0x509	
private:
	[[maybe_unused]] uint8_t __pad050a[0x2]; // 0x50a
public:
	int32_t m_iInstanceType; // 0x50c	
	bool m_bSuppressRest; // 0x510	
private:
	[[maybe_unused]] uint8_t __pad0511[0x7]; // 0x511
public:
	CUtlSymbolLarge m_iszBinding; // 0x518	
	bool m_bAllowNoDrawTarget; // 0x520	
	bool m_bAutoStart; // 0x521	
	bool m_bLocalPlayerOnly; // 0x522	
	
	// Datamap fields:
	// CUtlSymbolLarge InputShowHint; // 0x0
	// void InputEndHint; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CEnvTracer : public CPointEntity
{
public:
	Vector m_vecEnd; // 0x4b8	
	float m_flDelay; // 0x4c4	
	
	// Datamap fields:
	// void CEnvTracerTracerThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CInfoGameEventProxy : public CPointEntity
{
public:
	CUtlSymbolLarge m_iszEventName; // 0x4b8	
	float m_flRange; // 0x4c0	
	
	// Datamap fields:
	// CUtlSymbolLarge InputGenerateGameEvent; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "float m_FOV"
// MNetworkVarNames "float m_Resolution"
// MNetworkVarNames "bool m_bFogEnable"
// MNetworkVarNames "Color m_FogColor"
// MNetworkVarNames "float m_flFogStart"
// MNetworkVarNames "float m_flFogEnd"
// MNetworkVarNames "float m_flFogMaxDensity"
// MNetworkVarNames "bool m_bActive"
// MNetworkVarNames "bool m_bUseScreenAspectRatio"
// MNetworkVarNames "float m_flAspectRatio"
// MNetworkVarNames "bool m_bNoSky"
// MNetworkVarNames "float m_fBrightness"
// MNetworkVarNames "float m_flZFar"
// MNetworkVarNames "float m_flZNear"
// MNetworkVarNames "bool m_bCanHLTVUse"
// MNetworkVarNames "bool m_bDofEnabled"
// MNetworkVarNames "float m_flDofNearBlurry"
// MNetworkVarNames "float m_flDofNearCrisp"
// MNetworkVarNames "float m_flDofFarCrisp"
// MNetworkVarNames "float m_flDofFarBlurry"
// MNetworkVarNames "float m_flDofTiltToGround"
class CPointCamera : public CBaseEntity
{
public:
	// MNetworkEnable
	float m_FOV; // 0x4b8	
	// MNetworkEnable
	float m_Resolution; // 0x4bc	
	// MNetworkEnable
	bool m_bFogEnable; // 0x4c0	
	// MNetworkEnable
	Color m_FogColor; // 0x4c1	
private:
	[[maybe_unused]] uint8_t __pad04c5[0x3]; // 0x4c5
public:
	// MNetworkEnable
	float m_flFogStart; // 0x4c8	
	// MNetworkEnable
	float m_flFogEnd; // 0x4cc	
	// MNetworkEnable
	float m_flFogMaxDensity; // 0x4d0	
	// MNetworkEnable
	bool m_bActive; // 0x4d4	
	// MNetworkEnable
	bool m_bUseScreenAspectRatio; // 0x4d5	
private:
	[[maybe_unused]] uint8_t __pad04d6[0x2]; // 0x4d6
public:
	// MNetworkEnable
	float m_flAspectRatio; // 0x4d8	
	// MNetworkEnable
	bool m_bNoSky; // 0x4dc	
private:
	[[maybe_unused]] uint8_t __pad04dd[0x3]; // 0x4dd
public:
	// MNetworkEnable
	float m_fBrightness; // 0x4e0	
	// MNetworkEnable
	float m_flZFar; // 0x4e4	
	// MNetworkEnable
	float m_flZNear; // 0x4e8	
	// MNetworkEnable
	bool m_bCanHLTVUse; // 0x4ec	
	// MNetworkEnable
	bool m_bDofEnabled; // 0x4ed	
private:
	[[maybe_unused]] uint8_t __pad04ee[0x2]; // 0x4ee
public:
	// MNetworkEnable
	float m_flDofNearBlurry; // 0x4f0	
	// MNetworkEnable
	float m_flDofNearCrisp; // 0x4f4	
	// MNetworkEnable
	float m_flDofFarCrisp; // 0x4f8	
	// MNetworkEnable
	float m_flDofFarBlurry; // 0x4fc	
	// MNetworkEnable
	float m_flDofTiltToGround; // 0x500	
	float m_TargetFOV; // 0x504	
	float m_DegreesPerSecond; // 0x508	
	bool m_bIsOn; // 0x50c	
private:
	[[maybe_unused]] uint8_t __pad050d[0x3]; // 0x50d
public:
	CPointCamera* m_pNext; // 0x510	
	
	// Datamap fields:
	// CUtlSymbolLarge InputChangeFOV; // 0x0
	// void InputSetOnAndTurnOthersOff; // 0x0
	// void InputSetOn; // 0x0
	// void InputSetOff; // 0x0
	// void InputForceActive; // 0x0
	// void InputForceInactive; // 0x0
	// void InputEnableDOF; // 0x0
	// void InputDisableDOF; // 0x0
	// float InputSetDOFNearBlurry; // 0x0
	// float InputSetDOFNearCrisp; // 0x0
	// float InputSetDOFFarCrisp; // 0x0
	// float InputSetDOFFarBlurry; // 0x0
	// float InputSetDOFTiltToGround; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd30
// Has VTable
class CAbility_Synth_Barrage : public CCitadelBaseAbility
{
public:
	ShotID_t m_tLastShotID; // 0xab0	
private:
	[[maybe_unused]] uint8_t __pad0ab4[0x26c]; // 0xab4
public:
	int32_t m_nProjectilesScheduled; // 0xd20	
	float m_fProjectileInterval; // 0xd24	
	ParticleIndex_t m_ChannelParticle; // 0xd28	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityWreckerUltimateVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChargeParticle; // 0x15c8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ActiveModifier; // 0x16a8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x200
// Has VTable
class CCitadel_Modifier_MedicBullets : public CCitadel_Modifier_BaseBulletPreRollProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x818
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_SiphonBullets_VData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_StealWatcherModifier; // 0x628	
	CEmbeddedSubclass< CCitadelModifier > m_HealModifier; // 0x638	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x648	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x728	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplodeSound; // 0x808	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x58
// Has VTable
// 
// MGetKV3ClassDefaults
class CScaleFunctionAbilityPropertyMultiStatsVData : public CScaleFunctionVData
{
public:
	CUtlVector< EStatsType > m_vecScalingStats; // 0x40	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x470
// Has VTable
class CBodyComponentBaseModelEntity : public CBodyComponentSkeletonInstance
{
public:
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBodyComponentBaseModelEntity")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_contained_but_impl_is_referenced(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBodyComponentBaseModelEntity")->GetStaticFields()[1]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd10
// Has VTable
// 
// MNetworkVarNames "CCitadelAbilityComponent::Storage_t m_CCitadelAbilityComponent"
class CNPC_TeslaCoil : public CNPC_SimpleAnimatingAI
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelAbilityComponent"
	// MNetworkAlias "CCitadelAbilityComponent"
	// MNetworkTypeAlias "CCitadelAbilityComponent"
	CCitadelAbilityComponent m_CCitadelAbilityComponent; // 0xaf0	
private:
	[[maybe_unused]] uint8_t __pad0cf8[0x4]; // 0xcf8
public:
	float m_flDeployTime; // 0xcfc	
	
	// Datamap fields:
	// float m_flLifeTime; // 0xd04
	// void m_flSpawnTime; // 0xd00
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x188
// Has VTable
class CCitadel_Modifier_TimeWall_Aura : public CCitadelModifierAura
{
private:
	[[maybe_unused]] uint8_t __pad00e8[0x70]; // 0xe8
public:
	CUtlVector< CHandle< CCitadelBulletTimeWarp > > m_vecTimeWarps; // 0x158	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CModifier_Mirage_FireBeetles_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierThumper_3VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DroneParticle; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_LoopSound; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityCadenceCrescendoVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifierAura > m_CrescendoAOEModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_SleepBomb : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x48
// Has VTable
class CAI_Behavior : public CAI_Component
{
public:
	bool m_bActive; // 0x40	
	bool m_bOverrode; // 0x41	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f8
// Has VTable
class CFuncLadderAlias_func_useableladder : public CFuncLadder
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Thumper_EnemyPulled_VData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb80
// Has VTable
// 
// MNetworkVarNames "int m_iBonusHealth"
// MNetworkVarNames "CHandle< CBaseEntity> m_hTarget"
class CCitadel_Ability_UltCombo : public CCitadelBaseAbility
{
public:
	CModifierHandleTyped< CCitadelModifier > m_hTargetComboModifier; // 0xab0	
	GameTime_t m_flLastAttackTime; // 0xac8	
	int32_t m_nAttackNum; // 0xacc	
private:
	[[maybe_unused]] uint8_t __pad0ad0[0xa8]; // 0xad0
public:
	// MNetworkEnable
	int32_t m_iBonusHealth; // 0xb78	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTarget; // 0xb7c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Forge_MiniTurret_InnateModifier : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb60
// Has VTable
class CCitadel_Ability_PowerSurge : public CCitadelBaseAbility
{
public:
	GameTime_t m_flNextProcTime; // 0xab0	
	float m_flBaseCooldown; // 0xab4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_DivinersKevlarBuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xac8
// Has VTable
class CCitadel_Ability_Tier3Boss_LaserBeam : public CTier3BossAbility
{
public:
	CModifierHandleTyped< CCitadelModifier > m_pBeamModifier[1]; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8b0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_InvisVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_InvisLoopParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_InvisDetectRadiusParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_InvisRevealedParticle; // 0x7b8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strInvisRevealedSound; // 0x898	
	// MPropertyStartGroup "Behavior"
	bool m_bFadeInsteadOfRemoveOnBulletFire; // 0x8a8	
	bool m_bFadeInsteadOfRemoveOnAbilityUse; // 0x8a9	
	// MPropertyDescription "Fade from hidden to fully visible as invis is about to expire. Does not work with Aura applied invis, since that has no duration."
	bool m_bFadeToVisibleAtEndOfDuration; // 0x8aa	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_BreakablePropVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyGroupName "Behavior"
	// MPropertyDescription "Should this breakable break if a player rolls or dodges into it?"
	// MPropertyFriendlyName "Break On Dodge?"
	bool m_bBreakOnDodgeTouch; // 0x28	
	// MPropertyGroupName "Behavior"
	// MPropertyDescription "If checked, this breakble will stay after destroyed, rather than stop rendering. (useful for animating breakables that might want to stay in a final pose."
	// MPropertyFriendlyName "Render while dead?"
	bool m_bRenderAfterDeath; // 0x29	
	// MPropertyGroupName "Behavior"
	// MPropertyDescription "If checked, this breakble will stay solid after death. (useful for animating breakables that might want to stay in a final pose."
	// MPropertyFriendlyName "Solid while dead?"
	bool m_bSolidAfterDeath; // 0x2a	
	// MPropertyGroupName "Behavior"
	// MPropertyDescription "If checked, will fire damage events to animgraph, but will not take damage, so it can't die."
	// MPropertyFriendlyName "Is Permanent?"
	bool m_bIsPermanent; // 0x2b	
	// MPropertyGroupName "Behavior"
	// MPropertyDescription "If checked, this breakble will takes damage from Bullets."
	// MPropertyFriendlyName "Damaged by Bullets?"
	bool m_bDamagedByBullets; // 0x2c	
	// MPropertyGroupName "Behavior"
	// MPropertyDescription "If checked, this breakble will takes damage from Melee."
	// MPropertyFriendlyName "Damaged by Melee?"
	bool m_bDamagedByMelee; // 0x2d	
	// MPropertyGroupName "Behavior"
	// MPropertyDescription "If checked, this breakble will takes damage from Abilities."
	// MPropertyFriendlyName "Damaged by Abilities?"
	bool m_bDamagedByAbilities; // 0x2e	
private:
	[[maybe_unused]] uint8_t __pad002f[0x1]; // 0x2f
public:
	// MPropertyStartGroup "Visuals"
	// MPropertyDescription "Model"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_hModel; // 0x30	
	// MPropertyFriendlyName "Damage Received AnimGraph Parameter"
	// MPropertyDescription "The animgraph parameter that's  describes how much damage the breakable has received. From 0 to 1 (no damage to dead)."
	// MPropertyAttributeEditor "VDataAnimGraphParam( m_hModel )"
	CGlobalSymbol m_sAnimgraphParamDamageReceived; // 0x110	
	// MPropertyFriendlyName "On Hit AnimGraph Parameter"
	// MPropertyDescription "The animgraph parameter that is set to true when damage the breakable was hit."
	// MPropertyAttributeEditor "VDataAnimGraphParam( m_hModel )"
	CGlobalSymbol m_sAnimgraphParamOnHit; // 0x118	
	// MPropertyFriendlyName "On Respawn AnimGraph Parameter"
	// MPropertyDescription "The animgraph parameter that is set to true the brekable is respawned."
	// MPropertyAttributeEditor "VDataAnimGraphParam( m_hModel )"
	CGlobalSymbol m_sAnimgraphParamOnRespawn; // 0x120	
	// MPropertyGroupName "Audio"
	// MPropertyDescription "3D Sound of the prop breaking"
	CSoundEventName m_sBreakSound; // 0x128	
	// MPropertyGroupName "Audio"
	// MPropertyDescription "3D Sound of the prop taking damage"
	CSoundEventName m_sDamageSound; // 0x138	
	CSoundEventName m_sHeavyDamageSound; // 0x148	
	// MPropertyGroupName "Audio"
	// MPropertyDescription "Hit Indicator Sound. 2D Sound played to attacker and observers to indicate a hit."
	CSoundEventName m_sHitIndicatorSound; // 0x158	
	// MPropertyGroupName "Attributes"
	// MPropertyDescription "Health"
	int32_t m_iHealth; // 0x168	
	// MPropertyStartGroup "Attributes"
	// MPropertyDescription "Respawn time"
	float m_flInitialSpawnTime; // 0x16c	
	float m_flRespawnTime; // 0x170	
	float m_flInitialSpawnTimeTest; // 0x174	
	float m_flRespawnTimeTest; // 0x178	
	// MPropertyDescription "Can be mantled?"
	bool m_bIsMantleable; // 0x17c	
private:
	[[maybe_unused]] uint8_t __pad017d[0x3]; // 0x17d
public:
	// MPropertyDescription "Chance for this to drop a primary reward, 0 - 100%, this rolls first"
	float m_flPrimaryDropChance; // 0x180	
	// MPropertyDescription "Category for the random roller"
	ECitadelRandomRollTypes m_eRollType; // 0x184	
	// MPropertyStartGroup "Pickup rewards"
	// MPropertyDescription "Primary Pickups are rolled first."
	CUtlVector< BreakablePowerupDropDefinition_t > m_vecPrimaryPickups; // 0x188	
	// MPropertyDescription "Level 2 Rewards"
	int32_t m_iMatchTimeMinsForLevel2Pickups; // 0x1a0	
private:
	[[maybe_unused]] uint8_t __pad01a4[0x4]; // 0x1a4
public:
	CUtlVector< BreakablePowerupDropDefinition_t > m_vecPickups_lv2; // 0x1a8	
	// MPropertyDescription "How many times each entry should be in the 'card deck'"
	int32_t m_iLootListDeckSize; // 0x1c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 16
// Size: 0x550
// Has VTable
class CBaseMoveBehavior : public CPathKeyFrame
{
public:
	int32_t m_iPositionInterpolator; // 0x510	
	int32_t m_iRotationInterpolator; // 0x514	
	float m_flAnimStartTime; // 0x518	
	float m_flAnimEndTime; // 0x51c	
	float m_flAverageSpeedAcrossFrame; // 0x520	
private:
	[[maybe_unused]] uint8_t __pad0524[0x4]; // 0x524
public:
	CPathKeyFrame* m_pCurrentKeyFrame; // 0x528	
	CPathKeyFrame* m_pTargetKeyFrame; // 0x530	
	CPathKeyFrame* m_pPreKeyFrame; // 0x538	
	CPathKeyFrame* m_pPostKeyFrame; // 0x540	
	float m_flTimeIntoFrame; // 0x548	
	int32_t m_iDirection; // 0x54c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x760
// Has VTable
class CFuncInteractionLayerClip : public CBaseModelEntity
{
public:
	bool m_bDisabled; // 0x748	
private:
	[[maybe_unused]] uint8_t __pad0749[0x7]; // 0x749
public:
	CUtlSymbolLarge m_iszInteractsAs; // 0x750	
	CUtlSymbolLarge m_iszInteractsWith; // 0x758	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
// 
// MNetworkVarNames "item_definition_index_t m_iItemDefinitionIndex"
// MNetworkVarNames "int m_iEntityQuality"
// MNetworkVarNames "uint32 m_iEntityLevel"
// MNetworkVarNames "itemid_t m_iItemID"
// MNetworkVarNames "uint32 m_iAccountID"
// MNetworkVarNames "uint32 m_iInventoryPosition"
// MNetworkVarNames "bool m_bInitialized"
// MNetworkVarNames "style_index_t m_nOverrideStyle"
// MNetworkVarNames "CAttributeList m_AttributeList"
class CEconItemView : public IEconItemInterface
{
public:
	// MNetworkEnable
	item_definition_index_t m_iItemDefinitionIndex; // 0x8	
	// MNetworkEnable
	int32_t m_iEntityQuality; // 0xc	
	// MNetworkEnable
	uint32_t m_iEntityLevel; // 0x10	
private:
	[[maybe_unused]] uint8_t __pad0014[0x4]; // 0x14
public:
	// MNetworkEnable
	itemid_t m_iItemID; // 0x18	
	// MNetworkEnable
	uint32_t m_iAccountID; // 0x20	
	// MNetworkEnable
	uint32_t m_iInventoryPosition; // 0x24	
private:
	[[maybe_unused]] uint8_t __pad0028[0x8]; // 0x28
public:
	// MNetworkEnable
	bool m_bInitialized; // 0x30	
	// MNetworkEnable
	style_index_t m_nOverrideStyle; // 0x31	
	bool m_bIsStoreItem; // 0x32	
	bool m_bIsTradeItem; // 0x33	
	bool m_bHasComputedAttachedParticles; // 0x34	
	bool m_bHasAttachedParticles; // 0x35	
private:
	[[maybe_unused]] uint8_t __pad0036[0x2]; // 0x36
public:
	int32_t m_iEntityQuantity; // 0x38	
	uint8_t m_unClientFlags; // 0x3c	
private:
	[[maybe_unused]] uint8_t __pad003d[0x3]; // 0x3d
public:
	eEconItemOrigin m_unOverrideOrigin; // 0x40	
private:
	[[maybe_unused]] uint8_t __pad0044[0x14]; // 0x44
public:
	// MNetworkEnable
	// -> m_Attributes - 0x60
	// -> m_pManager - 0xb0
	CAttributeList m_AttributeList; // 0x58	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1548
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityCadencePrimaryWeaponVData : public CCitadel_Ability_PrimaryWeaponVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x1538	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc00
// Has VTable
class CCitadel_Ability_CrowdControl : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x3b8
// Has VTable
class CCitadel_Modifier_RestorativeGoo : public CCitadelModifier
{
public:
	GameTime_t m_flEarliestBreakoutTime; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00cc[0x2dc]; // 0xcc
public:
	CHandle< CCitadel_RestorativeGooCube > m_hGooCube; // 0x3a8	
	float m_flBreakoutPercentage; // 0x3ac	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Upgrade_KineticSashTriggered_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_TriggeredSound; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Tech_BleedVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DamageParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_SelfBuffModifierVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc0
// Has VTable
// Is Abstract
// 
// MNetworkVarNames "int m_nTotalPausedTicks"
// MNetworkVarNames "int m_nPauseStartTick"
// MNetworkVarNames "bool m_bGamePaused"
class CGameRules
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkDisable
	// MNetworkChangeAccessorFieldPathIndex
	CNetworkVarChainer __m_pChainEntity; // 0x8	
	char m_szQuestName[128]; // 0x30	
	int32_t m_nQuestPhase; // 0xb0	
	// MNetworkEnable
	int32_t m_nTotalPausedTicks; // 0xb4	
	// MNetworkEnable
	int32_t m_nPauseStartTick; // 0xb8	
	// MNetworkEnable
	bool m_bGamePaused; // 0xbc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc10
// Has VTable
class COrnamentProp : public CDynamicProp
{
public:
	CUtlSymbolLarge m_initialOwner; // 0xc08	
	
	// Datamap fields:
	// CUtlSymbolLarge InputSetAttached; // 0x0
	// void InputDetach; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcc0
// Has VTable
class CCitadel_Upgrade_StabilizingTripod : public CCitadel_Item
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecDeployedSentries; // 0xad0	
	Vector m_vDeployPosition; // 0xae8	
	QAngle m_vDeployAngles; // 0xaf4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb78
// Has VTable
class CCitadel_ArmorUpgrade_RegeneratingBulletShield : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_ItemPickupTimer : public CCitadelModifier
{
public:
	bool m_bSilenceApplied; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CLogicGameEvent : public CLogicalEntity
{
public:
	CUtlSymbolLarge m_iszEventName; // 0x4b8	
	
	// Datamap fields:
	// void InputFireEvent; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CEnvMuzzleFlash : public CPointEntity
{
public:
	float m_flScale; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	CUtlSymbolLarge m_iszParentAttachment; // 0x4c0	
	
	// Datamap fields:
	// void InputFire; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e8
// Has VTable
class CAI_Motor : public CAI_Component
{
private:
	[[maybe_unused]] uint8_t __pad0040[0x10]; // 0x40
public:
	float m_flMoveInterval; // 0x50	
	Vector m_vIdealEntityFacing; // 0x54	
	float m_flYawSpeed; // 0x60	
	Vector m_vMoveVel; // 0x64	
	Vector m_vMoveVelNavigation; // 0x70	
	Vector m_vecAngularVelocity; // 0x7c	
	Vector m_vIdealClimbOrientation; // 0x88	
	CSimpleSimTimer m_timerFloorPointCached; // 0x94	
	Vector m_vFloorPointCached; // 0x9c	
	bool m_bFloorPointCachingEnabled; // 0xa8	
private:
	[[maybe_unused]] uint8_t __pad00a9[0x2b]; // 0xa9
public:
	float m_flSpeed; // 0xd4	
	bool m_bMovementActive; // 0xd8	
	bool m_bEmbeddedRecoveryEnabled; // 0xd9	
	bool m_pEnableForceFacing[2]; // 0xda	
	uint8_t m_nEntityFacingLockCount; // 0xdc	
private:
	[[maybe_unused]] uint8_t __pad00dd[0x3]; // 0xdd
public:
	CUtlVector< ChoreoEntityFacing_t > m_vecChoreoEntityFacings; // 0xe0	
	Vector m_vBoundaryDistCachedPos; // 0xf8	
	float m_flBoundaryDistCached; // 0x104	
	// -> m_nNavLinkActiveType - 0x168
	// -> m_strNavLinkActiveMovement - 0x170
	CAI_MotorNavLink m_motorNavLink; // 0x108	
	// -> m_nTransitionState - 0x1c8
	// -> m_vNavLinkStartPos - 0x1cc
	// -> m_flNavLinkFaceStartTime - 0x1d8
	// -> m_bTransitionAnimgraphHasTicked - 0x1dc
	CAI_MotorTransition m_motorTransition; // 0x180	
	bool m_bIsExecutingMoveSolve; // 0x1e0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CModifier_Upgrade_KineticSashTriggered : public CCitadelModifier
{
public:
	int32_t m_nBonusClip; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_DamageResistanceVData : public CCitadelModifierVData
{
public:
	float m_flDamageResistancePerSecond; // 0x5f8	
	float m_flTickInterval; // 0x5fc	
	float m_flDamageResistanceBonusPerGameMinute; // 0x600	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb48
// Has VTable
// 
// MNetworkVarNames "int m_nKillsEarned"
class CCitadel_WeaponUpgrade_GlassCannon : public CCitadel_Item
{
public:
	// MNetworkEnable
	int32_t m_nKillsEarned; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x500
// Has VTable
class CPhysicsSpring : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	float m_flFrequency; // 0x4c0	
	float m_flDampingRatio; // 0x4c4	
	float m_flRestLength; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04cc[0x4]; // 0x4cc
public:
	CUtlSymbolLarge m_nameAttachStart; // 0x4d0	
	CUtlSymbolLarge m_nameAttachEnd; // 0x4d8	
	Vector m_start; // 0x4e0	
	Vector m_end; // 0x4ec	
	uint32_t m_teleportTick; // 0x4f8	
	
	// Datamap fields:
	// void m_pSpringJoint; // 0x4b8
	// float InputSetFrequency; // 0x0
	// float InputSetDampingRatio; // 0x0
	// float InputSetRestLength; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MNetworkVarNames "HRenderTextureStrong m_Entity_hLightProbeTexture"
// MNetworkVarNames "HRenderTextureStrong m_Entity_hLightProbeDirectLightIndicesTexture"
// MNetworkVarNames "HRenderTextureStrong m_Entity_hLightProbeDirectLightScalarsTexture"
// MNetworkVarNames "HRenderTextureStrong m_Entity_hLightProbeDirectLightShadowsTexture"
// MNetworkVarNames "Vector m_Entity_vBoxMins"
// MNetworkVarNames "Vector m_Entity_vBoxMaxs"
// MNetworkVarNames "bool m_Entity_bMoveable"
// MNetworkVarNames "int m_Entity_nHandshake"
// MNetworkVarNames "int m_Entity_nPriority"
// MNetworkVarNames "bool m_Entity_bStartDisabled"
// MNetworkVarNames "int m_Entity_nLightProbeSizeX"
// MNetworkVarNames "int m_Entity_nLightProbeSizeY"
// MNetworkVarNames "int m_Entity_nLightProbeSizeZ"
// MNetworkVarNames "int m_Entity_nLightProbeAtlasX"
// MNetworkVarNames "int m_Entity_nLightProbeAtlasY"
// MNetworkVarNames "int m_Entity_nLightProbeAtlasZ"
// MNetworkVarNames "bool m_Entity_bEnabled"
class CEnvLightProbeVolume : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0xfe0]; // 0x4b8
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture; // 0x1498	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightIndicesTexture; // 0x14a0	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightScalarsTexture; // 0x14a8	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightShadowsTexture; // 0x14b0	
	// MNetworkEnable
	Vector m_Entity_vBoxMins; // 0x14b8	
	// MNetworkEnable
	Vector m_Entity_vBoxMaxs; // 0x14c4	
	// MNetworkEnable
	bool m_Entity_bMoveable; // 0x14d0	
private:
	[[maybe_unused]] uint8_t __pad14d1[0x3]; // 0x14d1
public:
	// MNetworkEnable
	int32_t m_Entity_nHandshake; // 0x14d4	
	// MNetworkEnable
	int32_t m_Entity_nPriority; // 0x14d8	
	// MNetworkEnable
	bool m_Entity_bStartDisabled; // 0x14dc	
private:
	[[maybe_unused]] uint8_t __pad14dd[0x3]; // 0x14dd
public:
	// MNetworkEnable
	int32_t m_Entity_nLightProbeSizeX; // 0x14e0	
	// MNetworkEnable
	int32_t m_Entity_nLightProbeSizeY; // 0x14e4	
	// MNetworkEnable
	int32_t m_Entity_nLightProbeSizeZ; // 0x14e8	
	// MNetworkEnable
	int32_t m_Entity_nLightProbeAtlasX; // 0x14ec	
	// MNetworkEnable
	int32_t m_Entity_nLightProbeAtlasY; // 0x14f0	
	// MNetworkEnable
	int32_t m_Entity_nLightProbeAtlasZ; // 0x14f4	
private:
	[[maybe_unused]] uint8_t __pad14f8[0x9]; // 0x14f8
public:
	// MNetworkEnable
	bool m_Entity_bEnabled; // 0x1501	
	
	// Datamap fields:
	// void m_Entity_pSceneObject; // 0x14f8
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTargetdummy1VData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc90
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_hHookVictim"
// MNetworkVarNames "EHANDLE m_hProjectile"
// MNetworkVarNames "Vector m_vecHookTargetStartPos"
class CCitadel_Ability_Hook : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	// MNetworkChangeCallback "HookVictimChanged"
	CHandle< CBaseEntity > m_hHookVictim; // 0xab0	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hProjectile; // 0xab4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vecHookTargetStartPos; // 0xab8	
	bool m_bProjectileHit; // 0xac4	
private:
	[[maybe_unused]] uint8_t __pad0ac5[0x3]; // 0xac5
public:
	float m_flLastUppercutRestoreTime; // 0xac8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_VoidSphere : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_Bull_Heal : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_WeaponPowerForHealthVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ActiveBuff; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_SuperNeutralChargeActive : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_InvisFading : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x988
// Has VTable
class CCitadel_BreakablePropModifierPickup : public CCitadel_BreakablePropPickup
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x960
// Has VTable
class CScriptTriggerPush : public CTriggerPush
{
public:
	Vector m_vExtent; // 0x950	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Rutger_Pulse_Aura_VData : public CCitadelModifierAuraVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_empWaveParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
class CCitadelZapTrigger : public CFuncBrush
{
public:
	float m_flShootAfterEnteringTime; // 0x768	
	float m_flWaitForNextShootTime; // 0x76c	
	float m_flPercentMaxHealthDamage; // 0x770	
private:
	[[maybe_unused]] uint8_t __pad0774[0x4]; // 0x774
public:
	CUtlSymbolLarge m_strShootOrigin; // 0x778	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_ControlPointBlockerAuraTarget : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CEnvEntityIgniter : public CBaseEntity
{
public:
	float m_flLifetime; // 0x4b8	
	
	// Datamap fields:
	// void InputIgnite; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CFuncWallToggle : public CFuncWall
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CPointChildModifier : public CPointEntity
{
public:
	bool m_bOrphanInsteadOfDeletingChildrenOnRemove; // 0x4b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Synth_PlasmaFlux_WeaponDamage_VData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe38
// Has VTable
class CCitadel_Ability_ShieldedSentry : public CCitadelBaseAbility
{
public:
	CUtlVector< CHandle< CNPC_SimpleAnimatingAI > > m_vecDeployedSentries; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_AblativeCoatResistBuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ResistBuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_ReloadSpeed : public CCitadelModifier
{
public:
	float m_flReloadSpeed; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xba0
// Has VTable
class CCitadel_Item_TechCleave : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f0
// Has VTable
// 
// MNetworkVarNames "CHandle<CCitadelZipLineNode> m_vecConnections"
// MNetworkVarNames "int16 m_eCaptureState"
// MNetworkVarNames "int16 m_iPrimaryLane"
// MNetworkVarNames "int16 m_nRopesParity"
// MNetworkVarNames "bool m_bCornerNode"
// MNetworkVarNames "bool m_bCapturable"
// MNetworkVarNames "bool m_bAlwaysUsable"
// MNetworkVarNames "bool m_bOneWay"
// MNetworkVarNames "bool m_bDisableZippingToByPlayers"
// MNetworkVarNames "EHANDLE m_hGuardingBoss"
// MNetworkVarNames "float m_flRopeRadius"
// MNetworkVarNames "bool m_bEnabled"
class CCitadelZipLineNode : public CBaseModelEntity
{
private:
	[[maybe_unused]] uint8_t __pad0748[0x10]; // 0x748
public:
	// MNetworkEnable
	// MNetworkChangeCallback "connectionsChanged"
	CNetworkUtlVectorBase< CHandle< CCitadelZipLineNode > > m_vecConnections; // 0x758	
private:
	[[maybe_unused]] uint8_t __pad0770[0x34]; // 0x770
public:
	Vector m_vTangentIn; // 0x7a4	
	Vector m_vTangentOut; // 0x7b0	
private:
	[[maybe_unused]] uint8_t __pad07bc[0x4]; // 0x7bc
public:
	CUtlSymbolLarge m_strGuardBossName; // 0x7c0	
	CUtlSymbolLarge m_strGuardBossName2; // 0x7c8	
	CUtlSymbolLarge m_strGuardBossName3; // 0x7d0	
	// MNetworkEnable
	int16_t m_eCaptureState; // 0x7d8	
	// MNetworkEnable
	int16_t m_iPrimaryLane; // 0x7da	
	// MNetworkEnable
	int16_t m_nRopesParity; // 0x7dc	
	// MNetworkEnable
	bool m_bCornerNode; // 0x7de	
	// MNetworkEnable
	bool m_bCapturable; // 0x7df	
	// MNetworkEnable
	bool m_bAlwaysUsable; // 0x7e0	
	// MNetworkEnable
	bool m_bOneWay; // 0x7e1	
	// MNetworkEnable
	bool m_bDisableZippingToByPlayers; // 0x7e2	
private:
	[[maybe_unused]] uint8_t __pad07e3[0x1]; // 0x7e3
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hGuardingBoss; // 0x7e4	
	// MNetworkEnable
	float m_flRopeRadius; // 0x7e8	
	// MNetworkEnable
	bool m_bEnabled; // 0x7ec	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Cadence_GrandFinaleAOE : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CLogicAutosave : public CLogicalEntity
{
public:
	bool m_bForceNewLevelUnit; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	int32_t m_minHitPoints; // 0x4bc	
	int32_t m_minHitPointsToCommit; // 0x4c0	
	
	// Datamap fields:
	// void InputSave; // 0x0
	// float InputSaveDangerous; // 0x0
	// int32_t InputSetMinHitpointsThreshold; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierChompHobbledVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LassoEffect; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ConsumeSound; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Synth_Affliction_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x14e8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AoEParticle; // 0x14f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc10
// Has VTable
// 
// MNetworkVarNames "float m_flDissipationRate"
// MNetworkVarNames "GameTime_t m_flDissipationTime"
// MNetworkVarNames "GameTime_t m_flHeatTime"
// MNetworkVarNames "GameTime_t m_flOverheatSoundTime"
// MNetworkVarNames "bool m_bOverheating"
class CCitadel_Ability_Tokamak_HeatSinks_Inherent : public CCitadelBaseAbility
{
public:
	int32_t m_nIntervalsElapsed; // 0xab0	
	GameTime_t m_NextShotTime; // 0xab4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	float m_flDissipationRate; // 0xab8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flDissipationTime; // 0xabc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flHeatTime; // 0xac0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flOverheatSoundTime; // 0xac4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bOverheating; // 0xac8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_VoidSphereBuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RapidFireParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_Surging_Power : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_CQC_ProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Tier3_DamagePulseVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetParticle; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strPulseTickSound; // 0x6d8	
	// MPropertyStartGroup "Gameplay"
	int32_t m_iMaxTargets; // 0x6e8	
	float m_flRadius; // 0x6ec	
	float m_flDamagePerPulse; // 0x6f0	
	float m_flTickRate; // 0x6f4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb8
// Has VTable
class CRenderComponent : public CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0008[0x8]; // 0x8
public:
	// MNetworkDisable
	// MNetworkChangeAccessorFieldPathIndex
	CNetworkVarChainer __m_pChainEntity; // 0x10	
private:
	[[maybe_unused]] uint8_t __pad0038[0x18]; // 0x38
public:
	bool m_bIsRenderingWithViewModels; // 0x50	
private:
	[[maybe_unused]] uint8_t __pad0051[0x3]; // 0x51
public:
	uint32_t m_nSplitscreenFlags; // 0x54	
private:
	[[maybe_unused]] uint8_t __pad0058[0x8]; // 0x58
public:
	bool m_bEnableRendering; // 0x60	
private:
	[[maybe_unused]] uint8_t __pad0061[0x4f]; // 0x61
public:
	bool m_bInterpolationReadyToDraw; // 0xb0	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CRenderComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_contained_but_impl_is_referenced(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CRenderComponent")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5c8
// Has VTable
// 
// MNetworkVarNames "SoundeventPathCornerPairNetworked_t m_vecCornerPairsNetworked"
class CSoundEventPathCornerEntity : public CSoundEventEntity
{
public:
	CUtlSymbolLarge m_iszPathCorner; // 0x570	
	int32_t m_iCountMax; // 0x578	
	float m_flDistanceMax; // 0x57c	
	float m_flDistMaxSqr; // 0x580	
	float m_flDotProductMax; // 0x584	
	bool m_bPlaying; // 0x588	
private:
	[[maybe_unused]] uint8_t __pad0589[0x27]; // 0x589
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< SoundeventPathCornerPairNetworked_t > m_vecCornerPairsNetworked; // 0x5b0	
	
	// Datamap fields:
	// void CSoundEventPathCornerEntitySoundEventPathCornerThink; // 0x0
	// void m_vecPathCornerPairs; // 0x590
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc70
// Has VTable
// 
// MNetworkVarNames "QAngle m_angBeamAngles"
class CCitadel_Ability_Tokamak_HotShot : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x178]; // 0xab0
public:
	float m_flDPS; // 0xc28	
	GameTime_t m_flNextDamageTick; // 0xc2c	
	Vector m_vStart; // 0xc30	
	Vector m_vEnd; // 0xc3c	
	CUtlVector< CHandle< CBaseEntity > > m_vecEntitiesHit; // 0xc48	
	// MNetworkEnable
	QAngle m_angBeamAngles; // 0xc60	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_WreckerScrapBlastDebuffVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x290
// Has VTable
class CCitadel_Modifier_IceDome : public CCitadelModifier
{
public:
	CHandle< CCitadel_Ice_Dome_Blocker > m_hBlocker; // 0xc8	
	CHandle< CPointModifierThinker > m_hFriendlyAura; // 0xcc	
	CHandle< CPointModifierThinker > m_hEnemyAura; // 0xd0	
	ParticleIndex_t m_nParticleIndex; // 0xd4	
	GameTime_t m_flStartTime; // 0xd8	
private:
	[[maybe_unused]] uint8_t __pad00dc[0xe4]; // 0xdc
public:
	Vector m_vOrigin; // 0x1c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Parry : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x618
// Has VTable
// 
// MGetKV3ClassDefaults
class CItemAOESilenceModifierVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strSilenceTargetSound; // 0x5f8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SilenceModifier; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1630
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_UtilityUpgrade_AOESmokeBombVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastCompleteParticle; // 0x1530	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strBuffGainedSound; // 0x1610	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_InvisModifier; // 0x1620	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1728
// Has VTable
// 
// MGetKV3ClassDefaults
class CItem_WarpStone_VData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_CasterModifier; // 0x1530	
	CEmbeddedSubclass< CCitadelModifier > m_CasterDebuffModifier; // 0x1540	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x1550	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastDelayParticle; // 0x1560	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportTrailParticle; // 0x1640	
	// MPropertyGroupName "Gameplay"
	float m_flTeleportDistance; // 0x1720	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x50
// Has VTable
// 
// MNetworkVarNames "float m_flLatchedValue"
// MNetworkVarNames "GameTime_t m_flLatchedTime"
// MNetworkVarNames "ELockonState m_eLockonState"
// MNetworkVarNames "EHANDLE m_hTarget"
struct LockonTarget_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x30]; // 0x0
public:
	float m_flGainRate; // 0x30	
	float m_flDrainRate; // 0x34	
	float m_flMaxValue; // 0x38	
	int32_t m_nPrevFullStacks; // 0x3c	
	// MNetworkEnable
	float m_flLatchedValue; // 0x40	
	// MNetworkEnable
	GameTime_t m_flLatchedTime; // 0x44	
	// MNetworkEnable
	ELockonState m_eLockonState; // 0x48	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTarget; // 0x4c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x558
// Has VTable
class CEnvSoundscapeProxyAlias_snd_soundscape_proxy : public CEnvSoundscapeProxy
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1c0
// Has VTable
// 
// MNetworkVarNames "Color m_Color"
// MNetworkVarNames "Color m_SecondaryColor"
// MNetworkVarNames "float m_flBrightness"
// MNetworkVarNames "float m_flBrightnessScale"
// MNetworkVarNames "float m_flBrightnessMult"
// MNetworkVarNames "float m_flRange"
// MNetworkVarNames "float m_flFalloff"
// MNetworkVarNames "float m_flAttenuation0"
// MNetworkVarNames "float m_flAttenuation1"
// MNetworkVarNames "float m_flAttenuation2"
// MNetworkVarNames "float m_flTheta"
// MNetworkVarNames "float m_flPhi"
// MNetworkVarNames "HRenderTextureStrong m_hLightCookie"
// MNetworkVarNames "int m_nCascades"
// MNetworkVarNames "int m_nCastShadows"
// MNetworkVarNames "int m_nShadowWidth"
// MNetworkVarNames "int m_nShadowHeight"
// MNetworkVarNames "bool m_bRenderDiffuse"
// MNetworkVarNames "int m_nRenderSpecular"
// MNetworkVarNames "bool m_bRenderTransmissive"
// MNetworkVarNames "float m_flOrthoLightWidth"
// MNetworkVarNames "float m_flOrthoLightHeight"
// MNetworkVarNames "int m_nStyle"
// MNetworkVarNames "CUtlString m_Pattern"
// MNetworkVarNames "int m_nCascadeRenderStaticObjects"
// MNetworkVarNames "float m_flShadowCascadeCrossFade"
// MNetworkVarNames "float m_flShadowCascadeDistanceFade"
// MNetworkVarNames "float m_flShadowCascadeDistance0"
// MNetworkVarNames "float m_flShadowCascadeDistance1"
// MNetworkVarNames "float m_flShadowCascadeDistance2"
// MNetworkVarNames "float m_flShadowCascadeDistance3"
// MNetworkVarNames "int m_nShadowCascadeResolution0"
// MNetworkVarNames "int m_nShadowCascadeResolution1"
// MNetworkVarNames "int m_nShadowCascadeResolution2"
// MNetworkVarNames "int m_nShadowCascadeResolution3"
// MNetworkVarNames "bool m_bUsesBakedShadowing"
// MNetworkVarNames "int m_nShadowPriority"
// MNetworkVarNames "int m_nBakedShadowIndex"
// MNetworkVarNames "bool m_bRenderToCubemaps"
// MNetworkVarNames "int m_nDirectLight"
// MNetworkVarNames "int m_nIndirectLight"
// MNetworkVarNames "float m_flFadeMinDist"
// MNetworkVarNames "float m_flFadeMaxDist"
// MNetworkVarNames "float m_flShadowFadeMinDist"
// MNetworkVarNames "float m_flShadowFadeMaxDist"
// MNetworkVarNames "bool m_bEnabled"
// MNetworkVarNames "bool m_bFlicker"
// MNetworkVarNames "bool m_bPrecomputedFieldsValid"
// MNetworkVarNames "Vector m_vPrecomputedBoundsMins"
// MNetworkVarNames "Vector m_vPrecomputedBoundsMaxs"
// MNetworkVarNames "Vector m_vPrecomputedOBBOrigin"
// MNetworkVarNames "QAngle m_vPrecomputedOBBAngles"
// MNetworkVarNames "Vector m_vPrecomputedOBBExtent"
// MNetworkVarNames "float m_flPrecomputedMaxRange"
// MNetworkVarNames "int m_nFogLightingMode"
// MNetworkVarNames "float m_flFogContributionStength"
// MNetworkVarNames "float m_flNearClipPlane"
// MNetworkVarNames "Color m_SkyColor"
// MNetworkVarNames "float m_flSkyIntensity"
// MNetworkVarNames "Color m_SkyAmbientBounce"
// MNetworkVarNames "bool m_bUseSecondaryColor"
// MNetworkVarNames "bool m_bMixedShadows"
// MNetworkVarNames "GameTime_t m_flLightStyleStartTime"
// MNetworkVarNames "float m_flCapsuleLength"
// MNetworkVarNames "float m_flMinRoughness"
class CLightComponent : public CEntityComponent
{
private:
	[[maybe_unused]] uint8_t __pad0008[0x30]; // 0x8
public:
	// MNetworkDisable
	// MNetworkChangeAccessorFieldPathIndex
	CNetworkVarChainer __m_pChainEntity; // 0x38	
private:
	[[maybe_unused]] uint8_t __pad0060[0x1c]; // 0x60
public:
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	Color m_Color; // 0x7c	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	Color m_SecondaryColor; // 0x80	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flBrightness; // 0x84	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flBrightnessScale; // 0x88	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flBrightnessMult; // 0x8c	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flRange; // 0x90	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flFalloff; // 0x94	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flAttenuation0; // 0x98	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flAttenuation1; // 0x9c	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flAttenuation2; // 0xa0	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flTheta; // 0xa4	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flPhi; // 0xa8	
private:
	[[maybe_unused]] uint8_t __pad00ac[0x4]; // 0xac
public:
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hLightCookie; // 0xb0	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nCascades; // 0xb8	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nCastShadows; // 0xbc	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nShadowWidth; // 0xc0	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nShadowHeight; // 0xc4	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	bool m_bRenderDiffuse; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00c9[0x3]; // 0xc9
public:
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nRenderSpecular; // 0xcc	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	bool m_bRenderTransmissive; // 0xd0	
private:
	[[maybe_unused]] uint8_t __pad00d1[0x3]; // 0xd1
public:
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flOrthoLightWidth; // 0xd4	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flOrthoLightHeight; // 0xd8	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nStyle; // 0xdc	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	CUtlString m_Pattern; // 0xe0	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nCascadeRenderStaticObjects; // 0xe8	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flShadowCascadeCrossFade; // 0xec	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flShadowCascadeDistanceFade; // 0xf0	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flShadowCascadeDistance0; // 0xf4	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flShadowCascadeDistance1; // 0xf8	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flShadowCascadeDistance2; // 0xfc	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flShadowCascadeDistance3; // 0x100	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nShadowCascadeResolution0; // 0x104	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nShadowCascadeResolution1; // 0x108	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nShadowCascadeResolution2; // 0x10c	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nShadowCascadeResolution3; // 0x110	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	// MNetworkAlias "m_bUsesIndexedBakedLighting"
	bool m_bUsesBakedShadowing; // 0x114	
private:
	[[maybe_unused]] uint8_t __pad0115[0x3]; // 0x115
public:
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nShadowPriority; // 0x118	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	int32_t m_nBakedShadowIndex; // 0x11c	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	bool m_bRenderToCubemaps; // 0x120	
private:
	[[maybe_unused]] uint8_t __pad0121[0x3]; // 0x121
public:
	// MNetworkEnable
	int32_t m_nDirectLight; // 0x124	
	// MNetworkEnable
	int32_t m_nIndirectLight; // 0x128	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flFadeMinDist; // 0x12c	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flFadeMaxDist; // 0x130	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flShadowFadeMinDist; // 0x134	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flShadowFadeMaxDist; // 0x138	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	bool m_bEnabled; // 0x13c	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	bool m_bFlicker; // 0x13d	
	// MNetworkEnable
	bool m_bPrecomputedFieldsValid; // 0x13e	
private:
	[[maybe_unused]] uint8_t __pad013f[0x1]; // 0x13f
public:
	// MNetworkEnable
	Vector m_vPrecomputedBoundsMins; // 0x140	
	// MNetworkEnable
	Vector m_vPrecomputedBoundsMaxs; // 0x14c	
	// MNetworkEnable
	Vector m_vPrecomputedOBBOrigin; // 0x158	
	// MNetworkEnable
	QAngle m_vPrecomputedOBBAngles; // 0x164	
	// MNetworkEnable
	Vector m_vPrecomputedOBBExtent; // 0x170	
	// MNetworkEnable
	float m_flPrecomputedMaxRange; // 0x17c	
	// MNetworkEnable
	int32_t m_nFogLightingMode; // 0x180	
	// MNetworkEnable
	float m_flFogContributionStength; // 0x184	
	// MNetworkEnable
	float m_flNearClipPlane; // 0x188	
	// MNetworkEnable
	Color m_SkyColor; // 0x18c	
	// MNetworkEnable
	float m_flSkyIntensity; // 0x190	
	// MNetworkEnable
	Color m_SkyAmbientBounce; // 0x194	
	// MNetworkEnable
	bool m_bUseSecondaryColor; // 0x198	
	// MNetworkEnable
	// MNetworkChangeCallback "MixedShadowsChanged"
	bool m_bMixedShadows; // 0x199	
private:
	[[maybe_unused]] uint8_t __pad019a[0x2]; // 0x19a
public:
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	GameTime_t m_flLightStyleStartTime; // 0x19c	
	// MNetworkEnable
	float m_flCapsuleLength; // 0x1a0	
	// MNetworkEnable
	// MNetworkChangeCallback "LightRenderingChanged"
	float m_flMinRoughness; // 0x1a4	
private:
	[[maybe_unused]] uint8_t __pad01a8[0x10]; // 0x1a8
public:
	bool m_bPvsModifyEntity; // 0x1b8	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CLightComponent")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_contained_but_impl_is_referenced(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CLightComponent")->GetStaticFields()[1]->m_pInstance);};
	
	// Datamap fields:
	// SHIM m_bRenderSpecular; // 0xcc
	// SHIM m_bCastShadows; // 0xbc
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x960
// Has VTable
// 
// MNetworkIncludeByName "m_lifeState"
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkIncludeByName "m_iHealth"
// MNetworkVarNames "int m_nHitIndex"
class CCitadel_BreakableProp : public CBaseAnimGraph
{
public:
	// MNetworkEnable
	int32_t m_nHitIndex; // 0x958	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x950
// Has VTable
class CScriptTriggerMultiple : public CTriggerMultiple
{
public:
	Vector m_vExtent; // 0x940	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_LifeSteal_Watcher : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_GooGrenade : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_IcePath_Buff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_ProjectMind : public CCitadelModifier
{
public:
	ParticleIndex_t m_particleStart; // 0xc8	
	ParticleIndex_t m_particleEnd; // 0xcc	
	ParticleIndex_t m_particleTrail; // 0xd0	
	Vector m_vecEndLocation; // 0xd4	
	Vector m_vecStartPosition; // 0xe0	
	float m_flStartDelay; // 0xec	
	Vector m_vecApplyOffset; // 0xf0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_MetalSkinVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffStartParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffEndParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Tier3Boss_DamagePulse : public CTier3BossAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_Core_PushTarget : public CCitadelModifier
{
public:
	float m_flImpulseAmount; // 0xc8	
	GameTime_t m_flTossTime; // 0xcc	
	bool m_bShouldToss; // 0xd0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x680
// Has VTable
class CSoundOpvarSetAutoRoomEntity : public CSoundOpvarSetPointEntity
{
public:
	CUtlVector< SoundOpvarTraceResult_t > m_traceResults; // 0x640	
	CUtlVector< AutoRoomDoorwayPairs_t > m_doorwayPairs; // 0x658	
	float m_flSize; // 0x670	
	float m_flHeightTolerance; // 0x674	
	float m_flSizeSqr; // 0x678	
	
	// Datamap fields:
	// void CSoundOpvarSetAutoRoomEntitySetOpvarThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1638
// Has VTable
// 
// MNetworkVarNames "int m_iLane"
// MNetworkVarNames "EHANDLE m_hTargetedEnemy"
// MNetworkVarNames "float m_flHealingChargeParticlePct"
class CNPC_Trooper : public CAI_CitadelNPC
{
private:
	[[maybe_unused]] uint8_t __pad1578[0x8]; // 0x1578
public:
	// MNetworkEnable
	int32_t m_iLane; // 0x1580	
	int32_t m_iLaneSlot; // 0x1584	
private:
	[[maybe_unused]] uint8_t __pad1588[0x1c]; // 0x1588
public:
	CHandle< CInfoTrooperBossSpawn > m_hSpawnWaveController; // 0x15a4	
	CHandle< CBaseEntity > m_hTrooperSpawnPoint; // 0x15a8	
private:
	[[maybe_unused]] uint8_t __pad15ac[0x1c]; // 0x15ac
public:
	CModifierHandleTyped< CCitadelModifier > m_hNearDeathModifier; // 0x15c8	
private:
	[[maybe_unused]] uint8_t __pad15e0[0x8]; // 0x15e0
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTargetedEnemy; // 0x15e8	
	// MNetworkEnable
	// MNetworkBitCount "8"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "1.000000"
	float m_flHealingChargeParticlePct; // 0x15ec	
	
	// Static fields:
	static ConditionId_t &Get_COND_TROOPER_MOVE_OUT(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[0]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_SEEN_LARGE_EXPLOSION(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[1]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_CAN_ADVANCE_DOWN_LANE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[2]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_ENEMY_IN_CHARGE_RANGE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[3]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_CAN_ZIPLINE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[4]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_ON_ZIPLINE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[5]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_FOLLOW_OWNER(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[6]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_FOLLOW_OWNER_CLOSE_ENOUGH(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[7]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_CLIP_EMPTY(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[8]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_UNDER_HEAVY_ATTACK(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[9]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_INACTIVE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[10]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_FORCE_ADVANCE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[11]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_NEAR_BASE_ATTACKER(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[12]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_ZIPLINING_NEAR_ENEMY_CAN_DISMOUNT(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[13]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_FIGHTING_FINAL_CORE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[14]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_OUT_OF_LANE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[15]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPER_NEAR_DEATH(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[16]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_ADVANCE_UNDER_FIRE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[17]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_RUN_DOWN_LANE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[18]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_MELEE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[19]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_RANGE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[20]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_RELOAD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[21]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_SENTRY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[22]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_WAIT_TO_ADVANCE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[23]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_PAUSE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[24]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_FLINCH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[25]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_START_ZIPLINE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[26]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_RIDE_ZIPLINE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[27]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_DISMOUNT_ZIPLINE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[28]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_INITIAL_WAIT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[29]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_AVOID_TIER2BOSS_LASER(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[30]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_CAPTURE_ZIPLINE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[31]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_REACT_TO_EXPLOSION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[32]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_MOVE_TO_MELEE_TARGET(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[33]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_DEPLOY_SHIELD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[34]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_RETURN_TO_LANE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[35]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPER_STUNNED(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[36]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_GET_LANE_NODE_PATH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[37]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_GET_CLOSEST_LANE_NODE_PATH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[38]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_RANGE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[39]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_ACTIVATE_ZIPLINE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[40]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_DEACTIVATE_ZIPLINE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[41]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_WAIT_FOR_ZIPLINE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[42]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_JUMP_TOWARD_LANE_SLOT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[43]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_WAIT_UNTIL_LAND_ON_GROUND(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[44]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_INITIAL_WAIT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[45]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_WAIT_FOR_SQUAD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[46]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_FACE_INITIAL_DIRECTION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[47]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_WAIT_FLINCH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[48]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_GET_PATH_TO_TARGET(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[49]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_PLAY_ANIMATION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[50]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_WAIT_FOR_LANE_MOVEMENT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[51]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPER_DEPLOY_SHIELD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper")->GetStaticFields()[52]->m_pInstance);};
	
	// Datamap fields:
	// int32_t m_iCoverGroupID; // 0x14d8
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifer_Viscous_Goo_Aura_VData : public CCitadelModifierAuraVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8d0
// Has VTable
// 
// MNetworkVarNames "bool m_bAllowRotatingUp"
// MNetworkVarNames "bool m_bFixedPosition"
// MNetworkVarNames "float m_flShieldOffset"
class CCitadel_Shield : public CCitadelModelEntity
{
public:
	// MNetworkEnable
	bool m_bAllowRotatingUp; // 0x8c8	
	// MNetworkEnable
	bool m_bFixedPosition; // 0x8c9	
private:
	[[maybe_unused]] uint8_t __pad08ca[0x2]; // 0x8ca
public:
	// MNetworkEnable
	float m_flShieldOffset; // 0x8cc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTokamakHotShotVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_LaserModifier; // 0x14e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strLaserStartSound; // 0x14f8	
	CSoundEventName m_strLaserEndSound; // 0x1508	
	CSoundEventName m_strLaserLoopSound; // 0x1518	
	CSoundEventName m_strLaserHitSound; // 0x1528	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChargeParticle; // 0x1538	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamParticle; // 0x1618	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x16f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GroundParticle; // 0x17d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xac0
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_tDrainLifeStopTime"
class CCitadel_Ability_LifeDrain : public CCitadelBaseAbility
{
public:
	CHandle< CBaseEntity > m_hTarget; // 0xab0	
	// MNetworkEnable
	GameTime_t m_tDrainLifeStopTime; // 0xab4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb28
// Has VTable
class CCitadel_Ability_StormCloud : public CCitadelBaseAbility
{
public:
	bool m_bApplyingVerticalAirDrag; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x960
// Has VTable
class CCitadel_DeployablePreview : public CBaseAnimGraph
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x158
// Has VTable
class CCitadel_Modifier_Rutger_ForceField_Aura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
class FilterDamageType : public CBaseFilter
{
public:
	int32_t m_iDamageType; // 0x510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbe0
// Has VTable
class CCitadel_Ability_Chrono_PulseGrenade : public CCitadelBaseAbility
{
public:
	Vector m_vLaunchPosition; // 0xab0	
	QAngle m_qLaunchAngle; // 0xabc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_Hornet_Sting : public CCitadelModifier
{
public:
	GameTime_t m_flLastTickTime; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x110
// Has VTable
class CCitadel_Modifier_VeilWalkerWatcher : public CCitadelModifier
{
public:
	Vector m_vPreviousPos; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15a0
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_hOwner"
class CNPC_HeroCloneTrooper : public CAI_CitadelNPC
{
private:
	[[maybe_unused]] uint8_t __pad1578[0x4]; // 0x1578
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hOwner; // 0x157c	
	
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_CLONE_TROOPER_RELOAD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_CLONE_TROOPER_DODGE_ROLL(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_CLONE_RANGE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_CLONE_SENTRY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[3]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_CLONE_MELEE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[4]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_CLONE_CHARGE_FORWARD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[5]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_CLONE_CHARGE_TO_SQUAD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[6]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_CLONE_ADVANCE_ON_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[7]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_CLONE_JUMP_TOWARD_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[8]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_CLONE_FOLLOW_OWNER(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[9]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_CLONE_DODGE_ROLL(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[10]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_CLONE_RANGE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[11]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_CLONE_JUMP_AT_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[12]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_CLONE_GET_PATH_TO_SQUAD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[13]->m_pInstance);};
	static ConditionId_t &Get_COND_CLONE_FAR_FROM_OWNER(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[14]->m_pInstance);};
	static ConditionId_t &Get_COND_CLONE_NEW_ORDERS(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroCloneTrooper")->GetStaticFields()[15]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x920
// Has VTable
class CCitadelShopTunnelTrigger : public CBaseTrigger
{
public:
	CUtlStringToken m_tModifier; // 0x918	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x808
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierNikumanVData : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SelfParticle; // 0x638	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AOEFriendParticle; // 0x718	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strAmbientLoopingLocalPlayerSound; // 0x7f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x20
// Has VTable
// Has Trivial Destructor
class CMotorController
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	float m_speed; // 0x8	
	float m_maxTorque; // 0xc	
	Vector m_axis; // 0x10	
	float m_inertiaFactor; // 0x1c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e0
// Has VTable
// 
// MNetworkVarNames "float m_flRadius"
class CSoundAreaEntitySphere : public CSoundAreaEntityBase
{
public:
	// MNetworkEnable
	float m_flRadius; // 0x4d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_Thumper_4 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x118
// Has VTable
class CCitadel_Modifier_Cadence_SilenceContraptions : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xba0
// Has VTable
// 
// MNetworkVarNames "bool m_bInGround"
// MNetworkVarNames "GameTime_t m_SpinEndTime"
class CCitadel_Ability_Burrow : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0xe0]; // 0xab0
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bInGround; // 0xb90	
private:
	[[maybe_unused]] uint8_t __pad0b91[0x3]; // 0xb91
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_SpinEndTime; // 0xb94	
	ParticleIndex_t m_nBurrowEffect; // 0xb98	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16e0
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityNanoWarpVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeSlowParticle; // 0x15c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x16a8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x16b8	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x16c8	
	// MPropertyStartGroup "Gameplay"
	float m_flWarpDistanceFromTarget; // 0x16d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CModifier_Citadel_Bull_Leap_LandingBonuses : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1630
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_TrackingProjectileApplyModifierVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ProjectileImpactParticle; // 0x1530	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TargetModifier; // 0x1610	
	CEmbeddedSubclass< CCitadelModifier > m_FriendlyOnlyModifier; // 0x1620	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CScaleFunctionAbilityProperty_BaseWeaponDamage : public CScaleFunctionBase
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbb8
// Has VTable
// 
// MNetworkVarNames "int m_nWeaponPower"
class CCitadel_WeaponUpgrade_WeaponEater : public CCitadel_Item
{
private:
	[[maybe_unused]] uint8_t __pad0ad0[0xe0]; // 0xad0
public:
	// MNetworkEnable
	int32_t m_nWeaponPower; // 0xbb0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9b8
// Has VTable
class CTriggerHurt : public CBaseTrigger
{
public:
	float m_flOriginalDamage; // 0x918	
	float m_flDamage; // 0x91c	
	float m_flDamageCap; // 0x920	
	GameTime_t m_flLastDmgTime; // 0x924	
	float m_flForgivenessDelay; // 0x928	
	int32_t m_bitsDamageInflict; // 0x92c	
	int32_t m_damageModel; // 0x930	
	bool m_bNoDmgForce; // 0x934	
private:
	[[maybe_unused]] uint8_t __pad0935[0x3]; // 0x935
public:
	Vector m_vDamageForce; // 0x938	
	bool m_thinkAlways; // 0x944	
private:
	[[maybe_unused]] uint8_t __pad0945[0x3]; // 0x945
public:
	float m_hurtThinkPeriod; // 0x948	
private:
	[[maybe_unused]] uint8_t __pad094c[0x4]; // 0x94c
public:
	CEntityIOOutput m_OnHurt; // 0x950	
	CEntityIOOutput m_OnHurtPlayer; // 0x978	
	CUtlVector< CHandle< CBaseEntity > > m_hurtEntities; // 0x9a0	
	
	// Datamap fields:
	// void CTriggerHurtRadiationThink; // 0x0
	// void CTriggerHurtHurtThink; // 0x0
	// void CTriggerHurtNavThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x548
// Has VTable
class CPhysBallSocket : public CPhysConstraint
{
public:
	float m_flJointFriction; // 0x530	
	bool m_bEnableSwingLimit; // 0x534	
private:
	[[maybe_unused]] uint8_t __pad0535[0x3]; // 0x535
public:
	float m_flSwingLimit; // 0x538	
	bool m_bEnableTwistLimit; // 0x53c	
private:
	[[maybe_unused]] uint8_t __pad053d[0x3]; // 0x53d
public:
	float m_flMinTwistAngle; // 0x540	
	float m_flMaxTwistAngle; // 0x544	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_FireRateAura : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_ComboBreakerHeal : public CCitadelModifier
{
public:
	float m_flAmountPerSecond; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_BonusDamagePercent : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
class CNPC_PestilenceDrone : public CAI_CitadelNPC
{
public:
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_PESTILENCE_DRONE_NAVIGATE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_PestilenceDrone")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_PESTILENCE_DRONE_CHARGE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_PestilenceDrone")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_PESTILENCE_DRONE_ATTACH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_PestilenceDrone")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_PESTILENCE_DRONE_FIZZLE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_PestilenceDrone")->GetStaticFields()[3]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_PESTILENCE_DRONE_CHARGE_PATH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_PestilenceDrone")->GetStaticFields()[4]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_PESTILENCE_DRONE_ATTACH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_PestilenceDrone")->GetStaticFields()[5]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_PESTILENCE_DRONE_FIZZLE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_PestilenceDrone")->GetStaticFields()[6]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_PESTILENCE_DRONE_PATH_TO_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_PestilenceDrone")->GetStaticFields()[7]->m_pInstance);};
	static ConditionId_t &Get_COND_PESTILENCE_DRONE_ATTACH(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_PestilenceDrone")->GetStaticFields()[8]->m_pInstance);};
	static ConditionId_t &Get_COND_PESTILENCE_DRONE_FIZZLE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_PestilenceDrone")->GetStaticFields()[9]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Cadence_AnthemAOEVData : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AuraParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_ArmorUpgrade_BulletArmorReductionAura : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1ec8
// Has VTable
class CSoundEnt : public CPointEntity
{
public:
	int32_t m_iFreeSound; // 0x4b8	
	int32_t m_iActiveSound; // 0x4bc	
	int32_t m_cLastActiveSounds; // 0x4c0	
	CSound m_SoundPool[128]; // 0x4c4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CInfoSpawnGroupLandmark : public CPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8
// Has Trivial Destructor
struct CCitadel_Ability_CardToss__Card_t
{
public:
	int32_t m_nCardNum; // 0x0	
	ParticleIndex_t m_nFxIdx; // 0x4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd00
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flScopeStartTime"
class CCitadel_Ability_Hornet_Snipe : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x20c]; // 0xab0
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flScopeStartTime; // 0xcbc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_HornetMark : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_FlameDashBurnVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Backdoor_ProtectionVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Backdoor Protection"
	// MPropertyDescription "Range to check for nearby troopers (in units). Once troopers are within range, backdoor protection is removed. 0 range means disabled"
	float m_flBackdoorProtectionNearbyTrooperRange; // 0x5f8	
	// MPropertyDescription "How often do we check for troopers?"
	float m_flBackdoorProtectionNearbyTrooperThinkInterval; // 0x5fc	
	// MPropertyDescription "How long does a nearby trooper lower backdoor protection?"
	float m_flBackdoorProtectionNearbyTrooperRemovalDuration; // 0x600	
	// MPropertyDescription "How much should damage be reduced from players when backdoor protection is up? 0 is no reduction, 100 is complete reduction"
	// MPropertyAttributeRange "0 100"
	float m_flBackdoorProtectionDamageMitigationFromPlayers; // 0x604	
	// MPropertyDescription "How health per second does backdoor protection regen?"
	float m_flHealthPerSecondRegen; // 0x608	
	// MPropertyDescription "How health per second when out of combat?"
	float m_flOutOfCombatHealthRegen; // 0x60c	
	// MPropertyDescription "How longer after taking no damage will out out of combat regen kick in?"
	float m_flOutOfCombatRegenDelay; // 0x610	
	// MPropertyDescription "How long the shield effect lingers after having taken damage"
	float m_flEffectsLingerTime; // 0x614	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShieldImpactParticle; // 0x618	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShieldActiveParticle; // 0x6f8	
	CUtlString m_strActiveEffectConfigName; // 0x7d8	
	float flShieldImpactDirectionOffset; // 0x7e0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_RootVData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x210
// Has VTable
class CAI_CitadelPlayerBotMotor : public CAI_Motor
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5a0
// Has VTable
class CAI_Hint : public CServerOnlyEntity
{
public:
	// -> strEntityName - 0x4b8
	// -> nHintType - 0x4c0
	// -> nNodeID - 0x4c4
	// -> strGroup - 0x4c8
	// -> iDisabled - 0x4d0
	// -> iszGenericType - 0x4d8
	// -> fIgnoreFacing - 0x4e0
	// -> minState - 0x4e4
	// -> maxState - 0x4e8
	// -> nRadius - 0x4ec
	// -> ePriority - 0x4f0
	HintNodeData m_NodeData; // 0x4b8	
	CHandle< CBaseEntity > m_hHintOwner; // 0x4f8	
	GameTime_t m_flNextUseTime; // 0x4fc	
	CEntityOutputTemplate< CHandle< CBaseEntity > > m_OnNPCStartedUsing; // 0x500	
	CEntityOutputTemplate< CHandle< CBaseEntity > > m_OnNPCStoppedUsing; // 0x528	
	float m_nodeFOV; // 0x550	
	bool m_bNodeFOVCheckBehind; // 0x554	
private:
	[[maybe_unused]] uint8_t __pad0555[0x3]; // 0x555
public:
	Vector m_vecForward; // 0x558	
private:
	[[maybe_unused]] uint8_t __pad0564[0x4]; // 0x564
public:
	CUtlSymbolLarge m_iszAnimgraphEntryAction; // 0x568	
	CUtlSymbolLarge m_iszAnimgraphExitAction; // 0x570	
	CUtlSymbolLarge m_iszAnimgraphEntryCmd; // 0x578	
	CUtlSymbolLarge m_iszAnimgraphExitCmd; // 0x580	
	CUtlSymbolLarge m_iszNavlinkTargetName; // 0x588	
	bool m_bRemoveOnUnreserved; // 0x590	
private:
	[[maybe_unused]] uint8_t __pad0591[0x3]; // 0x591
public:
	CHandle< CBaseEntity > m_hAssociatedEntity; // 0x594	
	float m_flInteractionDistance; // 0x598	
	float m_flCooldown; // 0x59c	
	
	// Datamap fields:
	// void CAI_HintEnableThink; // 0x0
	// void InputEnableHint; // 0x0
	// void InputDisableHint; // 0x0
	// void InputToggleHint; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x228
// Has VTable
// 
// MNetworkVarNames "float32 m_flFallVelocity"
// MNetworkVarNames "bool m_bInCrouch"
// MNetworkVarNames "uint32 m_nCrouchState"
// MNetworkVarNames "GameTime_t m_flCrouchTransitionStartTime"
// MNetworkVarNames "bool m_bDucked"
// MNetworkVarNames "bool m_bDucking"
// MNetworkVarNames "bool m_bInDuckJump"
class CPlayer_MovementServices_Humanoid : public CPlayer_MovementServices
{
public:
	float m_flStepSoundTime; // 0x1d8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	// MNetworkBitCount "17"
	// MNetworkMinValue "-4096.000000"
	// MNetworkMaxValue "4096.000000"
	// MNetworkEncodeFlags "4"
	float m_flFallVelocity; // 0x1dc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bInCrouch; // 0x1e0	
private:
	[[maybe_unused]] uint8_t __pad01e1[0x3]; // 0x1e1
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	uint32_t m_nCrouchState; // 0x1e4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	GameTime_t m_flCrouchTransitionStartTime; // 0x1e8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bDucked; // 0x1ec	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bDucking; // 0x1ed	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bInDuckJump; // 0x1ee	
private:
	[[maybe_unused]] uint8_t __pad01ef[0x1]; // 0x1ef
public:
	Vector m_groundNormal; // 0x1f0	
	float m_flSurfaceFriction; // 0x1fc	
	CUtlStringToken m_surfaceProps; // 0x200	
private:
	[[maybe_unused]] uint8_t __pad0204[0xc]; // 0x204
public:
	int32_t m_nStepside; // 0x210	
	int32_t m_iTargetVolume; // 0x214	
	Vector m_vecSmoothedVelocity; // 0x218	
	
	// Datamap fields:
	// void m_pSurfaceData; // 0x208
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x928
// Has VTable
class CTriggerSave : public CBaseTrigger
{
public:
	bool m_bForceNewLevelUnit; // 0x918	
private:
	[[maybe_unused]] uint8_t __pad0919[0x3]; // 0x919
public:
	float m_fDangerousTimer; // 0x91c	
	int32_t m_minHitPoints; // 0x920	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x768
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierKnockdownVData : public CCitadel_Modifier_StunnedVData
{
public:
	float m_flSatVolumeRadius; // 0x6d8	
	float m_flSatVolumeFadeOut; // 0x6dc	
	// MPropertyStartGroup "Camera"
	float m_flGetUpSeqDuration; // 0x6e0	
private:
	[[maybe_unused]] uint8_t __pad06e4[0x4]; // 0x6e4
public:
	CitadelCameraOperationsSequence_t m_cameraSequenceGetUp; // 0x6e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x560
// Has VTable
class CPhysWheelConstraint : public CPhysConstraint
{
public:
	float m_flSuspensionFrequency; // 0x530	
	float m_flSuspensionDampingRatio; // 0x534	
	float m_flSuspensionHeightOffset; // 0x538	
	bool m_bEnableSuspensionLimit; // 0x53c	
private:
	[[maybe_unused]] uint8_t __pad053d[0x3]; // 0x53d
public:
	float m_flMinSuspensionOffset; // 0x540	
	float m_flMaxSuspensionOffset; // 0x544	
	bool m_bEnableSteeringLimit; // 0x548	
private:
	[[maybe_unused]] uint8_t __pad0549[0x3]; // 0x549
public:
	float m_flMinSteeringAngle; // 0x54c	
	float m_flMaxSteeringAngle; // 0x550	
	float m_flSteeringAxisFriction; // 0x554	
	float m_flSpinAxisFriction; // 0x558	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x548
// Has VTable
class CPhysFixed : public CPhysConstraint
{
public:
	float m_flLinearFrequency; // 0x530	
	float m_flLinearDampingRatio; // 0x534	
	float m_flAngularFrequency; // 0x538	
	float m_flAngularDampingRatio; // 0x53c	
	bool m_bEnableLinearConstraint; // 0x540	
	bool m_bEnableAngularConstraint; // 0x541	
	
	// Datamap fields:
	// float InputSetLinearFrequency; // 0x0
	// float InputSetLinearDampingRatio; // 0x0
	// float InputSetAngularFrequency; // 0x0
	// float InputSetAngularDampingRatio; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd18
// Has VTable
// 
// MNetworkVarNames "QAngle m_angAimAngles"
class CCitadel_Ability_PrimaryWeapon_Slork : public CCitadel_Ability_PrimaryWeapon
{
private:
	[[maybe_unused]] uint8_t __pad0b60[0x198]; // 0xb60
public:
	CUtlString m_strSprayerName; // 0xcf8	
	CUtlString m_strPoisonName; // 0xd00	
	// MNetworkEnable
	QAngle m_angAimAngles; // 0xd08	
	bool m_bTracingConeAttack; // 0xd14	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Mirage_FireBeetles_Debuff_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x110
// Has VTable
class CCitadel_Modifier_TangoTether_TetherReceiver : public CCitadelModifier
{
public:
	ParticleIndex_t m_nFXIndex; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_IncendiaryThinkerVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GroundParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
// Is Abstract
class CCitadel_Modifier_Tier3Boss_Base : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x68
// Has VTable
class CAI_EnemyServices : public CAI_Component
{
public:
	CHandle< CBaseEntity > m_hEnemy; // 0x40	
	CHandle< CBaseEntity > m_hLastEnemy; // 0x44	
	GameTime_t m_flTimeEnemyAcquired; // 0x48	
	bool m_bHasEnemyAcquired; // 0x4c	
private:
	[[maybe_unused]] uint8_t __pad004d[0x3]; // 0x4d
public:
	GameTime_t m_flTimeLastHadEnemy; // 0x50	
	bool m_bHasLastHadEnemy; // 0x54	
private:
	[[maybe_unused]] uint8_t __pad0055[0x3]; // 0x55
public:
	int32_t m_nEnemiesSerialNumber; // 0x58	
	CHandle< CBaseEntity > m_hEnemyOccluder; // 0x5c	
	
	// Datamap fields:
	// void m_pEnemies; // 0x60
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcc8
// Has VTable
class CItemParachute : public CPhysicsProp
{
public:
	// Datamap fields:
	// CHandle< CBaseEntity > m_hAttachedEntity; // 0xcb0
	// int32_t m_eObjectivePosition; // 0xcc4
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x948
// Has VTable
class CTriggerNeutralIdles : public CTriggerNeutralShield
{
public:
	// Datamap fields:
	// void m_vecPlayers; // 0x918
	// void m_vecNeutrals; // 0x930
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x810
// Has VTable
class CCitadel_Projectile_Tier2Boss_RocketBarrage : public CCitadelProjectile
{
public:
	ParticleIndex_t m_nLaserParticleIndex; // 0x800	
	Vector m_vecSmoothedVelocity; // 0x804	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x190
// Has VTable
// 
// MGetKV3ClassDefaults
class CBasePlayerVData : public CEntitySubclassVDataBase
{
public:
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_sModelName; // 0x28	
	CUtlVector< CEmbeddedSubclass< CCitadelModifier > > m_vecIntrinsicModifiers; // 0x108	
	CSkillFloat m_flHeadDamageMultiplier; // 0x120	
	CSkillFloat m_flChestDamageMultiplier; // 0x130	
	CSkillFloat m_flStomachDamageMultiplier; // 0x140	
	CSkillFloat m_flArmDamageMultiplier; // 0x150	
	CSkillFloat m_flLegDamageMultiplier; // 0x160	
	// MPropertyGroupName "Water"
	float m_flHoldBreathTime; // 0x170	
	// MPropertyGroupName "Water"
	// MPropertyDescription "Seconds between drowning ticks"
	float m_flDrowningDamageInterval; // 0x174	
	// MPropertyGroupName "Water"
	// MPropertyDescription "Amount of damage done on the first drowning tick (+1 each subsequent interval)"
	int32_t m_nDrowningDamageInitial; // 0x178	
	// MPropertyGroupName "Water"
	// MPropertyDescription "Max damage done by a drowning tick"
	int32_t m_nDrowningDamageMax; // 0x17c	
	// MPropertyGroupName "Water"
	int32_t m_nWaterSpeed; // 0x180	
	// MPropertyGroupName "Use"
	float m_flUseRange; // 0x184	
	// MPropertyGroupName "Use"
	float m_flUseAngleTolerance; // 0x188	
	// MPropertyGroupName "Crouch"
	// MPropertyDescription "Time to move between crouch and stand"
	float m_flCrouchTime; // 0x18c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xec0
// Has VTable
// 
// MNetworkVarNames "bool m_bActive"
// MNetworkVarNames "EHANDLE m_hCurrentTarget"
// MNetworkVarNames "Vector m_vStartPosition"
// MNetworkVarNames "Vector m_vDeparturePosition"
// MNetworkVarNames "CCitadelAutoScaledTime m_flDepartureTime"
// MNetworkVarNames "CCitadelAutoScaledTime m_flArrivalTime"
// MNetworkVarNames "GameTime_t m_flDrainSuppressEndTime"
class CCitadel_Ability_Shiv_KillingBlow : public CCitadelBaseShivAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x1c0]; // 0xab0
public:
	// MNetworkEnable
	bool m_bActive; // 0xc70	
private:
	[[maybe_unused]] uint8_t __pad0c71[0x3]; // 0xc71
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hCurrentTarget; // 0xc74	
	// MNetworkEnable
	Vector m_vStartPosition; // 0xc78	
	// MNetworkEnable
	Vector m_vDeparturePosition; // 0xc84	
	// MNetworkEnable
	CCitadelAutoScaledTime m_flDepartureTime; // 0xc90	
	// MNetworkEnable
	CCitadelAutoScaledTime m_flArrivalTime; // 0xca8	
	Vector m_vLastKnownSafePos; // 0xcc0	
private:
	[[maybe_unused]] uint8_t __pad0ccc[0x4]; // 0xccc
public:
	ParticleIndex_t m_ChannelParticle; // 0xcd0	
private:
	[[maybe_unused]] uint8_t __pad0cd4[0xc]; // 0xcd4
public:
	// MNetworkEnable
	GameTime_t m_flDrainSuppressEndTime; // 0xce0	
private:
	[[maybe_unused]] uint8_t __pad0ce4[0x1c4]; // 0xce4
public:
	CModifierHandleTyped< CCitadelModifier > m_BuffModifier; // 0xea8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1518
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityWreckerSalvageVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SalvageEnemyModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_StunEnemyModifier; // 0x14f8	
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x1508	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Chrono_TimeWall_EffectVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffParticle; // 0x608	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x6e8	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strDamageSound; // 0x7c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x648
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TechBleed_ProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_BleedModifier; // 0x628	
	CEmbeddedSubclass< CBaseModifier > m_SlowModifier; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x550
// Has VTable
class CEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable : public CEnvSoundscapeTriggerable
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTenguLightningCrashVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AoEPreviewParticle; // 0x14e8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_FlyingModifier; // 0x15c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcd0
// Has VTable
class CCitadel_Ability_RocketBarrage : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x1f8]; // 0xab0
public:
	float m_flCurrentTimeScale; // 0xca8	
	Vector m_vecAimPos; // 0xcac	
	Vector m_vecAimVel; // 0xcb8	
	GameTime_t m_flLastUpdateTime; // 0xcc4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityBloodShardsVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x14e8	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Upgrade_KineticSash_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_KineticSashTriggeredModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1678
// Has VTable
class CNPC_MidBoss : public CAI_CitadelNPC
{
public:
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_MIDBOSS_MOVE_TO_COVER(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MIDBOSS_SLEEP(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MIDBOSS_RETURN_TO_SPAWN(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MIDBOSS_SENTRY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[3]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MIDBOSS_RELOAD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[4]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MIDBOSS_RANGE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[5]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MIDBOSS_CHARGE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[6]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MIDBOSS_CLOSE_RANGE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[7]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MIDBOSS_SLEEP(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[8]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MIDBOSS_SHIELDS_UP(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[9]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MIDBOSS_SHIELDS_DOWN(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[10]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MIDBOSS_CHARGE_SELECT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[11]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MIDBOSS_CHARGE_ACTIVATE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[12]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MIDBOSS_GUN_SELECT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss")->GetStaticFields()[13]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad8
// Has VTable
class CCitadel_WeaponUpgrade_InstantReload : public CCitadel_Item
{
public:
	bool m_bIsManualReloading; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe8
// Has VTable
class CCitadelModifierAura_Cone : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MNetworkVarNames "HMaterialStrong m_hSpriteMaterial"
// MNetworkVarNames "CHandle< CBaseEntity> m_hAttachedToEntity"
// MNetworkVarNames "AttachmentHandle_t m_nAttachment"
// MNetworkVarNames "float32 m_flSpriteFramerate"
// MNetworkVarNames "float32 m_flFrame"
// MNetworkVarNames "uint32 m_nBrightness"
// MNetworkVarNames "float32 m_flBrightnessDuration"
// MNetworkVarNames "float32 m_flSpriteScale"
// MNetworkVarNames "float32 m_flScaleDuration"
// MNetworkVarNames "bool m_bWorldSpaceScale"
// MNetworkVarNames "float32 m_flGlowProxySize"
// MNetworkVarNames "float32 m_flHDRColorScale"
class CSprite : public CBaseModelEntity
{
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_hSpriteMaterial; // 0x748	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hAttachedToEntity; // 0x750	
	// MNetworkEnable
	AttachmentHandle_t m_nAttachment; // 0x754	
private:
	[[maybe_unused]] uint8_t __pad0755[0x3]; // 0x755
public:
	// MNetworkEnable
	// MNetworkBitCount "8"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "60.000000"
	// MNetworkEncodeFlags "2"
	float m_flSpriteFramerate; // 0x758	
	// MNetworkEnable
	// MNetworkBitCount "20"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "256.000000"
	// MNetworkEncodeFlags "1"
	float m_flFrame; // 0x75c	
	GameTime_t m_flDieTime; // 0x760	
private:
	[[maybe_unused]] uint8_t __pad0764[0xc]; // 0x764
public:
	// MNetworkEnable
	uint32_t m_nBrightness; // 0x770	
	// MNetworkEnable
	float m_flBrightnessDuration; // 0x774	
	// MNetworkEnable
	// MNetworkChangeCallback "OnSpriteScaleChanged"
	float m_flSpriteScale; // 0x778	
	// MNetworkEnable
	float m_flScaleDuration; // 0x77c	
	// MNetworkEnable
	bool m_bWorldSpaceScale; // 0x780	
private:
	[[maybe_unused]] uint8_t __pad0781[0x3]; // 0x781
public:
	// MNetworkEnable
	// MNetworkBitCount "6"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "64.000000"
	// MNetworkEncodeFlags "2"
	float m_flGlowProxySize; // 0x784	
	// MNetworkEnable
	float m_flHDRColorScale; // 0x788	
	GameTime_t m_flLastTime; // 0x78c	
	float m_flMaxFrame; // 0x790	
	float m_flStartScale; // 0x794	
	float m_flDestScale; // 0x798	
	GameTime_t m_flScaleTimeStart; // 0x79c	
	int32_t m_nStartBrightness; // 0x7a0	
	int32_t m_nDestBrightness; // 0x7a4	
	GameTime_t m_flBrightnessTimeStart; // 0x7a8	
	int32_t m_nSpriteWidth; // 0x7ac	
	int32_t m_nSpriteHeight; // 0x7b0	
	
	// Datamap fields:
	// void CSpriteAnimateThink; // 0x0
	// void CSpriteExpandThink; // 0x0
	// void CSpriteAnimateUntilDead; // 0x0
	// void CSpriteBeginFadeOutThink; // 0x0
	// void InputHideSprite; // 0x0
	// void InputShowSprite; // 0x0
	// void InputToggleSprite; // 0x0
	// float InputColorRedValue; // 0x0
	// float InputColorGreenValue; // 0x0
	// float InputColorBlueValue; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTokamakBreachVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AllySmokeAOEModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_EnemySmokeAOEModifier; // 0x14f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PurgeParticle; // 0x1508	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTokamakHeatSinksVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_HeatDotModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x218
// Has VTable
class CCitadel_Modifier_Cadence_GrandFinale_Buff : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x88]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_ThrownShiv_Damage_Debuff : public CCitadelModifier
{
public:
	int32_t m_nNumTicksRemaining; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1598
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_FlameDashVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_FlameDashModifier; // 0x14e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_DashBurstSound; // 0x14f8	
	CSoundEventName m_ChargeHitSound; // 0x1508	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSpeedBoost; // 0x1518	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1670
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_PrimaryWeapon_BebopVData : public CCitadel_Ability_PrimaryWeaponVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strWindupSound; // 0x1538	
	CSoundEventName m_strBeamStartSound; // 0x1548	
	CSoundEventName m_strBeamLoopSound1; // 0x1558	
	CSoundEventName m_strBeamLoopSound2; // 0x1568	
	CSoundEventName m_strBeamStopSound; // 0x1578	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_szWeaponBeamParticle; // 0x1588	
	// MPropertyStartGroup "Misc"
	float m_flWindupRepeatCycle; // 0x1668	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_Tech_Defender_Shredders_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x180
// Has VTable
class CCitadel_Modifier_Apex_Watcher : public CCitadel_Modifier_Out_Of_Combat_Health_Regen
{
public:
	bool m_bShouldEnableBuff; // 0x140	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ColdFrontAOE_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TargetModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ReloadSpeedVData : public CCitadelModifierVData
{
public:
	float m_flReloadSpeedPercent; // 0x5f8	
	bool m_bDestroyAfterReload; // 0x5fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6a8
// Has VTable
class CSoundOpvarSetAABBEntity : public CSoundOpvarSetPointEntity
{
public:
	Vector m_vDistanceInnerMins; // 0x640	
	Vector m_vDistanceInnerMaxs; // 0x64c	
	Vector m_vDistanceOuterMins; // 0x658	
	Vector m_vDistanceOuterMaxs; // 0x664	
	int32_t m_nAABBDirection; // 0x670	
	Vector m_vInnerMins; // 0x674	
	Vector m_vInnerMaxs; // 0x680	
	Vector m_vOuterMins; // 0x68c	
	Vector m_vOuterMaxs; // 0x698	
	
	// Datamap fields:
	// void CSoundOpvarSetAABBEntitySetOpvarThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7e8
// Has VTable
// 
// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "m_nModelIndex"
// MNetworkIncludeByName "m_nRenderFX"
// MNetworkIncludeByName "m_nRenderMode"
// MNetworkIncludeByName "m_clrRender"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkOverride "m_clrRender"
// MNetworkVarNames "float32 m_flFrameRate"
// MNetworkVarNames "float32 m_flHDRColorScale"
// MNetworkVarNames "uint8 m_nNumBeamEnts"
// MNetworkVarNames "HMaterialStrong m_hBaseMaterial"
// MNetworkVarNames "HMaterialStrong m_nHaloIndex"
// MNetworkVarNames "BeamType_t m_nBeamType"
// MNetworkVarNames "uint32 m_nBeamFlags"
// MNetworkVarNames "CHandle< CBaseEntity > m_hAttachEntity"
// MNetworkVarNames "AttachmentHandle_t m_nAttachIndex"
// MNetworkVarNames "float32 m_fWidth"
// MNetworkVarNames "float32 m_fEndWidth"
// MNetworkVarNames "float32 m_fFadeLength"
// MNetworkVarNames "float32 m_fHaloScale"
// MNetworkVarNames "float32 m_fAmplitude"
// MNetworkVarNames "float32 m_fStartFrame"
// MNetworkVarNames "float32 m_fSpeed"
// MNetworkVarNames "float32 m_flFrame"
// MNetworkVarNames "BeamClipStyle_t m_nClipStyle"
// MNetworkVarNames "bool m_bTurnedOff"
// MNetworkVarNames "Vector m_vecEndPos"
class CBeam : public CBaseModelEntity
{
public:
	// MNetworkEnable
	// MNetworkBitCount "10"
	// MNetworkMinValue "-25.000000"
	// MNetworkMaxValue "25.000000"
	// MNetworkEncodeFlags "2"
	float m_flFrameRate; // 0x748	
	// MNetworkEnable
	float m_flHDRColorScale; // 0x74c	
	GameTime_t m_flFireTime; // 0x750	
	float m_flDamage; // 0x754	
	// MNetworkEnable
	uint8_t m_nNumBeamEnts; // 0x758	
private:
	[[maybe_unused]] uint8_t __pad0759[0x7]; // 0x759
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_hBaseMaterial; // 0x760	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_nHaloIndex; // 0x768	
	// MNetworkEnable
	BeamType_t m_nBeamType; // 0x770	
	// MNetworkEnable
	uint32_t m_nBeamFlags; // 0x774	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hAttachEntity[10]; // 0x778	
	// MNetworkEnable
	AttachmentHandle_t m_nAttachIndex[10]; // 0x7a0	
private:
	[[maybe_unused]] uint8_t __pad07aa[0x2]; // 0x7aa
public:
	// MNetworkEnable
	// MNetworkBitCount "10"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "102.300003"
	// MNetworkEncodeFlags "2"
	float m_fWidth; // 0x7ac	
	// MNetworkEnable
	// MNetworkBitCount "10"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "102.300003"
	// MNetworkEncodeFlags "2"
	float m_fEndWidth; // 0x7b0	
	// MNetworkEnable
	float m_fFadeLength; // 0x7b4	
	// MNetworkEnable
	float m_fHaloScale; // 0x7b8	
	// MNetworkEnable
	// MNetworkBitCount "8"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "64.000000"
	// MNetworkEncodeFlags "1"
	float m_fAmplitude; // 0x7bc	
	// MNetworkEnable
	// MNetworkBitCount "8"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "256.000000"
	// MNetworkEncodeFlags "1"
	float m_fStartFrame; // 0x7c0	
	// MNetworkEnable
	// MNetworkBitCount "8"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "100.000000"
	float m_fSpeed; // 0x7c4	
	// MNetworkEnable
	// MNetworkBitCount "20"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "256.000000"
	// MNetworkEncodeFlags "1"
	// MNetworkPriority "32"
	float m_flFrame; // 0x7c8	
	// MNetworkEnable
	BeamClipStyle_t m_nClipStyle; // 0x7cc	
	// MNetworkEnable
	bool m_bTurnedOff; // 0x7d0	
private:
	[[maybe_unused]] uint8_t __pad07d1[0x3]; // 0x7d1
public:
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector m_vecEndPos; // 0x7d4	
	CHandle< CBaseEntity > m_hEndEntity; // 0x7e0	
	int32_t m_nDissolveType; // 0x7e4	
	
	// Datamap fields:
	// float InputWidth; // 0x0
	// float InputNoise; // 0x0
	// float InputColorRedValue; // 0x0
	// float InputColorGreenValue; // 0x0
	// float InputColorBlueValue; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x948
// Has VTable
class CTriggerTier3Phase2Shield : public CTriggerNeutralShield
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd10
// Has VTable
class CCitadel_Ability_SettingSun : public CCitadelBaseAbility
{
public:
	bool m_bProjectileActive; // 0xab0	
private:
	[[maybe_unused]] uint8_t __pad0ab1[0x18f]; // 0xab1
public:
	CUtlVector< ParticleIndex_t > m_TargetPreviews; // 0xc40	
private:
	[[maybe_unused]] uint8_t __pad0c58[0xb0]; // 0xc58
public:
	bool m_bWasSelected; // 0xd08	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_SilenceProc_Immunity : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_ArmorUpgrade_RegenerativeArmorVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_RegenModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x220
// Has VTable
class CCitadel_Modifier_QuickSilver_Watcher : public CCitadel_Modifier_BaseEventProc
{
private:
	[[maybe_unused]] uint8_t __pad0170[0xa8]; // 0x170
public:
	bool m_bProcNextHit; // 0x218	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e0
// Has VTable
class CCitadel_Modifier_TechBurst_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e0
// Has VTable
// 
// MGetKV3ClassDefaults
class CAI_NPC_TrooperVData : public CAI_CitadelNPCVData
{
public:
	TrooperType_t m_TrooperType; // 0xe18	
	float m_flTrooperDamageResistPct; // 0xe1c	
	float m_flT1BossDamageResistPct; // 0xe20	
	float m_flT2BossDamageResistPct; // 0xe24	
	float m_flBarrackGuardianDamageResistPct; // 0xe28	
	float m_flNearDeathDuration; // 0xe2c	
	float m_flFlySpeed; // 0xe30	
	float m_flFlyHeight; // 0xe34	
	float m_flMeleeDamage; // 0xe38	
	float m_flMeleeDuration; // 0xe3c	
	float m_flMeleeChargeRange; // 0xe40	
	float m_flAttackT1BossMaxRange; // 0xe44	
	float m_flAttackTrooperMaxRange; // 0xe48	
	float m_flShieldDamageResistPct; // 0xe4c	
	float m_flHealthBarOffsetDucking; // 0xe50	
	// MPropertyStartGroup "Trooper DPS"
	// MPropertyDescription "Trooper vs Trooper DPS"
	float m_flTrooperDPS; // 0xe54	
	// MPropertyDescription "Trooper vs Player DPS"
	float m_flPlayerDPS; // 0xe58	
	// MPropertyDescription "Trooper vs T1 Guardian DPS"
	float m_flT1BossDPS; // 0xe5c	
	// MPropertyDescription "Trooper vs T2 Guardian DPS"
	float m_flT2BossDPS; // 0xe60	
	// MPropertyDescription "Trooper vs T3 Guardian DPS"
	float m_flT3BossDPS; // 0xe64	
	// MPropertyDescription "Trooper vs Barrack Guardian DPS"
	float m_flBarrackBossDPS; // 0xe68	
	// MPropertyDescription "Trooper vs Generator DPS"
	float m_flGeneratorBossDPS; // 0xe6c	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BossAttackParticle; // 0xe70	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LastHitParticle; // 0xf50	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetingLaserParticle; // 0x1030	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetingEyeFlashParticle; // 0x1110	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sZiplineContainerBreakFromDamageParticle; // 0x11f0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sZiplineContainerBreakFromLandingParticle; // 0x12d0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_MedicHealActiveParticle; // 0x13b0	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sPlayerLastHitSound; // 0x1490	
	CSoundEventName m_sCelebrationSound; // 0x14a0	
	CSoundEventName m_sZiplineContainerBreakSound; // 0x14b0	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_NearDeathModifier; // 0x14c0	
	CEmbeddedSubclass< CCitadelModifier > m_TrooperBossInvulnModifier; // 0x14d0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
class CCommentaryViewPosition : public CSprite
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Cadence_Crescendo_AOE_VData : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AuraParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x220
// Has VTable
class CCitadel_Modifier_Burrow : public CCitadelModifier
{
public:
	CHandle< CTriggerBurrowUnderground > m_pUndergroundTrigger; // 0xc8	
	GameTime_t m_flLastDamageTime; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierLashGrappleTargetVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LockingOnParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LockedOnParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab8
// Has VTable
class CCitadel_Ability_HornetMark : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_nFXIndex; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_DebuffImmunityVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShieldParticle; // 0x5f8	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PlayerShieldParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
// 
// MNetworkVarNames "float m_flProgress"
// MNetworkVarNames "int m_nNumPushers"
class CCitadelPayload : public CCitadelAnimatingModelEntity
{
private:
	[[maybe_unused]] uint8_t __pad0ad8[0x18]; // 0xad8
public:
	CModifierHandleTyped< CCitadelModifierAura > m_hPusherAura; // 0xaf0	
	CModifierHandleTyped< CCitadelModifierAura > m_hBlockerAura; // 0xb08	
private:
	[[maybe_unused]] uint8_t __pad0b20[0x18]; // 0xb20
public:
	// MNetworkEnable
	float m_flProgress; // 0xb38	
	// MNetworkEnable
	int32_t m_nNumPushers; // 0xb3c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e0
// Has VTable
class CTonemapController2Alias_env_tonemap_controller2 : public CTonemapController2
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x360
// Has VTable
// 
// MGetKV3ClassDefaults
class CNPC_ShieldedSentryVData : public CNPC_SimpleAnimatingAIVData
{
public:
	float m_flZShootPostionOffset; // 0x108	
private:
	[[maybe_unused]] uint8_t __pad010c[0x4]; // 0x10c
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaserSightParticle; // 0x110	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_KillExplosionParticle; // 0x1f0	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DeployProgressModifier; // 0x2d0	
	CEmbeddedSubclass< CCitadelModifier > m_NearDeathModifier; // 0x2e0	
	CEmbeddedSubclass< CCitadelModifier > m_IntrinsicModifier; // 0x2f0	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sSpawnSound; // 0x300	
	CSoundEventName m_sKillExplosionSound; // 0x310	
	CSoundEventName m_sTargetAcquiredLocalSound; // 0x320	
	CSoundEventName m_sTargetAcquiredSound; // 0x330	
	// MPropertyStartGroup "Stats"
	float m_flIdleTurnSpeed; // 0x340	
	float m_flIdleTurnAngles; // 0x344	
	float m_flTrooperTakeDamageMult; // 0x348	
	float m_flNeutralTakeDamageMulti; // 0x34c	
	float m_flNotifyEventTime; // 0x350	
	float m_flNearDeathDuration; // 0x354	
	float m_flMinimapRevealTime; // 0x358	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SleepDaggerAsleepVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x5f8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_PostSleepModifier; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityImmobilizeTrapVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PreviewRingParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TrapHighlightParticle; // 0x16a8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ArmedParticle; // 0x1788	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strTripSound; // 0x1868	
	CSoundEventName m_strExplodeSound; // 0x1878	
	CSoundEventName m_strExpiredSound; // 0x1888	
	CSoundEventName m_strImmobilizeTargetSound; // 0x1898	
	CSoundEventName m_strArmingSound; // 0x18a8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TrapModifier; // 0x18b8	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x18c8	
	CEmbeddedSubclass< CCitadelModifier > m_DotModifier; // 0x18d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc28
// Has VTable
// 
// MNetworkVarNames "CCitadelAutoScaledTime m_flDetonateTime"
// MNetworkVarNames "GameTime_t m_flStartTime"
class CCitadel_Ability_FireBomb : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x158]; // 0xab0
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	CCitadelAutoScaledTime m_flDetonateTime; // 0xc08	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	GameTime_t m_flStartTime; // 0xc20	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Item_SmokeBomb_PreCast : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_MagicShock_ProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ProcParticle; // 0x628	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_hDamageTrackModifier; // 0x708	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CAI_SpeechFilter : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CUtlSymbolLarge m_iszSubject; // 0x4c0	
	float m_flIdleModifier; // 0x4c8	
	bool m_bNeverSayHello; // 0x4cc	
	bool m_bDisabled; // 0x4cd	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// float InputSetIdleModifier; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x560
// Has VTable
class CPhysPulley : public CPhysConstraint
{
public:
	Vector m_position2; // 0x530	
	Vector m_offset[2]; // 0x53c	
	float m_addLength; // 0x554	
	float m_gearRatio; // 0x558	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Shiv_KillingBlowVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_LeapModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_ActiveBuff; // 0x14f8	
	CEmbeddedSubclass< CCitadelModifier > m_KillableModifier; // 0x1508	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AttackParticle; // 0x1518	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x15f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FlashParticle; // 0x16d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_KillingBlowCastParticle; // 0x17b8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ChargeUpSound; // 0x1898	
	CSoundEventName m_OnKillSound; // 0x18a8	
	// MPropertyStartGroup "+Killing Blow Params"
	float m_flPreArrivalAttackStartTime; // 0x18b8	
	float m_flKillableGlowRange; // 0x18bc	
	float m_flGlowMinTime; // 0x18c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd18
// Has VTable
// 
// MNetworkVarNames "Vector m_vStartPosition"
// MNetworkVarNames "Vector m_vDashDirection"
// MNetworkVarNames "bool m_bIsDashing"
// MNetworkVarNames "bool m_bStartedInAir"
class CCitadel_Ability_ShivDash : public CCitadelBaseShivAbility
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vStartPosition; // 0xab0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vDashDirection; // 0xabc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bIsDashing; // 0xac8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bStartedInAir; // 0xac9	
private:
	[[maybe_unused]] uint8_t __pad0aca[0x6]; // 0xaca
public:
	CUtlVector< CEntityIndex > m_vecHitEnemies; // 0xad0	
	Vector m_vecLastPosition; // 0xae8	
	int32_t m_nReductionsLeft; // 0xaf4	
private:
	[[maybe_unused]] uint8_t __pad0af8[0x1f8]; // 0xaf8
public:
	GameTime_t m_flStuckTime; // 0xcf0	
	CHandle< CPointModifierThinker > m_hEchoThinker; // 0xcf4	
	GameTime_t m_EchoStartTime; // 0xcf8	
	bool m_bLetEchoPlay; // 0xcfc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc00
// Has VTable
class CCitadel_Ability_TrooperNeutralGrenade : public CCitadel_Ability_TrooperGrenade
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_PlayerPinged : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CCitadelEnergyTower : public CServerOnlyEntity
{
public:
	bool m_bEnabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	float m_flDamage; // 0x4bc	
	float m_flRadius; // 0x4c0	
	
	// Datamap fields:
	//  InputEnable; // 0x0
	//  InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CGameRulesProxy : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9a0
// Has VTable
// 
// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkIncludeByName "m_nNextThinkTick"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkUserGroupProxy "CBasePlayerWeapon"
// MNetworkVarNames "GameTick_t m_nNextPrimaryAttackTick"
// MNetworkVarNames "float32 m_flNextPrimaryAttackTickRatio"
// MNetworkVarNames "GameTick_t m_nNextSecondaryAttackTick"
// MNetworkVarNames "float32 m_flNextSecondaryAttackTickRatio"
// MNetworkVarNames "int32 m_iClip1"
// MNetworkVarNames "int32 m_iClip2"
// MNetworkVarNames "int m_pReserveAmmo"
class CBasePlayerWeapon : public CBaseAnimGraph
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalWeaponExclusive"
	GameTick_t m_nNextPrimaryAttackTick; // 0x958	
	// MNetworkEnable
	// MNetworkUserGroup "LocalWeaponExclusive"
	float m_flNextPrimaryAttackTickRatio; // 0x95c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalWeaponExclusive"
	GameTick_t m_nNextSecondaryAttackTick; // 0x960	
	// MNetworkEnable
	// MNetworkUserGroup "LocalWeaponExclusive"
	float m_flNextSecondaryAttackTickRatio; // 0x964	
	// MNetworkEnable
	// MNetworkSerializer "minusone"
	// MNetworkPriority "32"
	int32_t m_iClip1; // 0x968	
	// MNetworkEnable
	// MNetworkSerializer "minusone"
	// MNetworkUserGroup "LocalWeaponExclusive"
	int32_t m_iClip2; // 0x96c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalWeaponExclusive"
	int32_t m_pReserveAmmo[2]; // 0x970	
	CEntityIOOutput m_OnPlayerUse; // 0x978	
	
	// Datamap fields:
	// int32_t InputSetClipPrimary; // 0x0
	// int32_t InputSetClipSecondary; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_Item_Containment : public CCitadel_Item_TrackingProjectileApplyModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1b8
// Has VTable
class CCitadel_Modifier_Rutger_Pulse_Target : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xe0]; // 0xc8
public:
	Vector m_vAuraCenter; // 0x1a8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityGenericPerson3VData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityPsychicLiftVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_LiftModifier; // 0x14e8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetParticle; // 0x14f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_TargetCastSound; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ColossusActive_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_AuraModifier; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShieldParticle; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Discord_Enemy : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_BulletArmorShredder_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_Bullet_Shield : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BonusDamagePercentVData : public CCitadelModifierVData
{
public:
	bool m_bSelfish; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x810
// Has VTable
class CEnvLaser : public CBeam
{
public:
	CUtlSymbolLarge m_iszLaserTarget; // 0x7e8	
	CSprite* m_pSprite; // 0x7f0	
	CUtlSymbolLarge m_iszSpriteName; // 0x7f8	
	Vector m_firePosition; // 0x800	
	float m_flStartFrame; // 0x80c	
	
	// Datamap fields:
	// void CEnvLaserStrikeThink; // 0x0
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// void InputToggle; // 0x0
	// float width; // 0x7fffffff
	// int32_t NoiseAmplitude; // 0x7fffffff
	// int32_t TextureScroll; // 0x7fffffff
	// CUtlString texture; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9e8
// Has VTable
class CBaseFlexAlias_funCBaseFlex : public CBaseFlex
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa60
// Has VTable
// 
// MNetworkIncludeByName "m_nModelIndex"
// MNetworkIncludeByName "m_lifeState"
// MNetworkVarNames "float32 m_x"
// MNetworkVarNames "float32 m_y"
// MNetworkVarNames "float32 m_z"
// MNetworkVarNames "float32 m_angle"
// MNetworkVarNames "Vector m_poolOrigin"
// MNetworkVarNames "float32 m_waterLevel"
class CFish : public CBaseAnimGraph
{
public:
	CHandle< CFishPool > m_pool; // 0x958	
	uint32_t m_id; // 0x95c	
	// MNetworkEnable
	// MNetworkSerializer "fish_pos_x"
	float m_x; // 0x960	
	// MNetworkEnable
	// MNetworkSerializer "fish_pos_y"
	float m_y; // 0x964	
	// MNetworkEnable
	// MNetworkSerializer "fish_pos_z"
	float m_z; // 0x968	
	// MNetworkEnable
	// MNetworkSerializer "angle_normalize_positive"
	// MNetworkBitCount "7"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "360.000000"
	// MNetworkEncodeFlags "1"
	float m_angle; // 0x96c	
	float m_angleChange; // 0x970	
	Vector m_forward; // 0x974	
	Vector m_perp; // 0x980	
	// MNetworkEnable
	// MNetworkEncoder "coord"
	Vector m_poolOrigin; // 0x98c	
	// MNetworkEnable
	float m_waterLevel; // 0x998	
	float m_speed; // 0x99c	
	float m_desiredSpeed; // 0x9a0	
	float m_calmSpeed; // 0x9a4	
	float m_panicSpeed; // 0x9a8	
	float m_avoidRange; // 0x9ac	
	CountdownTimer m_turnTimer; // 0x9b0	
	bool m_turnClockwise; // 0x9c8	
private:
	[[maybe_unused]] uint8_t __pad09c9[0x7]; // 0x9c9
public:
	CountdownTimer m_goTimer; // 0x9d0	
	CountdownTimer m_moveTimer; // 0x9e8	
	CountdownTimer m_panicTimer; // 0xa00	
	CountdownTimer m_disperseTimer; // 0xa18	
	CountdownTimer m_proximityTimer; // 0xa30	
	CUtlVector< CFish* > m_visible; // 0xa48	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8d0
// Has VTable
class CLaneNode : public CCitadelModelEntity
{
public:
	// Datamap fields:
	// CHandle< CBaseEntity > m_hLastTrooperChecked; // 0x8c8
	// CHandle< CBaseEntity > m_hLastBossChecked; // 0x8cc
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CEnvFireSource : public CBaseEntity
{
public:
	bool m_bEnabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	float m_radius; // 0x4bc	
	float m_damage; // 0x4c0	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe28
// Has VTable
// 
// MGetKV3ClassDefaults
class CNPC_HeroCloneTrooperVData : public CAI_CitadelNPCVData
{
public:
	bool m_bMeleeOnly; // 0xe18	
	bool m_bChargeForward; // 0xe19	
private:
	[[maybe_unused]] uint8_t __pad0e1a[0x2]; // 0xe1a
public:
	float m_flMeleeChargeRange; // 0xe1c	
	bool m_bCloneOwnerWeapon; // 0xe20	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_Cadence_Gun_Spikes : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1150
// Has VTable
// 
// MNetworkVarNames "Vector m_vBeamAimPos"
// MNetworkVarNames "QAngle m_angBeamAngles"
class CCitadel_Ability_IceBeam : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x618]; // 0xab0
public:
	GameTime_t m_flNextDamageTick; // 0x10c8	
	Vector m_vStart; // 0x10cc	
	Vector m_vEnd; // 0x10d8	
private:
	[[maybe_unused]] uint8_t __pad10e4[0x3c]; // 0x10e4
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecEntitiesHit; // 0x1120	
	// MNetworkEnable
	Vector m_vBeamAimPos; // 0x1138	
	// MNetworkEnable
	QAngle m_angBeamAngles; // 0x1144	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x160
// Has VTable
class CCitadel_Modifier_Cadence_Sleeping : public CCitadel_Modifier_Sleep
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8a8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_RadianceVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RadianceFxParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RadianceDamageParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ClientsideDamageParticle; // 0x7b8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strDamageRecievedSound; // 0x898	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CInfoLadderDismount : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x930
// Has VTable
// 
// MNetworkVarNames "CUtlString m_strStartTouchEventName"
// MNetworkVarNames "CUtlString m_strEndTouchEventName"
// MNetworkVarNames "CUtlString m_strTriggerID"
class CTriggerGameEvent : public CBaseTrigger
{
public:
	// MNetworkEnable
	CUtlString m_strStartTouchEventName; // 0x918	
	// MNetworkEnable
	CUtlString m_strEndTouchEventName; // 0x920	
	// MNetworkEnable
	CUtlString m_strTriggerID; // 0x928	
	
	// Datamap fields:
	// CUtlSymbolLarge InputSetStartTouchEvent; // 0x0
	// CUtlSymbolLarge InputSetEndTouchEvent; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x988
// Has VTable
class CTriggerItemShopSafeZone : public CBaseTrigger
{
private:
	[[maybe_unused]] uint8_t __pad0918[0x20]; // 0x918
public:
	CEntityIOOutput m_OnContested; // 0x938	
	CEntityIOOutput m_OnNotContested; // 0x960	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x20
// Has VTable
// Has Trivial Destructor
class SimpleConstraintSoundProfile
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	SimpleConstraintSoundProfile::SimpleConstraintsSoundProfileKeypoints_t eKeypoints; // 0x8	
	float m_keyPoints[2]; // 0xc	
	float m_reversalSoundThresholds[3]; // 0x14	
	
	// Datamap fields:
	// float m_keyPoints[0]; // 0xc
	// float m_keyPoints[1]; // 0x10
	// float m_reversalSoundThresholds[0]; // 0x14
	// float m_reversalSoundThresholds[1]; // 0x18
	// float m_reversalSoundThresholds[2]; // 0x1c
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x3e94a0
// Has VTable
class CDebugHistory : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x3e8040]; // 0x4b8
public:
	int32_t m_nNpcEvents; // 0x3e84f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierLockDownDebuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AOEParticleCaster; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AOEParticleEnemy; // 0x7b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AOEParticleOthers; // 0x898	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strFollowLoop; // 0x978	
	CSoundEventName m_strExplodeSound; // 0x988	
	CSoundEventName m_strEscapedSound; // 0x998	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_RootModifier; // 0x9a8	
	CEmbeddedSubclass< CCitadelModifier > m_BulletResistModifier; // 0x9b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Bounce_Pad_Ally : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x648
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierAirRaidVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x628	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strWeaponShootSound; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Bull_HealVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AuraModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Passive_Cloak : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1550
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_ComboBreakerVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ComboBreakerModifier; // 0x1530	
	CEmbeddedSubclass< CCitadelModifier > m_HealModifier; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 16
// Size: 0x850
// Has VTable
class CInfoData : public CServerOnlyEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CLightSpotEntity : public CLightEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x958
// Has VTable
class CCitadelBoomerangProjectile : public CCitadelProjectile
{
private:
	[[maybe_unused]] uint8_t __pad0800[0x150]; // 0x800
public:
	bool m_bReturning; // 0x950	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x998
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SettingSunThinker_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LingerParticle; // 0x7b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LayerParticle; // 0x898	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x978	
	CSoundEventName m_strTargetingCompletedSound; // 0x988	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa98
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_PsychicDagger_MakeDaggers_VData : public CCitadelModifierVData
{
public:
	float m_flDesatAmount; // 0x5f8	
	Color m_DesatTint; // 0x5fc	
	Color m_SatTint; // 0x600	
	Color m_Outline; // 0x604	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DaggerShot; // 0x608	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DaggerSpawn; // 0x6e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DaggerAoE; // 0x7c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DaggerTargetPreview; // 0x8a8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DaggerShotFail; // 0x988	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_DaggerFireSound; // 0xa68	
	CSoundEventName m_DaggerMissSound; // 0xa78	
	CSoundEventName m_LastDaggerMissSound; // 0xa88	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1c0
// Has VTable
class CCitadel_Modifier_GhostBloodShard : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xa8]; // 0xc8
public:
	float m_flMinSlowAmount; // 0x170	
	float m_flMoveSpeedPenaltyPerStack; // 0x174	
	float m_flSlowDuration; // 0x178	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_LifestrikeGauntlets_VData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SwingParticle; // 0x628	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x708	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_AmmoScavenger : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Objective_RegenVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Objective Health Regen"
	// MPropertyDescription "How health per second when out of combat?"
	float m_flOutOfCombatHealthRegen; // 0x5f8	
	// MPropertyDescription "How longer after taking no damage will out out of combat regen kick in?"
	float m_flOutOfCombatRegenDelay; // 0x5fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_ApplyDebuff_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x960
// Has VTable
class CCitadel_HeroTestOrbSpawner : public CBaseAnimGraph
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad8
// Has VTable
class CCitadel_Item_RescueBeam : public CCitadel_Item
{
public:
	bool m_bCanPull; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x830
// Has VTable
// 
// MNetworkOverride "m_angRotation CGameSceneNode"
// MNetworkOverride "m_flSimulationTime CBaseEntity"
class CFuncRotating : public CBaseModelEntity
{
public:
	CEntityIOOutput m_OnStopped; // 0x748	
	CEntityIOOutput m_OnStarted; // 0x770	
	CEntityIOOutput m_OnReachedStart; // 0x798	
	RotationVector m_localRotationVector; // 0x7c0	
	float m_flFanFriction; // 0x7cc	
	float m_flAttenuation; // 0x7d0	
	float m_flVolume; // 0x7d4	
	float m_flTargetSpeed; // 0x7d8	
	float m_flMaxSpeed; // 0x7dc	
	float m_flBlockDamage; // 0x7e0	
private:
	[[maybe_unused]] uint8_t __pad07e4[0x4]; // 0x7e4
public:
	CUtlSymbolLarge m_NoiseRunning; // 0x7e8	
	bool m_bReversed; // 0x7f0	
	bool m_bAccelDecel; // 0x7f1	
private:
	[[maybe_unused]] uint8_t __pad07f2[0xa]; // 0x7f2
public:
	QAngle m_prevLocalAngles; // 0x7fc	
	QAngle m_angStart; // 0x808	
	bool m_bStopAtStartPos; // 0x814	
private:
	[[maybe_unused]] uint8_t __pad0815[0x3]; // 0x815
public:
	Vector m_vecClientOrigin; // 0x818	
	QAngle m_vecClientAngles; // 0x824	
	
	// Datamap fields:
	// bool movewithoutpushingblockers; // 0x7fffffff
	// void CFuncRotatingSpinUpMove; // 0x0
	// void CFuncRotatingSpinDownMove; // 0x0
	// void CFuncRotatingHurtTouch; // 0x0
	// void CFuncRotatingRotatingUse; // 0x0
	// void CFuncRotatingRotateMove; // 0x0
	// void CFuncRotatingReverseMove; // 0x0
	// float InputSetSpeed; // 0x0
	// void InputStart; // 0x0
	// void InputStop; // 0x0
	// void InputToggle; // 0x0
	// void InputReverse; // 0x0
	// void InputStartForward; // 0x0
	// void InputStartBackward; // 0x0
	// void InputStopAtStartPos; // 0x0
	// void InputSnapToStartPos; // 0x0
	// Vector InputSetStartPos; // 0x0
	// void InputEnableAccelDecel; // 0x0
	// void InputDisableAccelDecel; // 0x0
	// void m_nNoiseRunningGuid; // 0x7f4
	// int32_t fanfriction; // 0x7fffffff
	// int32_t Volume; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityCadenceLullabyVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SleepAOEModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_Chrono_TimeWall_Effect : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x18]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1620
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_WeaponUpgrade_SurgingPowerVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ModifierSurgingPower; // 0x1530	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastTargetEffect; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_FireRateAuraVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FireRateAuraSourceParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_MagicClarityWatcher : public CCitadel_Modifier_Intrinsic_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x48
// Has VTable
class CAI_MoveProbe : public CAI_Component
{
public:
	CHandle< CBaseEntity > m_hLastBlockingEnt; // 0x40	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Metal : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
class CFuncTrainControls : public CBaseModelEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_Slork_Raging_Current_Damp : public CCitadel_Modifier_Stunned
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityGangActivityVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AbilitySwap; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_SettingSun_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamTargetParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_UnitTargetParticle; // 0x15c8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_SettingSunThinkerModifier; // 0x16a8	
	float m_flSSCameraPreviewOffset; // 0x16b8	
	float m_flSSCameraPreviewSpeed; // 0x16bc	
	float m_flSSCameraPreviewDistance; // 0x16c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Burrow_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BurrowPlayerParticle; // 0x5f8	
	float m_flDesatAmount; // 0x6d8	
	Color m_DesatTint; // 0x6dc	
	Color m_SatTint; // 0x6e0	
	Color m_Outline; // 0x6e4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CModifier_BansheeSlugs_Headshot : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_ReturnFire : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_BulletResistReductionStack : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CFuncFoliageVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BulletImpactParticle; // 0x28	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BulletExitParticle; // 0x108	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x778
// Has VTable
// 
// MNetworkVarNames "float32 m_flFadeInStart"
// MNetworkVarNames "float32 m_flFadeInLength"
// MNetworkVarNames "float32 m_flFadeOutModelStart"
// MNetworkVarNames "float32 m_flFadeOutModelLength"
// MNetworkVarNames "float32 m_flFadeOutStart"
// MNetworkVarNames "float32 m_flFadeOutLength"
// MNetworkVarNames "GameTime_t m_flStartTime"
// MNetworkVarNames "EntityDisolveType_t m_nDissolveType"
// MNetworkVarNames "Vector m_vDissolverOrigin"
// MNetworkVarNames "uint32 m_nMagnitude"
class CEntityDissolve : public CBaseModelEntity
{
public:
	// MNetworkEnable
	float m_flFadeInStart; // 0x748	
	// MNetworkEnable
	float m_flFadeInLength; // 0x74c	
	// MNetworkEnable
	float m_flFadeOutModelStart; // 0x750	
	// MNetworkEnable
	float m_flFadeOutModelLength; // 0x754	
	// MNetworkEnable
	float m_flFadeOutStart; // 0x758	
	// MNetworkEnable
	float m_flFadeOutLength; // 0x75c	
	// MNetworkEnable
	GameTime_t m_flStartTime; // 0x760	
	// MNetworkEnable
	EntityDisolveType_t m_nDissolveType; // 0x764	
	// MNetworkEnable
	Vector m_vDissolverOrigin; // 0x768	
	// MNetworkEnable
	uint32_t m_nMagnitude; // 0x774	
	
	// Datamap fields:
	// void CEntityDissolveDissolveThink; // 0x0
	// void CEntityDissolveElectrocuteThink; // 0x0
	// CUtlSymbolLarge InputDissolve; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x580
// Has VTable
class CPointAngleSensor : public CPointEntity
{
public:
	bool m_bDisabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x7]; // 0x4b9
public:
	CUtlSymbolLarge m_nLookAtName; // 0x4c0	
	CHandle< CBaseEntity > m_hTargetEntity; // 0x4c8	
	CHandle< CBaseEntity > m_hLookAtEntity; // 0x4cc	
	float m_flDuration; // 0x4d0	
	float m_flDotTolerance; // 0x4d4	
	GameTime_t m_flFacingTime; // 0x4d8	
	bool m_bFired; // 0x4dc	
private:
	[[maybe_unused]] uint8_t __pad04dd[0x3]; // 0x4dd
public:
	CEntityIOOutput m_OnFacingLookat; // 0x4e0	
	CEntityIOOutput m_OnNotFacingLookat; // 0x508	
	CEntityOutputTemplate< Vector > m_TargetDir; // 0x530	
	CEntityOutputTemplate< float32 > m_FacingPercentage; // 0x558	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void InputToggle; // 0x0
	// void InputTest; // 0x0
	// CUtlSymbolLarge InputSetTargetEntity; // 0x0
	// float tolerance; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x588
// Has VTable
// 
// MNetworkVarNames "Vector m_vMins"
// MNetworkVarNames "Vector m_vMaxs"
class CSoundEventOBBEntity : public CSoundEventEntity
{
public:
	// MNetworkEnable
	Vector m_vMins; // 0x570	
	// MNetworkEnable
	Vector m_vMaxs; // 0x57c	
	
	// Datamap fields:
	// void CSoundEventOBBEntitySoundEventOBBThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf0
// Has VTable
class CCitadel_Modifier_Teleport : public CCitadelModifier
{
public:
	Vector m_vDest; // 0xc8	
	QAngle m_angDestAngles; // 0xd4	
	Vector m_vDestVelocity; // 0xe0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Arcane_Eater_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1d0
// Has VTable
class CCitadel_Modifier_Galvanic_Storm : public CCitadel_Modifier_ChainLightning
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e8
// Has VTable
class CCitadelZipLinePathNode : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	bool m_bCornerNode; // 0x4c0	
	bool m_bDisableZippingToByPlayers; // 0x4c1	
	bool m_bEnabled; // 0x4c2	
	bool m_bCapturable; // 0x4c3	
	bool m_bAlwaysUsable; // 0x4c4	
	bool m_bOneWay; // 0x4c5	
private:
	[[maybe_unused]] uint8_t __pad04c6[0x2]; // 0x4c6
public:
	CUtlSymbolLarge m_strGuardBossName; // 0x4c8	
	CUtlSymbolLarge m_strGuardBossName2; // 0x4d0	
	CUtlSymbolLarge m_strGuardBossName3; // 0x4d8	
	
	// Datamap fields:
	// void m_pNode; // 0x4e0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x278
// Has VTable
// 
// MNetworkVarNames "CNetworkVelocityVector m_vPositionDeltaVelocity"
class CCitadelPlayer_MovementServices : public CPlayer_MovementServices_Humanoid
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	// MNetworkPriority "32"
	CNetworkVelocityVector m_vPositionDeltaVelocity; // 0x228	
private:
	[[maybe_unused]] uint8_t __pad0250[0x8]; // 0x250
public:
	Vector m_vecPogoVelocity; // 0x258	
	Vector m_vecSupport; // 0x264	
	bool m_bColliding; // 0x270	
	bool m_bLandedOnGround; // 0x271	
	bool m_bHasFreeCursor; // 0x272	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc
// Has Trivial Destructor
struct CEconEntity__AttachedParticleInfo_t
{
public:
	ParticleIndex_t m_nAttachedParticleIndex; // 0x0	
	CUtlStringToken m_customType; // 0x4	
	bool m_bShouldDestroyImmediately; // 0x8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17b0
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityWreckingBallVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SummonParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SummonReadyParticle; // 0x15c8	
	CUtlString m_SummonParticleAttachment; // 0x16a8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x16b0	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AutoThrowModifier; // 0x1790	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_HoldingBallLoop; // 0x17a0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x2a8
// Has VTable
class CCitadel_Modifier_Gravity_Lasso_Self : public CCitadelModifier
{
public:
	bool m_bHasUsedBouncePad; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00c9[0x7]; // 0xc9
public:
	CUtlVector< CHandle< CBaseEntity > > m_vCastTargets; // 0xd0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb00
// Has VTable
class CCitadel_Ability_PsychicLift : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_Tokamak_HeatSinks_DOT : public CCitadel_Modifier_Burning
{
public:
	GameTime_t m_flLastBurnTime; // 0xc8	
	float m_flScaledDPS; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_InFountain : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x500
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "bool m_bActive"
// MNetworkVarNames "Vector m_vBoxMins"
// MNetworkVarNames "Vector m_vBoxMaxs"
// MNetworkVarNames "bool m_bStartDisabled"
// MNetworkVarNames "float m_flStrength"
// MNetworkVarNames "int m_nFalloffShape"
// MNetworkVarNames "float m_flFalloffExponent"
// MNetworkVarNames "float m_flHeightFogDepth"
// MNetworkVarNames "float m_fHeightFogEdgeWidth"
// MNetworkVarNames "float m_fIndirectLightStrength"
// MNetworkVarNames "float m_fSunLightStrength"
// MNetworkVarNames "float m_fNoiseStrength"
// MNetworkVarNames "bool m_bOverrideIndirectLightStrength"
// MNetworkVarNames "bool m_bOverrideSunLightStrength"
// MNetworkVarNames "bool m_bOverrideNoiseStrength"
// MNetworkVarNames "bool m_bAllowLPVIndirect"
class CEnvVolumetricFogVolume : public CBaseEntity
{
public:
	// MNetworkEnable
	bool m_bActive; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	// MNetworkEnable
	Vector m_vBoxMins; // 0x4bc	
	// MNetworkEnable
	Vector m_vBoxMaxs; // 0x4c8	
	// MNetworkEnable
	bool m_bStartDisabled; // 0x4d4	
private:
	[[maybe_unused]] uint8_t __pad04d5[0x3]; // 0x4d5
public:
	// MNetworkEnable
	float m_flStrength; // 0x4d8	
	// MNetworkEnable
	int32_t m_nFalloffShape; // 0x4dc	
	// MNetworkEnable
	float m_flFalloffExponent; // 0x4e0	
	// MNetworkEnable
	float m_flHeightFogDepth; // 0x4e4	
	// MNetworkEnable
	float m_fHeightFogEdgeWidth; // 0x4e8	
	// MNetworkEnable
	float m_fIndirectLightStrength; // 0x4ec	
	// MNetworkEnable
	float m_fSunLightStrength; // 0x4f0	
	// MNetworkEnable
	float m_fNoiseStrength; // 0x4f4	
	// MNetworkEnable
	bool m_bOverrideIndirectLightStrength; // 0x4f8	
	// MNetworkEnable
	bool m_bOverrideSunLightStrength; // 0x4f9	
	// MNetworkEnable
	bool m_bOverrideNoiseStrength; // 0x4fa	
	// MNetworkEnable
	bool m_bAllowLPVIndirect; // 0x4fb	
	
	// Datamap fields:
	// bool InputEnable; // 0x0
	// bool InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x2f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_PickupItemSpawnerVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyGroupName "Visuals"
	// MPropertyDescription "Model"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_hModel; // 0x28	
	float m_flModelScale; // 0x108	
private:
	[[maybe_unused]] uint8_t __pad010c[0x4]; // 0x10c
public:
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_InactiveParticle; // 0x110	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ActiveParticle; // 0x1f0	
	// MPropertyStartGroup "Pickup rewards"
	CUtlVector< BreakablePowerupDropDefinition_t > m_vecPrimaryPickups; // 0x2d0	
	// MPropertyStartGroup "Gameplay"
	float m_flInitialSpawnTime; // 0x2e8	
	float m_flRespawnTime; // 0x2ec	
	float m_flInitialSpawnTimeTest; // 0x2f0	
	float m_flRespawnTimeTest; // 0x2f4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierSlorkAmbushVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strAmbushEffect; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x2e0
// Has VTable
class CCitadel_Modifier_Slork_Invis : public CCitadel_Modifier_Invis
{
private:
	[[maybe_unused]] uint8_t __pad0268[0x70]; // 0x268
public:
	bool m_bHasGoneFullyInvis; // 0x2d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Cadence_Crescendo_PostAOE : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_ChargedTackleActive : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e0
// Has VTable
class CCitadel_Modifier_MobileResupply : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x50]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_MagicCarpet_Summon : public CCitadel_Modifier_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_RescueBeamVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x890
// Has VTable
class CEnvBeam : public CBeam
{
public:
	int32_t m_active; // 0x7e8	
private:
	[[maybe_unused]] uint8_t __pad07ec[0x4]; // 0x7ec
public:
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_spriteTexture; // 0x7f0	
	CUtlSymbolLarge m_iszStartEntity; // 0x7f8	
	CUtlSymbolLarge m_iszEndEntity; // 0x800	
	float m_life; // 0x808	
	float m_boltWidth; // 0x80c	
	float m_noiseAmplitude; // 0x810	
	int32_t m_speed; // 0x814	
	float m_restrike; // 0x818	
private:
	[[maybe_unused]] uint8_t __pad081c[0x4]; // 0x81c
public:
	CUtlSymbolLarge m_iszSpriteName; // 0x820	
	int32_t m_frameStart; // 0x828	
	Vector m_vEndPointWorld; // 0x82c	
	Vector m_vEndPointRelative; // 0x838	
	float m_radius; // 0x844	
	Touch_t m_TouchType; // 0x848	
private:
	[[maybe_unused]] uint8_t __pad084c[0x4]; // 0x84c
public:
	CUtlSymbolLarge m_iFilterName; // 0x850	
	CHandle< CBaseEntity > m_hFilter; // 0x858	
private:
	[[maybe_unused]] uint8_t __pad085c[0x4]; // 0x85c
public:
	CUtlSymbolLarge m_iszDecal; // 0x860	
	CEntityIOOutput m_OnTouchedByEntity; // 0x868	
	
	// Datamap fields:
	// int32_t m_nClipStyle; // 0x7cc
	// void CEnvBeamStrikeThink; // 0x0
	// void CEnvBeamUpdateThink; // 0x0
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// void InputToggle; // 0x0
	// void InputStrikeOnce; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
class CFuncIllusionary : public CBaseModelEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x278
// Has VTable
class CModifier_Mirage_SandPhantom : public CCitadelModifier
{
public:
	ParticleIndex_t m_particleStart; // 0xc8	
	ParticleIndex_t m_particleEnd; // 0xcc	
	ParticleIndex_t m_particleTrail; // 0xd0	
	Vector m_vecStartPosition; // 0xd4	
	float m_flStartDelay; // 0xe0	
	Vector m_vecApplyOffset; // 0xe4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1f0
// Has VTable
class CModifier_Synth_Grasp_Victim : public CCitadelModifier
{
public:
	Vector m_vecOrigin; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_Cadence_Lullaby : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_GangActivity : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1510
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_ShieldedSentry_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_InnateModifier; // 0x14e8	
	CEmbeddedSubclass< CBaseModifier > m_DebuffModifier; // 0x14f8	
	// MPropertyStartGroup "Gameplay"
	float m_flDamageFalloffEndScale; // 0x1508	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Hornet_Snipe : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_SuperNeutralIncendiary : public CCitadelBaseAbilityServerOnly
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
// 
// MGetKV3ClassDefaults
class CScaleFunctionAbilityPropertySingleStatVData : public CScaleFunctionVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9e8
// Has VTable
class CPhysMagnet : public CBaseAnimGraph
{
public:
	CEntityIOOutput m_OnMagnetAttach; // 0x958	
	CEntityIOOutput m_OnMagnetDetach; // 0x980	
	float m_massScale; // 0x9a8	
	float m_forceLimit; // 0x9ac	
	float m_torqueLimit; // 0x9b0	
private:
	[[maybe_unused]] uint8_t __pad09b4[0x4]; // 0x9b4
public:
	CUtlVector< magnetted_objects_t > m_MagnettedEntities; // 0x9b8	
	bool m_bActive; // 0x9d0	
	bool m_bHasHitSomething; // 0x9d1	
private:
	[[maybe_unused]] uint8_t __pad09d2[0x2]; // 0x9d2
public:
	float m_flTotalMass; // 0x9d4	
	float m_flRadius; // 0x9d8	
	GameTime_t m_flNextSuckTime; // 0x9dc	
	int32_t m_iMaxObjectsAttached; // 0x9e0	
	
	// Datamap fields:
	// void InputToggle; // 0x0
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa18
// Has VTable
class CSceneEntityAlias_logic_choreographed_scene : public CSceneEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Thumper_2_AuraVData : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AoEParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x618
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ItemWalkBackVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Gameplay"
	float m_flStopDistance; // 0x5f8	
	float m_flMaxSpeedDistance; // 0x5fc	
	float m_flSlowSpeed; // 0x600	
	float m_flFastSpeed; // 0x604	
	float m_flVerticalOffset; // 0x608	
	float m_flTolerance; // 0x60c	
	float m_flRepathTime; // 0x610	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x758
// Has VTable
class CFuncNavBlocker : public CBaseModelEntity
{
public:
	bool m_bDisabled; // 0x748	
private:
	[[maybe_unused]] uint8_t __pad0749[0x3]; // 0x749
public:
	int32_t m_nBlockedTeamNumber; // 0x74c	
	
	// Datamap fields:
	// void InputBlockNav; // 0x0
	// void InputUnblockNav; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CRagdollMagnet : public CPointEntity
{
public:
	bool m_bDisabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	float m_radius; // 0x4bc	
	float m_force; // 0x4c0	
	Vector m_axis; // 0x4c4	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc48
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_hActiveProjectile"
class CAbility_Synth_PlasmaFlux : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x8]; // 0xab0
public:
	bool m_bTeleported; // 0xab8	
private:
	[[maybe_unused]] uint8_t __pad0ab9[0x7]; // 0xab9
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecUniqueHitList; // 0xac0	
	Vector m_vLastValidTeleportPosition; // 0xad8	
	GameTime_t m_flProjectileLaunchTime; // 0xae4	
	GameTime_t m_flProjectileExpireTime; // 0xae8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	CHandle< CBaseEntity > m_hActiveProjectile; // 0xaec	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_ShivWeapon_VData : public CCitadel_Ability_PrimaryWeaponVData
{
public:
	// MPropertyStartGroup "+Gun Properties"
	float m_flPushForce; // 0x1538	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x310
// Has VTable
class CCitadel_Modifier_Nano_PredatoryStatue : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x34]; // 0xc8
public:
	GameTime_t m_GameTimeEnabled; // 0xfc	
	GameTime_t m_LastCatInAreaTime; // 0x100	
	bool m_bIsAttacking; // 0x104	
private:
	[[maybe_unused]] uint8_t __pad0105[0x3]; // 0x105
public:
	int32_t m_iTargetID; // 0x108	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Guiding_ArrowVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_GlowEnemeyModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_DeathTax : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Low_Health_GlowVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GlowParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_ParriedStun : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x190
// Has VTable
class CCitadel_Modifier_HunterAuraTarget : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xa8]; // 0xc8
public:
	float m_flDebuffScale; // 0x170	
private:
	[[maybe_unused]] uint8_t __pad0174[0x4]; // 0x174
public:
	CModifierHandleTyped< CCitadelModifier > m_AuraModifierHandle; // 0x178	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_CQC_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_ArmorUpgrade_SlowImmunityVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ImmunityModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_Discord_Friendly : public CCitadelModifier
{
public:
	float m_flHealPerSecond; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierObscuredVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	float m_flHideDuration; // 0x5f8	
	float m_flRevealDuration; // 0x5fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15b8
// Has VTable
class CNPC_CarpetBombDrone : public CAI_CitadelNPC
{
public:
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_CARPET_BOMBER(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_CarpetBombDrone")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_CARPET_BOMBER_FLY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_CarpetBombDrone")->GetStaticFields()[1]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5bd0
// Has VTable
// 
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
// MNetworkVarNames "int32 m_eLootType"
// MNetworkVarNames "int32 m_nCurrencyValue"
// MNetworkVarNames "string_t m_iszModelName"
// MNetworkVarNames "float m_flModelScale"
// MNetworkVarNames "EHANDLE m_hTargetPlayer"
// MNetworkVarNames "float m_flFallRate"
class CCitadelItemPickup : public CCitadelAnimatingModelEntity
{
private:
	[[maybe_unused]] uint8_t __pad0ad8[0x8]; // 0xad8
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0xae0	
	// MNetworkEnable
	int32_t m_eLootType; // 0xaf8	
	// MNetworkEnable
	int32_t m_nCurrencyValue; // 0xafc	
	// MNetworkEnable
	CUtlSymbolLarge m_iszModelName; // 0xb00	
	// MNetworkEnable
	float m_flModelScale; // 0xb08	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTargetPlayer; // 0xb0c	
	// MNetworkEnable
	float m_flFallRate; // 0xb10	
private:
	[[maybe_unused]] uint8_t __pad0b14[0xc]; // 0xb14
public:
	Vector m_vHomePosition; // 0xb20	
	Vector m_vDropPosition; // 0xb2c	
	
	// Datamap fields:
	// bool m_bRequireGroundForPickup; // 0xb18
	// bool from_crate; // 0x7fffffff
	// int32_t m_eObjectivePosition; // 0xb14
	// int32_t m_nKillingTeamNumber; // 0xb1c
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x648
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_HeldItemPickupAuraVData : public CCitadelModifierAuraVData
{
public:
	CSubclassName< 4 > m_strFilterAbilityName; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_ArmorUpgrade_DamageRecycler : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7a0
// Has VTable
// 
// MNetworkVarNames "string_t m_EffectName"
class CFuncElectrifiedVolume : public CFuncBrush
{
public:
	// MNetworkEnable
	CUtlSymbolLarge m_EffectName; // 0x768	
	CUtlSymbolLarge m_EffectInterpenetrateName; // 0x770	
	CUtlSymbolLarge m_EffectZapName; // 0x778	
	CUtlSymbolLarge m_iszEffectSource; // 0x780	
	
	// Datamap fields:
	// void InputDisable; // 0x0
	// void InputEnable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e8
// Has VTable
class CPointProximitySensor : public CPointEntity
{
public:
	bool m_bDisabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	CHandle< CBaseEntity > m_hTargetEntity; // 0x4bc	
	CEntityOutputTemplate< float32 > m_Distance; // 0x4c0	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void InputToggle; // 0x0
	// CUtlSymbolLarge InputSetTargetEntity; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTargetdummy2VData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x2a8
// Has VTable
class CCitadel_Modifier_Wrecker_Ultimate : public CCitadelModifier
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecGrabbed; // 0xc8	
	ParticleIndex_t m_nFXIndex; // 0xe0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BulletArmorShredder_ProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_DebuffModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Obscured : public CCitadelModifier
{
public:
	float m_flStartObscuredAmount; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
class CFilterClass : public CBaseFilter
{
public:
	CUtlSymbolLarge m_iFilterClass; // 0x510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe8
// Has VTable
class CCitadel_Modifier_ItemPickupAura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x190
// Has VTable
class CCitadel_Modifier_Thumper_PullAOE : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_Item_Camouflage : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1550
// Has VTable
// 
// MGetKV3ClassDefaults
class CNPC_TrooperBossVData : public CAI_NPC_TrooperVData
{
public:
	bool m_bMitigateDamageFromPlayers; // 0x14e0	
	bool m_bBarracksGuardian; // 0x14e1	
private:
	[[maybe_unused]] uint8_t __pad14e2[0x2]; // 0x14e2
public:
	float m_flPlayerAutoAttackRange; // 0x14e4	
	float m_flMinMeleeAttackTime; // 0x14e8	
private:
	[[maybe_unused]] uint8_t __pad14ec[0x4]; // 0x14ec
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BackdoorProtectionModifier; // 0x14f0	
	CEmbeddedSubclass< CCitadelModifier > m_BackdoorBulletResistModifier; // 0x1500	
	CEmbeddedSubclass< CCitadelModifier > m_ObjectiveRegen; // 0x1510	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sAngryStart; // 0x1520	
	CSoundEventName m_sAngryLoop; // 0x1530	
	CSoundEventName m_sAngryStop; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTokamakRadianceVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_RadianceModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifier_CatTargetVData : public CCitadelModifierVData
{
public:
	float m_flBaseCatScale; // 0x5f8	
	float m_flMinPitch; // 0x5fc	
	float m_flMaxPitch; // 0x600	
private:
	[[maybe_unused]] uint8_t __pad0604[0x4]; // 0x604
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CatPuffParticle; // 0x608	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CatGlowParticle; // 0x6e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strTurnIntoCatSound; // 0x7c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbd8
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_hActiveProjectile"
class CCitadel_Ability_Perched_Predator : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x120]; // 0xab0
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	CHandle< CBaseEntity > m_hActiveProjectile; // 0xbd0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7a0
// Has VTable
// 
// MNetworkExcludeByName "m_hModel"
// MNetworkVarNames "ice_path_shard_model_desc_t m_ShardDesc"
// MNetworkVarNames "QAngle m_qForward"
// MNetworkVarNames "GameTime_t m_flStartTime"
// MNetworkVarNames "GameTime_t m_flEndTime"
class CCitadel_Ice_Path_Shard_Physics : public CBaseModelEntity
{
public:
	// MNetworkEnable
	// -> m_nModelID - 0x750
	// -> m_vecPanelSize - 0x754
	// -> m_vecPanelVertices - 0x760
	// -> m_flThickness - 0x778
	// -> m_SurfacePropStringToken - 0x77c
	ice_path_shard_model_desc_t m_ShardDesc; // 0x748	
	// MNetworkEnable
	QAngle m_qForward; // 0x780	
	// MNetworkEnable
	// MNetworkChangeCallback "OnStartTimeChanged"
	GameTime_t m_flStartTime; // 0x78c	
	// MNetworkEnable
	// MNetworkChangeCallback "OnEndTimeChanged"
	GameTime_t m_flEndTime; // 0x790	
	bool m_bIsBase; // 0x794	
private:
	[[maybe_unused]] uint8_t __pad0795[0x3]; // 0x795
public:
	CHandle< CTriggerIcePathVolume > m_hTrooperTrigger; // 0x798	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Root : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc0
// Has VTable
// Is Abstract
class CMultiplayRules : public CGameRules
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
class CFilterLOS : public CBaseFilter
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "float32 m_duration"
// MNetworkVarNames "float32 m_timestamp"
// MNetworkVarNames "float32 m_timescale"
class EngineCountdownTimer
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	float m_duration; // 0x8	
	// MNetworkEnable
	float m_timestamp; // 0xc	
	// MNetworkEnable
	float m_timescale; // 0x10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x948
// Has VTable
class CTriggerMidBossShield : public CTriggerNeutralShield
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x130
// Has VTable
class CCitadel_Modifier_Bull_Heal_Aura : public CCitadelModifierAura_Cone
{
public:
	QAngle m_playerAngles; // 0xe8	
	ParticleIndex_t m_ConeParticle; // 0xf4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x930
// Has VTable
class CPhysBox : public CBreakable
{
public:
	int32_t m_damageType; // 0x820	
	float m_massScale; // 0x824	
	int32_t m_damageToEnableMotion; // 0x828	
	float m_flForceToEnableMotion; // 0x82c	
	QAngle m_angPreferredCarryAngles; // 0x830	
	bool m_bNotSolidToWorld; // 0x83c	
	bool m_bEnableUseOutput; // 0x83d	
private:
	[[maybe_unused]] uint8_t __pad083e[0x2]; // 0x83e
public:
	int32_t m_iExploitableByPlayer; // 0x840	
	float m_flTouchOutputPerEntityDelay; // 0x844	
	CEntityIOOutput m_OnDamaged; // 0x848	
	CEntityIOOutput m_OnAwakened; // 0x870	
	CEntityIOOutput m_OnMotionEnabled; // 0x898	
	CEntityIOOutput m_OnPlayerUse; // 0x8c0	
	CEntityIOOutput m_OnStartTouch; // 0x8e8	
	CHandle< CBasePlayerPawn > m_hCarryingPlayer; // 0x910	
	
	// Datamap fields:
	// void InputWake; // 0x0
	// void InputSleep; // 0x0
	// void InputEnableMotion; // 0x0
	// void InputDisableMotion; // 0x0
	// void InputForceDrop; // 0x0
	// void InputDisableFloating; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_Slork_Scald : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb60
// Has VTable
class CCitadel_Ability_WreckerScrapBlast : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_BlastParticle; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x10
// Has Trivial Destructor
struct CCitadel_Modifier_PsychicDagger_MakeDaggers__Dagger_t
{
public:
	int32_t m_nDaggerNum; // 0x0	
	CHandle< CBaseEntity > m_Target; // 0x4	
	ParticleIndex_t m_Dagger; // 0x8	
	ParticleIndex_t m_TargetPreview; // 0xc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1658
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityMeleeParryVData : public CitadelAbilityVData
{
public:
	float m_flWhiffDuration; // 0x14e8	
	float m_flMovementRestrictionTime; // 0x14ec	
	float m_flActiveTime; // 0x14f0	
	float m_flParryEndVisualTime; // 0x14f4	
	float m_flSuccessActiveTime; // 0x14f8	
	float m_flBossVictimNoMeleeTime; // 0x14fc	
	float m_flBossVictimCalmTime; // 0x1500	
private:
	[[maybe_unused]] uint8_t __pad1504[0x4]; // 0x1504
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SuccessfulParryParticle; // 0x1508	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strSuccessfulParrySound; // 0x15e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ParryActiveModifier; // 0x15f8	
	CEmbeddedSubclass< CCitadelModifier > m_ParryVictimModifier; // 0x1608	
	CEmbeddedSubclass< CCitadelModifier > m_ParryCooldownModifier; // 0x1618	
	CEmbeddedSubclass< CCitadelModifier > m_ParryEndVisualModifier; // 0x1628	
	CEmbeddedSubclass< CCitadelModifier > m_ParryBossVictimNoMeleeModifier; // 0x1638	
	CEmbeddedSubclass< CCitadelModifier > m_ParryBossVictimCalmModifier; // 0x1648	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x768
// Has VTable
class CCitadelSpawnBlocker : public CFuncBrush
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x558
// Has VTable
class CTimerEntity : public CLogicalEntity
{
public:
	CEntityIOOutput m_OnTimer; // 0x4b8	
	CEntityIOOutput m_OnTimerHigh; // 0x4e0	
	CEntityIOOutput m_OnTimerLow; // 0x508	
	int32_t m_iDisabled; // 0x530	
	float m_flInitialDelay; // 0x534	
	float m_flRefireTime; // 0x538	
	bool m_bUpDownState; // 0x53c	
private:
	[[maybe_unused]] uint8_t __pad053d[0x3]; // 0x53d
public:
	int32_t m_iUseRandomTime; // 0x540	
	bool m_bPauseAfterFiring; // 0x544	
private:
	[[maybe_unused]] uint8_t __pad0545[0x3]; // 0x545
public:
	float m_flLowerRandomBound; // 0x548	
	float m_flUpperRandomBound; // 0x54c	
	float m_flRemainingTime; // 0x550	
	bool m_bPaused; // 0x554	
	
	// Datamap fields:
	// float InputRefireTime; // 0x0
	// void InputFireTimer; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void InputToggle; // 0x0
	// float InputAddToTimer; // 0x0
	// void InputResetTimer; // 0x0
	// float InputSubtractFromTimer; // 0x0
	// void InputPauseTimer; // 0x0
	// void InputUnpauseTimer; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd08
// Has VTable
// 
// MNetworkVarNames "bool m_bShadowFormCast"
// MNetworkVarNames "Vector m_vecCastStartPos"
// MNetworkVarNames "Vector m_vecDashStartPos"
// MNetworkVarNames "QAngle m_angDashStartAng"
// MNetworkVarNames "GameTime_t m_flDashStartTime"
// MNetworkVarNames "GameTime_t m_flEndAttackTime"
// MNetworkVarNames "GameTime_t m_flGrappleStartTime"
// MNetworkVarNames "GameTime_t m_flGrappleArriveTime"
// MNetworkVarNames "EHANDLE m_hTarget"
// MNetworkVarNames "GameTime_t m_flGrappleShotAttackTime"
// MNetworkVarNames "Vector m_rgTargetPos"
// MNetworkVarNames "GameTime_t m_rgTargetPosTime"
class CCitadel_Ability_FlyingStrike : public CCitadelBaseYamatoAbility
{
public:
	int32_t m_iTargetPosIndex; // 0xab8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bShadowFormCast; // 0xabc	
private:
	[[maybe_unused]] uint8_t __pad0abd[0x3]; // 0xabd
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vecCastStartPos; // 0xac0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vecDashStartPos; // 0xacc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	QAngle m_angDashStartAng; // 0xad8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flDashStartTime; // 0xae4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flEndAttackTime; // 0xae8	
	// MNetworkEnable
	GameTime_t m_flGrappleStartTime; // 0xaec	
	// MNetworkEnable
	GameTime_t m_flGrappleArriveTime; // 0xaf0	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTarget; // 0xaf4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flGrappleShotAttackTime; // 0xaf8	
	float m_flVelSpring; // 0xafc	
	int32_t m_nTicksNotMoving; // 0xb00	
	Vector m_vecPrevPos; // 0xb04	
	CHandle< CBaseEntity > m_hAttackTarget; // 0xb10	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	// MNetworkEncoder "coord"
	Vector m_rgTargetPos[20]; // 0xb14	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_rgTargetPosTime[20]; // 0xc04	
private:
	[[maybe_unused]] uint8_t __pad0c54[0xac]; // 0xc54
public:
	ParticleIndex_t m_nGrappleTravelEffect; // 0xd00	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_ShivDash : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x38]; // 0xc8
public:
	bool m_bUseTrail; // 0x100	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TargetPracticeSelfVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strWeaponShootSound; // 0x6d8	
	CSoundEventName m_strBulletWhizSound; // 0x6e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Cadence_SleepAOEVData : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AuraParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x710
// Has VTable
// 
// MNetworkVarNames "CEnvWindShared m_EnvWindShared"
class CEnvWind : public CBaseEntity
{
public:
	// MNetworkEnable
	CEnvWindShared m_EnvWindShared; // 0x4b8	
	
	// Datamap fields:
	// int16_t m_EnvWindShared.m_iMinWind; // 0x4c8
	// int16_t m_EnvWindShared.m_iMaxWind; // 0x4ca
	// int32_t m_EnvWindShared.m_windRadius; // 0x4cc
	// int16_t m_EnvWindShared.m_iMinGust; // 0x4d0
	// int16_t m_EnvWindShared.m_iMaxGust; // 0x4d2
	// float m_EnvWindShared.m_flMinGustDelay; // 0x4d4
	// float m_EnvWindShared.m_flMaxGustDelay; // 0x4d8
	// int16_t m_EnvWindShared.m_iGustDirChange; // 0x4e0
	// float m_EnvWindShared.m_flGustDuration; // 0x4dc
	// int32_t m_EnvWindShared.m_iWindDir; // 0x4f4
	// float m_EnvWindShared.m_flWindSpeed; // 0x4f8
	// void CEnvWindWindThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_Slork_Raging_Current : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xa8]; // 0xc8
public:
	bool m_bUnitTarget; // 0x170	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Cadence_Crescendo_InAOE : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Astro_ShotgunBuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Bull_Heal_TargetVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DrainParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x618
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_NapalmProjectileVData : public CCitadel_Modifier_Intrinsic_BaseVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x5f8	
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_WeaponUpgrade_WeaponEaterVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_WeaponEaterTracker; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x228
// Has VTable
class CCitadel_Modifier_ChainLightningEffect : public CCitadelModifier
{
public:
	int32_t m_nChainCount; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00cc[0x4]; // 0xcc
public:
	CUtlVector< CHandle< CBaseEntity > > m_hHitEntities; // 0xd0	
	CUtlVector< CHandle< CBaseEntity > > m_hUnhitEnts; // 0xe8	
	Vector m_vLastSource; // 0x100	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1630
// Has VTable
// 
// MGetKV3ClassDefaults
class CItemAOERootVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AOEParticle; // 0x1530	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strRootTargetSound; // 0x1610	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TetherModifier; // 0x1620	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1650
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_Disarm_VData : public CCitadel_Item_TrackingProjectileApplyModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x1630	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x1640	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1638
// Has VTable
class CNPC_SuperTrooper : public CNPC_Trooper
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x198
// Has VTable
class CModifier_Mirage_SunfireCataclysm_Vacuum : public CCitadelModifier
{
public:
	Vector m_vStart; // 0xc8	
	Vector m_vDest; // 0xd4	
	Vector m_vCenter; // 0xe0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Rutger_CheatDeath_Activated_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ActivatedParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbb0
// Has VTable
class CCitadel_Ability_ShivDagger : public CCitadelBaseShivAbility
{
public:
	bool m_bIsInRicochet; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8a8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ReturnFireVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AttackerHitFx; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SpiritReflectTracerReplacement; // 0x7b8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strAttackerHitSound; // 0x898	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x228
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "float m_flValues"
// MNetworkVarNames "int m_nValueCounts"
// MNetworkVarNames "int m_nBucketCount"
// MNetworkVarNames "float m_flInterval"
// MNetworkVarNames "float m_flFinalValue"
// MNetworkVarNames "TimelineCompression_t m_nCompressionType"
// MNetworkVarNames "bool m_bStopped"
class CTimeline : public IntervalTimer
{
public:
	// MNetworkEnable
	float m_flValues[64]; // 0x10	
	// MNetworkEnable
	int32_t m_nValueCounts[64]; // 0x110	
	// MNetworkEnable
	int32_t m_nBucketCount; // 0x210	
	// MNetworkEnable
	float m_flInterval; // 0x214	
	// MNetworkEnable
	float m_flFinalValue; // 0x218	
	// MNetworkEnable
	TimelineCompression_t m_nCompressionType; // 0x21c	
	// MNetworkEnable
	bool m_bStopped; // 0x220	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x998
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BubbleVData : public CCitadel_Modifier_SilencedVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x898	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_ExplodeSound; // 0x978	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x988	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x330
// Has VTable
// 
// MGetKV3ClassDefaults
class CNPC_FieldSentryVData : public CNPC_SimpleAnimatingAIVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaserSightParticle; // 0x108	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_KillExplosionParticle; // 0x1e8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DeployProgressModifier; // 0x2c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sSpawnSound; // 0x2d8	
	CSoundEventName m_sKillExplosionSound; // 0x2e8	
	CSoundEventName m_sTargetAcquiredLocalSound; // 0x2f8	
	CSoundEventName m_sTargetAcquiredSound; // 0x308	
	// MPropertyStartGroup "Stats"
	float m_flIdleTurnSpeed; // 0x318	
	float m_flIdleTurnAngles; // 0x31c	
	float m_flTrooperTakeDamageMult; // 0x320	
	float m_flNeutralTakeDamageMulti; // 0x324	
	float m_flNotifyEventTime; // 0x328	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CHandleDummy : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x558
// Has VTable
class CRagdollConstraint : public CPhysConstraint
{
public:
	float m_xmin; // 0x530	
	float m_xmax; // 0x534	
	float m_ymin; // 0x538	
	float m_ymax; // 0x53c	
	float m_zmin; // 0x540	
	float m_zmax; // 0x544	
	float m_xfriction; // 0x548	
	float m_yfriction; // 0x54c	
	float m_zfriction; // 0x550	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierTenguLightningCrashFlyVDATA : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplodeSound; // 0x6d8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BulletShieldModifier; // 0x6e8	
	CEmbeddedSubclass< CCitadelModifier > m_TechShieldModifier; // 0x6f8	
	CEmbeddedSubclass< CCitadelModifier > m_RegenerationModifier; // 0x708	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_HookSelf : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_VoidSphereVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_BubbleModifier; // 0x14e8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strCastEffect; // 0x14f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strAllyPositionPreview; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x190
// Has VTable
class CCitadel_Modifier_ExplosiveShots : public CCitadelModifier
{
public:
	CUtlVector< CCitadel_Modifier_ExplosiveShots::BulletEntityPair_t > m_vecHitEnts; // 0xc8	
	bool m_bExplosionCanHitMultipleTimes; // 0xe0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_Upgrade_AerialAssault : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x930
// Has VTable
// 
// MNetworkVarNames "Vector m_vLaunchTarget"
// MNetworkVarNames "float m_flLaunchSpeed"
class CCitadelCatapultTrigger : public CBaseTrigger
{
public:
	// MNetworkEnable
	Vector m_vLaunchTarget; // 0x918	
	// MNetworkEnable
	float m_flLaunchSpeed; // 0x924	
	CUtlSymbolLarge m_nameTarget; // 0x928	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
class CNodeEnt_InfoHint : public CNodeEnt
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x508
// Has VTable
class CPhysExplosion : public CPointEntity
{
public:
	bool m_bExplodeOnSpawn; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	float m_flMagnitude; // 0x4bc	
	float m_flDamage; // 0x4c0	
	float m_radius; // 0x4c4	
	CUtlSymbolLarge m_targetEntityName; // 0x4c8	
	float m_flInnerRadius; // 0x4d0	
	float m_flPushScale; // 0x4d4	
	bool m_bConvertToDebrisWhenPossible; // 0x4d8	
private:
	[[maybe_unused]] uint8_t __pad04d9[0x7]; // 0x4d9
public:
	CEntityIOOutput m_OnPushedPlayer; // 0x4e0	
	
	// Datamap fields:
	// void InputExplode; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e0
// Has VTable
class CPointPush : public CPointEntity
{
public:
	bool m_bEnabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	float m_flMagnitude; // 0x4bc	
	float m_flRadius; // 0x4c0	
	float m_flInnerRadius; // 0x4c4	
	float m_flConeOfInfluence; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04cc[0x4]; // 0x4cc
public:
	CUtlSymbolLarge m_iszFilterName; // 0x4d0	
	CHandle< CBaseFilter > m_hFilter; // 0x4d8	
	
	// Datamap fields:
	// void CPointPushPushThink; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e8
// Has VTable
class CCredits : public CPointEntity
{
public:
	CEntityIOOutput m_OnCreditsDone; // 0x4b8	
	bool m_bRolledOutroCredits; // 0x4e0	
private:
	[[maybe_unused]] uint8_t __pad04e1[0x3]; // 0x4e1
public:
	float m_flLogoLength; // 0x4e4	
	
	// Datamap fields:
	// void InputRollCredits; // 0x0
	// void InputRollOutroCredits; // 0x0
	// void InputShowLogo; // 0x0
	// float InputSetLogoLength; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Synth_Affliction_Debuff_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EffectParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Synth_PlasmaFlux_WeaponDamage : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Cadence_SilenceContraptionsVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x208
// Has VTable
class CCitadel_Modifier_TangoTether_Tether : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x138]; // 0xc8
public:
	float m_fHealingSoundBuildup; // 0x200	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_MeleeCharge : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Fervor_Bonuses_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BonusesParticle; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ActivateBonusesSound; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SilencerProcActiveVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x628	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SilencerActiveParticle; // 0x708	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SilenceActiveModifier; // 0x7e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa8
// Has VTable
// 
// MNetworkVarNames "CHandle< CBasePlayerWeapon > m_hMyWeapons"
// MNetworkVarNames "CHandle< CBasePlayerWeapon> m_hActiveWeapon"
// MNetworkVarNames "CHandle< CBasePlayerWeapon> m_hLastWeapon"
// MNetworkVarNames "uint16 m_iAmmo"
class CPlayer_WeaponServices : public CPlayerPawnComponent
{
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< CHandle< CBasePlayerWeapon > > m_hMyWeapons; // 0x40	
	// MNetworkEnable
	CHandle< CBasePlayerWeapon > m_hActiveWeapon; // 0x58	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	CHandle< CBasePlayerWeapon > m_hLastWeapon; // 0x5c	
	// MNetworkEnable
	uint16_t m_iAmmo[32]; // 0x60	
	bool m_bPreventWeaponPickup; // 0xa0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18
// Has Trivial Destructor
struct CAttributeManager__cached_attribute_float_t
{
public:
	float flIn; // 0x0	
	CUtlSymbolLarge iAttribHook; // 0x8	
	float flOut; // 0x10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x250
// Has VTable
class CCitadel_Modifier_Bolo : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xc0]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierDustStormAuraApplyVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_BulletFlurryWindup : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xaf0
// Has VTable
// 
// MNetworkVarNames "float m_flUpFactor"
// MNetworkVarNames "float m_flBounceVelocity"
class CCitadel_Bounce_Pad : public CCitadelAnimatingModelEntity
{
public:
	CHandle< CCitadelBaseAbility > m_hAbility; // 0xad8	
	// MNetworkEnable
	float m_flUpFactor; // 0xadc	
	// MNetworkEnable
	float m_flBounceVelocity; // 0xae0	
	float m_flBarrelBounceVelocity; // 0xae4	
	float m_flBarrelUpFactor; // 0xae8	
	bool m_bSpeedOnLand; // 0xaec	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_TargetPracticeDebuff : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x18]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x220
// Has VTable
class CCitadel_Modifier_Chrono_PulseGrenade_PulseArea : public CCitadelModifier
{
public:
	int32_t m_iPulseCount; // 0xc8	
	ParticleIndex_t m_hPreviewRingParticle; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Wraith_ProjectMind_Shield : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_FlameDashBurn : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1500
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_ZipLineBoost_VData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ZipboostModifier; // 0x14e8	
	// MPropertyGroupName "Gameplay"
	float m_flTimeToActivate; // 0x14f8	
	float m_flTimeForHint; // 0x14fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcc0
// Has VTable
// 
// MNetworkVarNames "bool m_bPreparing"
// MNetworkVarNames "bool m_bTackling"
// MNetworkVarNames "GameTime_t m_flTackleStartTime"
// MNetworkVarNames "float m_flTackleDuration"
// MNetworkVarNames "Vector m_vecTackleDir"
class CCitadel_Ability_SuperNeutralCharge : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x1c0]; // 0xab0
public:
	// MNetworkEnable
	bool m_bPreparing; // 0xc70	
	// MNetworkEnable
	bool m_bTackling; // 0xc71	
private:
	[[maybe_unused]] uint8_t __pad0c72[0x2]; // 0xc72
public:
	// MNetworkEnable
	GameTime_t m_flTackleStartTime; // 0xc74	
	// MNetworkEnable
	float m_flTackleDuration; // 0xc78	
	// MNetworkEnable
	Vector m_vecTackleDir; // 0xc7c	
	Vector m_vecLastPosition; // 0xc88	
	int32_t m_nStuckFramesCount; // 0xc94	
	CUtlVector< CEntityIndex > m_vecHitEnemies; // 0xc98	
	GameTime_t m_flPrepareStartTime; // 0xcb0	
	ParticleIndex_t m_nDistancePreview; // 0xcb4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x38
// Has VTable
// 
// MNetworkVarNames "CEntityIndex m_nEntIndex"
// MNetworkVarNames "int8 m_nTeam"
// MNetworkVarNames "uint16 m_nPositionXY"
class STrooperFOWEntity
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x30]; // 0x0
public:
	// MNetworkEnable
	CEntityIndex m_nEntIndex; // 0x30	
	// MNetworkEnable
	int8_t m_nTeam; // 0x34	
private:
	[[maybe_unused]] uint8_t __pad0035[0x1]; // 0x35
public:
	// MNetworkEnable
	// MNetworkPriority "32"
	// MNetworkChangeCallback "OnFieldXYChanged"
	uint16_t m_nPositionXY; // 0x36	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
class CConditionalCollidable : public CBaseModelEntity
{
public:
	// Datamap fields:
	// CUtlSymbolLarge interactAs; // 0x7fffffff
	// CUtlSymbolLarge interactWith; // 0x7fffffff
	// CUtlSymbolLarge interactExclude; // 0x7fffffff
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe8
// Has VTable
class CCitadel_Modifier_HeldItemPickupAura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x978
// Has VTable
class CTriggerImpact : public CTriggerMultiple
{
public:
	float m_flMagnitude; // 0x940	
	float m_flNoise; // 0x944	
	float m_flViewkick; // 0x948	
private:
	[[maybe_unused]] uint8_t __pad094c[0x4]; // 0x94c
public:
	CEntityOutputTemplate< Vector > m_pOutputForce; // 0x950	
	
	// Datamap fields:
	// void InputImpact; // 0x0
	// float InputSetMagnitude; // 0x0
	// void CTriggerImpactDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad8
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flEndTime"
class CCitadel_Item_Bubble : public CCitadel_Item
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flEndTime; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x790
// Has VTable
// 
// MNetworkIncludeByName "m_clrRender"
// MNetworkVarNames "Vector m_vDirection"
// MNetworkVarNames "Color m_clrOverlay"
// MNetworkVarNames "string_t m_iszEffectName"
// MNetworkVarNames "string_t m_iszSSEffectName"
// MNetworkVarNames "bool m_bOn"
// MNetworkVarNames "bool m_bmaxColor"
// MNetworkVarNames "float32 m_flSize"
// MNetworkVarNames "float32 m_flRotation"
// MNetworkVarNames "float32 m_flHazeScale"
// MNetworkVarNames "float32 m_flAlphaHaze"
// MNetworkVarNames "float32 m_flAlphaHdr"
// MNetworkVarNames "float32 m_flAlphaScale"
// MNetworkVarNames "float32 m_flHDRColorScale"
// MNetworkVarNames "float32 m_flFarZScale"
class CSun : public CBaseModelEntity
{
public:
	// MNetworkEnable
	Vector m_vDirection; // 0x748	
	// MNetworkEnable
	Color m_clrOverlay; // 0x754	
	// MNetworkEnable
	CUtlSymbolLarge m_iszEffectName; // 0x758	
	// MNetworkEnable
	CUtlSymbolLarge m_iszSSEffectName; // 0x760	
	// MNetworkEnable
	bool m_bOn; // 0x768	
	// MNetworkEnable
	bool m_bmaxColor; // 0x769	
private:
	[[maybe_unused]] uint8_t __pad076a[0x2]; // 0x76a
public:
	// MNetworkEnable
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "100.000000"
	float m_flSize; // 0x76c	
	// MNetworkEnable
	// MNetworkMinValue "-360.000000"
	// MNetworkMaxValue "360.000000"
	float m_flRotation; // 0x770	
	// MNetworkEnable
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "100.000000"
	float m_flHazeScale; // 0x774	
	// MNetworkEnable
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "2.000000"
	float m_flAlphaHaze; // 0x778	
	// MNetworkEnable
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "2.000000"
	float m_flAlphaHdr; // 0x77c	
	// MNetworkEnable
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "2.000000"
	float m_flAlphaScale; // 0x780	
	// MNetworkEnable
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "100.000000"
	float m_flHDRColorScale; // 0x784	
	// MNetworkEnable
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "1.000000"
	float m_flFarZScale; // 0x788	
	
	// Datamap fields:
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// Color InputSetColor; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbc0
// Has VTable
// 
// MNetworkVarNames "bool m_bHoldingBall"
class CCitadel_Ability_WreckingBall : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x8]; // 0xab0
public:
	ParticleIndex_t m_nBallParticle; // 0xab8	
	ParticleIndex_t m_nCastCompleteParticle; // 0xabc	
	CUtlVector< CHandle< CBaseEntity > > m_vecTargetsHit; // 0xac0	
private:
	[[maybe_unused]] uint8_t __pad0ad8[0xe0]; // 0xad8
public:
	// MNetworkEnable
	bool m_bHoldingBall; // 0xbb8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb60
// Has VTable
// Is Abstract
class CCitadel_Ability_PrimaryWeapon_BeamWeapon : public CCitadel_Ability_PrimaryWeapon
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ArcaneEaterProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_StealWatcherModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_SuperNeutralChargePrepare : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x818
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Galvanic_Storm_VData : public CCitadel_Modifier_ChainLightningVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TechShieldModifier; // 0x808	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x948
// Has VTable
class CTriggerDetectBulletFire : public CBaseTrigger
{
public:
	bool m_bPlayerFireOnly; // 0x918	
private:
	[[maybe_unused]] uint8_t __pad0919[0x7]; // 0x919
public:
	CEntityIOOutput m_OnDetectedBulletFire; // 0x920	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
class CWorld : public CBaseModelEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d8
// Has VTable
// 
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
// MNetworkVarNames "EMiniMapMarkerType_t m_eType"
class CMiniMapMarker : public CPointEntity
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0x4b8	
	// MNetworkEnable
	EMiniMapMarkerType_t m_eType; // 0x4d0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x800
// Has VTable
class CProjectile_Rutger_Rocket : public CCitadelProjectile
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x920
// Has VTable
class CTriggerRemoveModifier : public CBaseTrigger
{
public:
	CUtlSymbolLarge m_strModifier; // 0x918	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierTangoTetherTargetVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GrappleRopeParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_CatBullet : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x870
// Has VTable
// 
// MNetworkIncludeByName "m_fFlags"
// MNetworkIncludeByName "m_vecVelocity"
// MNetworkOverride "m_fFlags CBaseEntity"
class CFuncMoveLinear : public CBaseToggle
{
public:
	MoveLinearAuthoredPos_t m_authoredPosition; // 0x7c8	
	QAngle m_angMoveEntitySpace; // 0x7cc	
	Vector m_vecMoveDirParentSpace; // 0x7d8	
private:
	[[maybe_unused]] uint8_t __pad07e4[0x4]; // 0x7e4
public:
	CUtlSymbolLarge m_soundStart; // 0x7e8	
	CUtlSymbolLarge m_soundStop; // 0x7f0	
	CUtlSymbolLarge m_currentSound; // 0x7f8	
	float m_flBlockDamage; // 0x800	
	float m_flStartPosition; // 0x804	
private:
	[[maybe_unused]] uint8_t __pad0808[0x8]; // 0x808
public:
	CEntityIOOutput m_OnFullyOpen; // 0x810	
	CEntityIOOutput m_OnFullyClosed; // 0x838	
	bool m_bCreateMovableNavMesh; // 0x860	
	bool m_bCreateNavObstacle; // 0x861	
	
	// Datamap fields:
	// float m_flMoveDistance; // 0x74c
	// bool movewithoutpushingblockers; // 0x7fffffff
	// void CFuncMoveLinearNavObstacleThink; // 0x0
	// void CFuncMoveLinearNavMovableThink; // 0x0
	// void InputOpen; // 0x0
	// void InputClose; // 0x0
	// float InputSetPosition; // 0x0
	// float InputSetSpeed; // 0x0
	// CUtlSymbolLarge InputTeleportToTarget; // 0x0
	// float InputResetPosition; // 0x0
	// float InputSetMoveDistanceFromStart; // 0x0
	// float InputSetMoveDistanceFromEnd; // 0x0
	// void CFuncMoveLinearStopMoveSound; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Tokamak_AllySmokeAOE_VData : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AuraParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_Item_ActiveReload : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e0
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierTier3BossInvulnVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShieldParticle; // 0x5f8	
	float m_flShieldRadius; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x828
// Has VTable
class CCitadelTrackedProjectile : public CCitadelProjectile
{
public:
	GameTime_t m_flTrackingStartTime; // 0x800	
	float m_flTrackingDampingCoefficient; // 0x804	
	float m_flTrackingSpeed; // 0x808	
	float m_flTrackingDuration; // 0x80c	
	GameTime_t m_flTrackingWindowStart; // 0x810	
	GameTime_t m_flTrackingWindowEnd; // 0x814	
	float m_flTrackingStopDuration; // 0x818	
	Vector m_vLastValidPosition; // 0x81c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x24
// Has Trivial Constructor
// Has Trivial Destructor
struct LastIncomingHit_t
{
public:
	Vector vecDir; // 0x0	
	Vector vecBoneLocalPos; // 0xc	
	int32_t nHitboxBoneIndex; // 0x18	
	float flHitStrength; // 0x1c	
	int32_t nDamageType; // 0x20	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5a0
// Has VTable
class CCitadelZiplinePath : public CPathParticleRope
{
public:
	int32_t m_iLaneNumber; // 0x598	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
// 
// MNetworkVarNames "float m_flVisibilityStrength"
// MNetworkVarNames "float m_flFogDistanceMultiplier"
// MNetworkVarNames "float m_flFogMaxDensityMultiplier"
// MNetworkVarNames "float m_flFadeTime"
// MNetworkVarNames "bool m_bStartDisabled"
// MNetworkVarNames "bool m_bIsEnabled"
class CPlayerVisibility : public CBaseEntity
{
public:
	// MNetworkEnable
	// MNetworkChangeCallback "PlayerVisibilityStateChanged"
	float m_flVisibilityStrength; // 0x4b8	
	// MNetworkEnable
	// MNetworkChangeCallback "PlayerVisibilityStateChanged"
	float m_flFogDistanceMultiplier; // 0x4bc	
	// MNetworkEnable
	// MNetworkChangeCallback "PlayerVisibilityStateChanged"
	float m_flFogMaxDensityMultiplier; // 0x4c0	
	// MNetworkEnable
	// MNetworkChangeCallback "PlayerVisibilityStateChanged"
	float m_flFadeTime; // 0x4c4	
	// MNetworkEnable
	bool m_bStartDisabled; // 0x4c8	
	// MNetworkEnable
	bool m_bIsEnabled; // 0x4c9	
	
	// Datamap fields:
	// bool InputEnable; // 0x0
	// bool InputDisable; // 0x0
	// float InputSetPlayerVisibilityStrength; // 0x0
	// float InputSetPlayerFogDistanceMultiplier; // 0x0
	// float InputSetPlayerFogMaxDensityMultiplier; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CModifier_Mirage_Tornado_EnemyInAir : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd18
// Has VTable
class CAbility_Rutger_RocketLauncher : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_ChargedTacklePrepare : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_QuickSilverBuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RapidFireParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CScaleFunctionAbilityPropertyBase : public CScaleFunctionBase
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x88
// Has VTable
// 
// MNetworkVarNames "CHandle< CBaseEntity> m_hOverrideObserverTarget"
// MNetworkVarNames "ObserverMode_t m_iOverrideObserverMode"
// MNetworkVarNames "int32 m_iSecondsAfterDeathToAllowObserving"
// MNetworkVarNames "QAngle m_angTargetCamera"
// MNetworkVarNames "Vector m_vTargetCameraPos"
class CCitadelPlayer_ObserverServices : public CPlayer_ObserverServices
{
public:
	int32_t m_nLastObservedTeam; // 0x50	
	int32_t m_nCurrentObservedTeam; // 0x54	
	CHandle< CBaseEntity > m_hLastObserverTarget; // 0x58	
	CHandle< CBaseEntity > m_hPreviousTeamTarget; // 0x5c	
	// MNetworkEnable
	// MNetworkChangeCallback "LocalPlayerExclusive"
	CHandle< CBaseEntity > m_hOverrideObserverTarget; // 0x60	
	// MNetworkEnable
	// MNetworkChangeCallback "LocalPlayerExclusive"
	ObserverMode_t m_iOverrideObserverMode; // 0x64	
	// MNetworkEnable
	int32_t m_iSecondsAfterDeathToAllowObserving; // 0x68	
	// MNetworkEnable
	// MNetworkEncoder "qangle"
	// MNetworkUserGroup "LocalPlayerExclusive"
	// MNetworkBitCount "11"
	// MNetworkPriority "32"
	QAngle m_angTargetCamera; // 0x6c	
	// MNetworkEnable
	// MNetworkEncoder "coord"
	// MNetworkUserGroup "LocalPlayerExclusive"
	// MNetworkPriority "32"
	Vector m_vTargetCameraPos; // 0x78	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
class CNodeEnt_InfoNodeAirHint : public CNodeEnt
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x928
// Has VTable
class CTriggerTeleport : public CBaseTrigger
{
public:
	CUtlSymbolLarge m_iLandmark; // 0x918	
	bool m_bUseLandmarkAngles; // 0x920	
	bool m_bMirrorPlayer; // 0x921	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Cadence_AnthemBuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x308
// Has VTable
class CCitadel_Modifier_StormCloud : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x8]; // 0xc8
public:
	float m_flDamageInterval; // 0xd0	
	bool m_bGrowing; // 0xd4	
private:
	[[maybe_unused]] uint8_t __pad00d5[0x3]; // 0xd5
public:
	GameTime_t m_flLastDamageWaveTime; // 0xd8	
	int32_t m_nNumPlayersKilled; // 0xdc	
	GameTime_t m_flNextRandomLightningStrike; // 0xe0	
	GameTime_t m_flStartTime; // 0xe4	
	float m_flRadiusIncrementPerSecond; // 0xe8	
	Vector m_vCastPosition; // 0xec	
	bool m_bFiredEndingSoonSound; // 0xf8	
private:
	[[maybe_unused]] uint8_t __pad00f9[0x3]; // 0xf9
public:
	int32_t m_nLastTickForLightningCenterCalc; // 0xfc	
	Vector m_vecLightningCenter; // 0x100	
	SatVolumeIndex_t m_nSatVolumeIndex; // 0x10c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_LightningBallVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZapParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetScreenParticleEffect; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1b0
// Has VTable
class CCitadel_Modifier_Afterburn_DOT : public CCitadel_Modifier_Burning
{
public:
	bool m_bCheckForExplosion; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00c9[0x3]; // 0xc9
public:
	GameTime_t m_flLastBurnTime; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_IncendiaryProjectile : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_DisarmProc : public CCitadel_Modifier_Disarmed
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1860
// Has VTable
// 
// MNetworkVarNames "CCitadelPlayerClipComponent::Storage_t m_CCitadelPlayerClipComponent"
// MNetworkVarNames "GameTime_t m_flFadeOutStart"
// MNetworkVarNames "GameTime_t m_flFadeOutEnd"
class CNPC_TrooperBoss : public CNPC_Trooper
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelPlayerClipComponent"
	// MNetworkAlias "CCitadelPlayerClipComponent"
	// MNetworkTypeAlias "CCitadelPlayerClipComponent"
	CCitadelPlayerClipComponent m_CCitadelPlayerClipComponent; // 0x1638	
private:
	[[maybe_unused]] uint8_t __pad1658[0x8]; // 0x1658
public:
	LaneSide_t m_LaneSide; // 0x1660	
private:
	[[maybe_unused]] uint8_t __pad1661[0x1e7]; // 0x1661
public:
	CUtlSymbolLarge m_backdoorProtectionTrigger; // 0x1848	
private:
	[[maybe_unused]] uint8_t __pad1850[0x4]; // 0x1850
public:
	// MNetworkEnable
	GameTime_t m_flFadeOutStart; // 0x1854	
	// MNetworkEnable
	GameTime_t m_flFadeOutEnd; // 0x1858	
	
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_TROOPERBOSS_RANGE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperBoss")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERBOSS_RETURN_TO_SPAWN(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperBoss")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERBOSS_SHIELD_STANCE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperBoss")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERBOSS_COMBAT_STANCE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperBoss")->GetStaticFields()[3]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERBOSS_CHARGE_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperBoss")->GetStaticFields()[4]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPERBOSS_RAISE_SHIELD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperBoss")->GetStaticFields()[5]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPERBOSS_LOWER_SHIELD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperBoss")->GetStaticFields()[6]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPERBOSS_SHIELD_ACTIVE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperBoss")->GetStaticFields()[7]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPERBOSS_ENEMY_IN_CHARGE_RANGE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperBoss")->GetStaticFields()[8]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPERBOSS_ENEMY_OUT_OF_CHARGE_RANGE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperBoss")->GetStaticFields()[9]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x570
// Has VTable
// 
// MNetworkIncludeByName "m_iTeamNum"
// MNetworkVarNames "CHandle< CBasePlayerController > m_aPlayerControllers"
// MNetworkVarNames "CHandle< CBasePlayerPawn > m_aPlayers"
// MNetworkVarNames "int32 m_iScore"
// MNetworkVarNames "char m_szTeamname"
class CTeam : public CBaseEntity
{
public:
	// MNetworkEnable
	// MNetworkAlias "m_aPlayers"
	CNetworkUtlVectorBase< CHandle< CBasePlayerController > > m_aPlayerControllers; // 0x4b8	
	// MNetworkEnable
	// MNetworkAlias "m_aPawns"
	CNetworkUtlVectorBase< CHandle< CBasePlayerPawn > > m_aPlayers; // 0x4d0	
	// MNetworkEnable
	int32_t m_iScore; // 0x4e8	
	// MNetworkEnable
	char m_szTeamname[129]; // 0x4ec	
};

// Registered binary: server.dll (project 'server')
// Alignment: 16
// Size: 0x860
// Has VTable
class CFuncMover : public CBaseModelEntity
{
public:
	CUtlSymbolLarge m_iszPathName; // 0x748	
	CHandle< CPathMover > m_hPathMover; // 0x750	
private:
	[[maybe_unused]] uint8_t __pad0754[0x4]; // 0x754
public:
	CUtlSymbolLarge m_iszPathNodeStart; // 0x758	
	CFuncMover::Move_t m_eMoveType; // 0x760	
	bool m_bIsReversing; // 0x764	
private:
	[[maybe_unused]] uint8_t __pad0765[0x3]; // 0x765
public:
	Vector m_vTarget; // 0x768	
	float m_flStartSpeed; // 0x774	
	float m_flPathLocation; // 0x778	
	float m_flT; // 0x77c	
	int32_t m_nCurrentNodeIndex; // 0x780	
	int32_t m_nPreviousNodeIndex; // 0x784	
	bool m_bFixedOrientation; // 0x788	
	bool m_bFixedPitch; // 0x789	
	SolidType_t m_eSolidType; // 0x78a	
	bool m_bIsMoving; // 0x78b	
	float m_flTimeToReachMaxSpeed; // 0x78c	
	float m_flDistanceToReachMaxSpeed; // 0x790	
	float m_flTimeToReachZeroSpeed; // 0x794	
	float m_flDistanceToReachZeroSpeed; // 0x798	
	GameTime_t m_flTimeMovementStart; // 0x79c	
	GameTime_t m_flTimeMovementStop; // 0x7a0	
	CHandle< CMoverPathNode > m_hStopAtNode; // 0x7a4	
	float m_flPathLocationToBeginStop; // 0x7a8	
	bool m_bMatchPathNodeUp; // 0x7ac	
	bool m_bMatchPathNodeOrientation; // 0x7ad	
	bool m_bFacePlayer; // 0x7ae	
private:
	[[maybe_unused]] uint8_t __pad07af[0x1]; // 0x7af
public:
	GameTime_t m_flTimeStartRoll; // 0x7b0	
	GameTime_t m_flTimeStartMatchNodeOrientation; // 0x7b4	
	Vector m_vOriginalUp; // 0x7b8	
private:
	[[maybe_unused]] uint8_t __pad07c4[0xc]; // 0x7c4
public:
	Quaternion m_qOriginalOrientation; // 0x7d0	
	float m_flTimeToRollToNewUp; // 0x7e0	
	float m_flTimeToMatchNodeOrientation; // 0x7e4	
	float m_flDurationMatchNodeOrientationRan; // 0x7e8	
private:
	[[maybe_unused]] uint8_t __pad07ec[0x4]; // 0x7ec
public:
	CUtlSymbolLarge m_iszStartForwardSound; // 0x7f0	
	CUtlSymbolLarge m_iszLoopForwardSound; // 0x7f8	
	CUtlSymbolLarge m_iszStopForwardSound; // 0x800	
	CUtlSymbolLarge m_iszStartReverseSound; // 0x808	
	CUtlSymbolLarge m_iszLoopReverseSound; // 0x810	
	CUtlSymbolLarge m_iszStopReverseSound; // 0x818	
	CUtlSymbolLarge m_iszArriveAtDestinationSound; // 0x820	
private:
	[[maybe_unused]] uint8_t __pad0828[0x8]; // 0x828
public:
	CEntityIOOutput m_OnMovementEnd; // 0x830	
	bool m_bStartAtEnd; // 0x858	
	
	// Datamap fields:
	// void InputStartForward; // 0x0
	// void InputStartReverse; // 0x0
	// void InputStop; // 0x0
	// void InputToggle; // 0x0
	// CUtlSymbolLarge InputTeleportToPathNode; // 0x0
	// CUtlSymbolLarge InputMoveToPathNode; // 0x0
	// CUtlSymbolLarge InputTransitionToPathNode; // 0x0
	// float InputSetSpeed; // 0x0
	// float InputSetSpeedImmediate; // 0x0
	// float InputSetTimeToReachMaxSpeed; // 0x0
	// float InputSetTimeToRollToNewUp; // 0x0
	// void CFuncMoverMove; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb78
// Has VTable
class CCitadel_Ability_Thumper_2 : public CCitadelBaseAbility
{
public:
	Vector m_vStompPos; // 0xab0	
	Vector m_vStompDir; // 0xabc	
	int32_t m_nStomps; // 0xac8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_GangActivity_AbilitySwap : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_UltCombo_Self : public CCitadelModifier
{
public:
	QAngle m_angles; // 0xc8	
	CHandle< CBaseEntity > m_hTarget; // 0xd4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_PoisonBullet_PoisonBuildup : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Upgrade_ArcaneMedallion_VData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_TriggeredModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc78
// Has VTable
// 
// MNetworkVarNames "float m_flDashAngle"
// MNetworkVarNames "int m_nLastGroundDashTick"
// MNetworkVarNames "GameTime_t m_flGroundDashCastTime"
// MNetworkVarNames "CCitadelAutoScaledTime m_flGroundDashEndTime"
// MNetworkVarNames "GameTime_t m_flAirDashCastTime"
// MNetworkVarNames "GameTime_t m_flAirDashDragStartTime"
// MNetworkVarNames "int8 m_nConsecutiveAirDashes"
// MNetworkVarNames "int8 m_nConsecutiveDownDashes"
// MNetworkVarNames "bool m_bDownAirDash"
class CCitadel_Ability_Dash : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	float m_flDashAngle; // 0xab0	
	GameTime_t m_GroundDashExecuteTime; // 0xab4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	int32_t m_nLastGroundDashTick; // 0xab8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flGroundDashCastTime; // 0xabc	
	bool m_bTagCanActivateGroundDash; // 0xac0	
private:
	[[maybe_unused]] uint8_t __pad0ac1[0x7]; // 0xac1
public:
	// MNetworkEnable
	CCitadelAutoScaledTime m_flGroundDashEndTime; // 0xac8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flAirDashCastTime; // 0xae0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flAirDashDragStartTime; // 0xae4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	int8_t m_nConsecutiveAirDashes; // 0xae8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	int8_t m_nConsecutiveDownDashes; // 0xae9	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bDownAirDash; // 0xaea	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_Tech_Shield : public CCitadel_Modifier_Bullet_Shield
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x12f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CNPC_Boss_Tier2VData : public CAI_CitadelNPCVData
{
public:
	float m_flPlayerInitialSightRange; // 0xe18	
private:
	[[maybe_unused]] uint8_t __pad0e1c[0x4]; // 0xe1c
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_strWIPModelName; // 0xe20	
	// MPropertyStartGroup "Weak Points"
	CUtlVector< WeakPointParams_t > m_vecWeakPoints; // 0xf00	
	// MPropertyStartGroup "Electric Beam (Laser)"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamChargingEffect; // 0xf18	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamPreviewEffect; // 0xff8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamActiveEffect; // 0x10d8	
	// MPropertyStartGroup "Stomp"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StompImpactEffect; // 0x11b8	
	float m_flTossSpeed; // 0x1298	
	float m_flStompDamage; // 0x129c	
	float m_flStompTossUpMagnitude; // 0x12a0	
	float m_flStunDuration; // 0x12a4	
	float m_flStompImpactRadius; // 0x12a8	
	float m_flStompImpactHeight; // 0x12ac	
	float m_flSweepRadius; // 0x12b0	
	float m_flSweepSpeed; // 0x12b4	
	float m_flSweepZScale; // 0x12b8	
	float m_flSweepMaxAngle; // 0x12bc	
	float m_flSweepMaxRange; // 0x12c0	
	float m_flSweepAdjustSpeed; // 0x12c4	
	// MPropertyStartGroup "Gun"
	float m_flBurstDuration; // 0x12c8	
	float m_flBurstCooldown; // 0x12cc	
	// MPropertyStartGroup "Modifiers"
	// MPropertyDescription "Backdoor Protection Modifier"
	CEmbeddedSubclass< CCitadelModifier > m_BackdoorProtectionModifier; // 0x12d0	
	CEmbeddedSubclass< CCitadelModifier > m_InvulModifier; // 0x12e0	
	float m_flInvulModifierRange; // 0x12f0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
// 
// MNetworkVarNames "QAngle m_vecPunchAngle"
// MNetworkVarNames "QAngle m_vecPunchAngleVel"
// MNetworkVarNames "GameTick_t m_nPunchAngleJoltTick"
// MNetworkVarNames "fogplayerparams_t m_PlayerFog"
// MNetworkVarNames "CHandle< CColorCorrection> m_hColorCorrectionCtrl"
// MNetworkVarNames "CHandle< CBaseEntity> m_hViewEntity"
// MNetworkVarNames "CHandle< CTonemapController2> m_hTonemapController"
// MNetworkVarNames "audioparams_t m_audio"
// MNetworkVarNames "CHandle<CPostProcessingVolume> m_PostProcessingVolumes"
class CPlayer_CameraServices : public CPlayerPawnComponent
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	// MNetworkPriority "32"
	// MNetworkEncoder "qangle_precise"
	QAngle m_vecPunchAngle; // 0x40	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	// MNetworkEncoder "qangle_precise"
	QAngle m_vecPunchAngleVel; // 0x4c	
	// MNetworkEnable
	// MNetworkChangeCallback "OnPunchJoltChanged"
	GameTick_t m_nPunchAngleJoltTick; // 0x58	
private:
	[[maybe_unused]] uint8_t __pad005c[0x4]; // 0x5c
public:
	// MNetworkEnable
	fogplayerparams_t m_PlayerFog; // 0x60	
	// MNetworkEnable
	CHandle< CColorCorrection > m_hColorCorrectionCtrl; // 0xa0	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hViewEntity; // 0xa4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerAndObserversExclusive"
	CHandle< CTonemapController2 > m_hTonemapController; // 0xa8	
private:
	[[maybe_unused]] uint8_t __pad00ac[0x4]; // 0xac
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerAndObserversExclusive"
	// -> localSound[8] - 0xb8
	// -> soundscapeIndex - 0x118
	// -> localBits - 0x11c
	// -> soundscapeEntityListIndex - 0x120
	// -> soundEventHash - 0x124
	audioparams_t m_audio; // 0xb0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerAndObserversExclusive"
	CNetworkUtlVectorBase< CHandle< CPostProcessingVolume > > m_PostProcessingVolumes; // 0x128	
	float m_flOldPlayerZ; // 0x140	
	float m_flOldPlayerViewOffsetZ; // 0x144	
private:
	[[maybe_unused]] uint8_t __pad0148[0x18]; // 0x148
public:
	CUtlVector< CHandle< CEnvSoundscapeTriggerable > > m_hTriggerSoundscapeList; // 0x160	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb58
// Has VTable
class CCitadel_Item_BaseProjectileAOEModifier : public CCitadel_Item
{
public:
	CitadelAbilityProjectileCreateInfo_t m_projInfo; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x920
// Has VTable
class CTriggerCallback : public CBaseTrigger
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x758
// Has VTable
class CBubbling : public CBaseModelEntity
{
public:
	int32_t m_density; // 0x748	
	int32_t m_frequency; // 0x74c	
	int32_t m_state; // 0x750	
	
	// Datamap fields:
	// float m_flSpeed; // 0x324
	// void CBubblingFizzThink; // 0x0
	// void InputActivate; // 0x0
	// void InputDeactivate; // 0x0
	// void InputToggle; // 0x0
	// int32_t InputSetCurrent; // 0x0
	// int32_t InputSetDensity; // 0x0
	// int32_t InputSetFrequency; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbf0
// Has VTable
class CCitadel_Ability_HealingSlash : public CCitadelBaseYamatoAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_DebugIsVisibleToEnemyTeam : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa78
// Has VTable
class CCitadel_PointTalker_Base : public CBaseCombatCharacter
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcb0
// Has VTable
class CPhysicsPropOverride : public CPhysicsProp
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb10
// Has VTable
class CCitadel_Item_DivinersKevlar : public CCitadel_Item
{
public:
	bool m_bExecuted; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d8
// Has VTable
class CAI_ChangeHintGroup : public CBaseEntity
{
public:
	int32_t m_iSearchType; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	CUtlSymbolLarge m_strSearchName; // 0x4c0	
	CUtlSymbolLarge m_strNewHintGroup; // 0x4c8	
	float m_flRadius; // 0x4d0	
	
	// Datamap fields:
	// void InputActivate; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e0
// Has VTable
class CInfoTrooperNeutralSpawn : public CServerOnlyPointEntity
{
public:
	int32_t m_iCoverGroupID; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	CUtlSymbolLarge m_iszSquadName; // 0x4c0	
private:
	[[maybe_unused]] uint8_t __pad04c8[0xc]; // 0x4c8
public:
	ENeutralTrooperType m_eTrooperType; // 0x4d4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CModifier_Synth_Pulse_Escape : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16a8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Rutger_RocketLauncher_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShootParticle; // 0x15c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x250
// Has VTable
class CCitadel_Modifier_Radiance : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xc0]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_TeleportToGangster : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb60
// Has VTable
class CCitadel_Ability_ShivWeapon : public CCitadel_Ability_PrimaryWeapon
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_PsychicDaggerVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_MakeDaggersModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierPowerJumpVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FloatParticle; // 0x5f8	
	// MPropertyStartGroup "Gameplay"
	float m_flAirDrag; // 0x6d8	
	float m_flVerticalCameraOffset; // 0x6dc	
	float m_flVerticalCameraOffsetLerpTime; // 0x6e0	
	float m_flVerticalCameraOffsetBias; // 0x6e4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd50
// Has VTable
// 
// MNetworkVarNames "QAngle m_anglesCharging"
// MNetworkVarNames "GameTime_t m_flChargeStartTime"
// MNetworkVarNames "GameTime_t m_flFastChargeEndTime"
class CCitadel_Ability_Bull_Charge : public CCitadelBaseAbility
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecHitEntities; // 0xab0	
	bool m_bGainedWeaponPowerBuff; // 0xac8	
private:
	[[maybe_unused]] uint8_t __pad0ac9[0x26f]; // 0xac9
public:
	// MNetworkEnable
	QAngle m_anglesCharging; // 0xd38	
	// MNetworkEnable
	// MNetworkChangeCallback "OnChargingStateChanged"
	GameTime_t m_flChargeStartTime; // 0xd44	
	// MNetworkEnable
	GameTime_t m_flFastChargeEndTime; // 0xd48	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb60
// Has VTable
class CCitadel_Ability_PrimaryWeapon_Empty : public CCitadel_Ability_PrimaryWeapon
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1818
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilitySlideVData : public CitadelAbilityVData
{
public:
	// MPropertyDescription "The minimum angle we consider to be a slope.  Less than this we will consider flat ground."
	float m_flMinAngleToConsiderASlope; // 0x14e8	
	// MPropertyDescription "The maximum speed we will apply acceleration up to when sliding on the steepest slope."
	float m_flSlideMaxSlopeMaxAccSpeed; // 0x14ec	
	// MPropertyDescription "The maximum speed we will apply acceleration up to when sliding on the shallowest slope."
	float m_flSlideMinSlopeMaxAccSpeed; // 0x14f0	
	// MPropertyDescription "When checking for a drop-slide, how long ago can the activate button have been pressed."
	float m_flButtonPressWindow; // 0x14f4	
	// MPropertyDescription "When fast you can turn while sliding."
	float m_flTurnSpeed; // 0x14f8	
	// MPropertyDescription "Amount of acceleration to apply on the shallowest slope"
	float m_flSlideMinSlopeAcceleration; // 0x14fc	
	// MPropertyDescription "Amount of acceleration to apply on the steepest slope"
	float m_flSlideMaxSlopeAcceleration; // 0x1500	
	// MPropertyDescription "When pressing forward, how far to the side you need to look to start turning in that direction."
	float m_flTurnMinAngDiff; // 0x1504	
	// MPropertyDescription "When pressing forward, how far to the side you need to look to apply maximum turning."
	float m_flTurnMaxAngDiff; // 0x1508	
	// MPropertyDescription "For how long after landing and starting a slide on flat ground we apply 'Flat Ground Friction Grace' before applying 'Flat Ground Friction'"
	float m_flLandedFlatGroundFrictionGraceTime; // 0x150c	
	// MPropertyDescription "For how long after starting to slide on flat ground we apply 'Flat Ground Friction Grace' before applying 'Flat Ground Friction'"
	float m_flFlatGroundFrictionGraceTime; // 0x1510	
	// MPropertyDescription "The friction the player uses while sliding on flat ground."
	float m_flFrictionFlatGroundGrace; // 0x1514	
	// MPropertyDescription "The friction the player uses while sliding on flat ground."
	float m_flFrictionFlatGround; // 0x1518	
	// MPropertyDescription "The friction the player uses while sliding on our minimum slope."
	float m_flFrictionMinSlope; // 0x151c	
	// MPropertyDescription "The friction the player uses while sliding on our maximum slope."
	float m_flFrictionMaxSlope; // 0x1520	
	// MPropertyDescription "How much friction to apply when trying to slide up our minimum slope."
	float m_flFrictionUphillMinSlope; // 0x1524	
	// MPropertyDescription "How much friction to apply when trying to slide up our maximum slope."
	float m_flFrictionUphillMaxSlope; // 0x1528	
	// MPropertyDescription "When applying the landing speed boost, bias the scale based on slope by this much."
	float m_flLandingSlopeScaleBias; // 0x152c	
	// MPropertyDescription "Minimum speed to trigger a boost when landing and trying to slide."
	float m_flBoostMinTriggerSpeed; // 0x1530	
	// MPropertyDescription "Maximum speed used to determine speed boost when landing and trying to slide."
	float m_flBoostMaxTriggerSpeed; // 0x1534	
	// MPropertyDescription "Minimum speed boost to apply when landing and initiating a slide."
	float m_flBoostMinSpeed; // 0x1538	
	// MPropertyDescription "Maximumm speed boost to apply when landing and initiating a slide."
	float m_flBoostMaxSpeed; // 0x153c	
	// MPropertyDescription "How fast you have to be moving on flat ground to be able to initiate a slide."
	float m_flMinActivationSpeed; // 0x1540	
	// MPropertyDescription "If your slide speed falls below this on flat ground, you will stop sliding."
	float m_flMinSustainSpeed; // 0x1544	
	// MPropertyDescription "The amount of speed boost to apply when running forward and initiating a slide."
	float m_flSprintBoostSpeed; // 0x1548	
	// MPropertyDescription "The time after dashing to start a slide to get the full speed dash slide"
	float m_flDashSlideStartTime; // 0x154c	
	// MPropertyDescription "The speed to start a slide out of a dash."
	float m_flDashSlideSpeed; // 0x1550	
	// MPropertyDescription "The speed to start a slide out of a dash if the timing was incorrect."
	float m_flDashSlideFailSpeed; // 0x1554	
	// MPropertyDescription "Sound for succesfully executing a dash-slide"
	CSoundEventName m_strDashSlideActivate; // 0x1558	
	// MPropertyDescription "How long to apply 'Dash Boost Friction' after starting a slide out of a dash."
	float m_flDashSlideFrictionTime; // 0x1568	
	// MPropertyDescription "The friction to apply after starting a slide out of a dash."
	float m_flDashSlideFriction; // 0x156c	
	// MPropertyDescription "How fast you have to be moving while dashing to initiate a slide.  Mainly to prevent slowed-dash flowing into a weirdly fast slides."
	float m_flDashMinActivationSpeed; // 0x1570	
	// MPropertyDescription "The shallowest slope degree to start applying downhill acceleration."
	float m_flAccMinSlopeDeg; // 0x1574	
	// MPropertyDescription "The angle we consider the most extreme slope for applying downhill acceleration."
	float m_flAccMaxSlopeDeg; // 0x1578	
	// MPropertyDescription "How much of the downhill acceleration to apply at the minimum angle."
	float m_flAccMinSlopeScale; // 0x157c	
	// MPropertyDescription "When sliding, how far forward to look when determining our averaged current slope"
	float m_flSlideProbeForwardOffset; // 0x1580	
	// MPropertyDescription "When running on flat ground and trying to initiate a slide, how far forward to look for a slope that will let's us trigger a slide early."
	float m_flSlideActivationProbeForwardOffset; // 0x1584	
	// MPropertyDescription "Maximum distance between probe samples"
	float m_flMaxDistanceBetweenProbeSamples; // 0x1588	
	// MPropertyDescription "If activating via the lookahead probe's normal, use that normal for this long after activating to help us get over that slope."
	float m_flInitialSlideUseForwardProbeTime; // 0x158c	
	// MPropertyDescription "When trying to determine what slope we're currently only, sample this far around the player"
	float m_flCurrentSlopeSampleDistance; // 0x1590	
	// MPropertyDescription "Ignore slopes whose angle different from our velocity is this many std deviations out when sampling for current slope"
	float m_flSampleVelDiffStdDevScaleCutoff; // 0x1594	
	// MPropertyDescription "If facing further than this angle away from the direction of the slope, dont initiate a slide on it."
	float m_flSlopeFacingAngleToActivate; // 0x1598	
	// MPropertyDescription "Maximum air-drag to apply when jumping out of a slide."
	float m_flAirDragAfterJump; // 0x159c	
	// MPropertyDescription "How long to apply air-drag after jumping out of a slide."
	float m_flAirDragAfterJumpTime; // 0x15a0	
	// MPropertyDescription "Air-drag applied when jumping out of a slide linearly ramps from 100% to 0% from 0' to this angle."
	float m_flAirDragMaxAngle; // 0x15a4	
	// MPropertyDescription "How long you have to be walking around, not sliding until we clear the air-drag flag on jumps."
	float m_flAirDragResetTime; // 0x15a8	
	// MPropertyDescription "How long after you stop sliding do we consider it to still be a slide-jump."
	float m_flLateSlideJumpWindow; // 0x15ac	
	// MPropertyDescription "Speed remap to slide effect intensity"
	CRemapFloat m_SlideEffectRemap; // 0x15b0	
	// MPropertyDescription "The curve defining the getup anim's speed penalty duration(x) and severity(y)."
	CPiecewiseCurve m_GetupSpeedCurve; // 0x15c0	
	// MPropertyDescription "How long after you stop sliding do we consider it to still be a slide-jump."
	float m_flGetupBusyDuration; // 0x1600	
private:
	[[maybe_unused]] uint8_t __pad1604[0x4]; // 0x1604
public:
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceStartSliding; // 0x1608	
	CitadelCameraOperationsSequence_t m_cameraSequenceEndSliding; // 0x1688	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SlideParticle; // 0x1708	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strStartSound; // 0x17e8	
	CSoundEventName m_strLoopingSound; // 0x17f8	
	CSoundEventName m_strStopSound; // 0x1808	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1860
// Has VTable
class CNPC_TrooperBarrackBoss : public CNPC_TrooperBoss
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
// 
// MNetworkVarNames "bool m_bEnabled"
// MNetworkVarNames "float32 m_MaxWeight"
// MNetworkVarNames "float32 m_FadeDuration"
// MNetworkVarNames "float32 m_Weight"
// MNetworkVarNames "char m_lookupFilename"
class CColorCorrectionVolume : public CBaseTrigger
{
public:
	// MNetworkEnable
	bool m_bEnabled; // 0x918	
private:
	[[maybe_unused]] uint8_t __pad0919[0x3]; // 0x919
public:
	// MNetworkEnable
	float m_MaxWeight; // 0x91c	
	// MNetworkEnable
	float m_FadeDuration; // 0x920	
	bool m_bStartDisabled; // 0x924	
private:
	[[maybe_unused]] uint8_t __pad0925[0x3]; // 0x925
public:
	// MNetworkEnable
	float m_Weight; // 0x928	
	// MNetworkEnable
	char m_lookupFilename[512]; // 0x92c	
	float m_LastEnterWeight; // 0xb2c	
	GameTime_t m_LastEnterTime; // 0xb30	
	float m_LastExitWeight; // 0xb34	
	GameTime_t m_LastExitTime; // 0xb38	
	
	// Datamap fields:
	// void CColorCorrectionVolumeThinkFunc; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x530
// Has VTable
class CFilterEnemy : public CBaseFilter
{
public:
	CUtlSymbolLarge m_iszEnemyName; // 0x510	
	float m_flRadius; // 0x518	
	float m_flOuterRadius; // 0x51c	
	int32_t m_nMaxSquadmatesPerEnemy; // 0x520	
private:
	[[maybe_unused]] uint8_t __pad0524[0x4]; // 0x524
public:
	CUtlSymbolLarge m_iszPlayerName; // 0x528	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Targetdummy_4 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd48
// Has VTable
// 
// MNetworkVarNames "QAngle m_angFlyingAngles"
// MNetworkVarNames "GameTime_t m_flFlyingStartTime"
// MNetworkVarNames "GameTime_t m_flFlyingEndTime"
// MNetworkVarNames "float m_flDiveStart"
// MNetworkVarNames "float m_flFlyingSpeed"
// MNetworkVarNames "bool m_bFlying"
// MNetworkVarNames "bool m_bDiving"
class CCitadel_Ability_Tengu_LightningCrash : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	QAngle m_angFlyingAngles; // 0xab0	
private:
	[[maybe_unused]] uint8_t __pad0abc[0x270]; // 0xabc
public:
	// MNetworkEnable
	GameTime_t m_flFlyingStartTime; // 0xd2c	
	// MNetworkEnable
	GameTime_t m_flFlyingEndTime; // 0xd30	
	// MNetworkEnable
	float m_flDiveStart; // 0xd34	
	// MNetworkEnable
	float m_flFlyingSpeed; // 0xd38	
	// MNetworkEnable
	bool m_bFlying; // 0xd3c	
	// MNetworkEnable
	bool m_bDiving; // 0xd3d	
private:
	[[maybe_unused]] uint8_t __pad0d3e[0x2]; // 0xd3e
public:
	ParticleIndex_t m_nTargetingParticleIndex; // 0xd40	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTargetPracticeVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TargetPracticeSelfModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_TargetPracticeEnemyModifier; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Afterburn : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_MetalSkin : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc00
// Has VTable
class CCitadel_Ability_TrooperBossGrenade : public CCitadel_Ability_TrooperGrenade
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a0
// Has VTable
class CCitadel_Modifier_AirLift_ExplodeAura : public CCitadelModifierAura
{
public:
	float m_flStartRadius; // 0xe8	
	float m_flEndRadius; // 0xec	
	float m_flSpreadDuration; // 0xf0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Killing_Blow_Glow : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_FissureWallVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FriendlyWallParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EnemyWallParticle; // 0x15c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_WallTravelSoundLoop; // 0x16a8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_WallModifier; // 0x16b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Upgrade_WeaponPowerForHealthVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_HollowPoint_ProcVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x5f8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ParticleModifier; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_DamageOnHitGround : public CCitadelModifier
{
public:
	float m_flDamage; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x38
// Has VTable
// 
// MNetworkVarNames "AbilityID_t m_SourceItemID"
// MNetworkVarNames "AbilityID_t m_TargetAbilityID"
struct ItemImbuementPair_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x30]; // 0x0
public:
	// MNetworkEnable
	CUtlStringToken m_SourceItemID; // 0x30	
	// MNetworkEnable
	CUtlStringToken m_TargetAbilityID; // 0x34	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e0
// Has VTable
// 
// MNetworkVarNames "bool m_bShieldActive"
// MNetworkVarNames "bool m_bPlayingIdle"
class CNPC_TrooperNeutral : public CAI_CitadelNPC
{
private:
	[[maybe_unused]] uint8_t __pad1578[0x63]; // 0x1578
public:
	// MNetworkEnable
	bool m_bShieldActive; // 0x15db	
	// MNetworkEnable
	bool m_bPlayingIdle; // 0x15dc	
	
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_MOVE_TO_COVER(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_SLEEP(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_RETURN_TO_SPAWN(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_SENTRY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[3]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_RELOAD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[4]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_RELOAD_AND_WAIT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[5]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_RANGE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[6]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_FURNITURE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[7]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_IDLE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[8]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_AOE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[9]->m_pInstance);};
	static ConditionId_t &Get_COND_SQUAD_SHOOT_SLOT_AVAILABLE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[10]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPERNEUTRAL_WATCHER_NEARBY(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[11]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPERNEUTRAL_NO_WATCHER(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[12]->m_pInstance);};
	static ConditionId_t &Get_COND_TROOPERNEUTRAL_CAN_AOE_ATTACK(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[13]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPERNEUTRAL_RANGE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[14]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPERNEUTRAL_PLAY_AOE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[15]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TROOPERNEUTRAL_PERFORM_AOE_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[16]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_TURN_INITIAL_FACING(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral")->GetStaticFields()[17]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb48
// Has VTable
class CCitadel_Upgrade_AmmoScavenger : public CCitadel_Item
{
public:
	CHandle< CBaseEntity > m_hLastOrbTarget; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x748
// Has VTable
class CShower : public CModelPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x508
// Has VTable
// 
// MNetworkVarNames "float m_flEndDistance"
// MNetworkVarNames "float m_flStartDistance"
// MNetworkVarNames "float m_flFogFalloffExponent"
// MNetworkVarNames "bool m_bHeightFogEnabled"
// MNetworkVarNames "float m_flFogHeightWidth"
// MNetworkVarNames "float m_flFogHeightEnd"
// MNetworkVarNames "float m_flFogHeightStart"
// MNetworkVarNames "float m_flFogHeightExponent"
// MNetworkVarNames "float m_flLODBias"
// MNetworkVarNames "bool m_bActive"
// MNetworkVarNames "bool m_bStartDisabled"
// MNetworkVarNames "float m_flFogMaxOpacity"
// MNetworkVarNames "int m_nCubemapSourceType"
// MNetworkVarNames "HMaterialStrong m_hSkyMaterial"
// MNetworkVarNames "string_t m_iszSkyEntity"
// MNetworkVarNames "HRenderTextureStrong m_hFogCubemapTexture"
// MNetworkVarNames "bool m_bHasHeightFogEnd"
class CEnvCubemapFog : public CBaseEntity
{
public:
	// MNetworkEnable
	float m_flEndDistance; // 0x4b8	
	// MNetworkEnable
	float m_flStartDistance; // 0x4bc	
	// MNetworkEnable
	float m_flFogFalloffExponent; // 0x4c0	
	// MNetworkEnable
	bool m_bHeightFogEnabled; // 0x4c4	
private:
	[[maybe_unused]] uint8_t __pad04c5[0x3]; // 0x4c5
public:
	// MNetworkEnable
	float m_flFogHeightWidth; // 0x4c8	
	// MNetworkEnable
	float m_flFogHeightEnd; // 0x4cc	
	// MNetworkEnable
	float m_flFogHeightStart; // 0x4d0	
	// MNetworkEnable
	float m_flFogHeightExponent; // 0x4d4	
	// MNetworkEnable
	float m_flLODBias; // 0x4d8	
	// MNetworkEnable
	bool m_bActive; // 0x4dc	
	// MNetworkEnable
	bool m_bStartDisabled; // 0x4dd	
private:
	[[maybe_unused]] uint8_t __pad04de[0x2]; // 0x4de
public:
	// MNetworkEnable
	float m_flFogMaxOpacity; // 0x4e0	
	// MNetworkEnable
	int32_t m_nCubemapSourceType; // 0x4e4	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_hSkyMaterial; // 0x4e8	
	// MNetworkEnable
	CUtlSymbolLarge m_iszSkyEntity; // 0x4f0	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hFogCubemapTexture; // 0x4f8	
	// MNetworkEnable
	bool m_bHasHeightFogEnd; // 0x500	
	bool m_bFirstTime; // 0x501	
	
	// Datamap fields:
	// bool InputEnable; // 0x0
	// bool InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTeleportToGangsterVData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbd0
// Has VTable
class CCitadel_Ability_MedicHeal : public CCitadelBaseAbilityServerOnly
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x208
// Has VTable
class CCitadel_Modifier_NapalmProjectile : public CCitadel_Modifier_Intrinsic_Base
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecHitEntities; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00e0[0x118]; // 0xe0
public:
	Vector m_vInitialCastPosition; // 0x1f8	
	float m_flProjectileSpeed; // 0x204	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x918
// Has VTable
// 
// MNetworkVarNames "CHandle< CBaseModelEntity> m_glowEntity"
// MNetworkVarNames "bool m_usable"
// MNetworkVarNames "string_t m_szDisplayText"
class CBaseButton : public CBaseToggle
{
public:
	QAngle m_angMoveEntitySpace; // 0x7c8	
	bool m_fStayPushed; // 0x7d4	
	bool m_fRotating; // 0x7d5	
private:
	[[maybe_unused]] uint8_t __pad07d6[0x2]; // 0x7d6
public:
	locksound_t m_ls; // 0x7d8	
	CUtlSymbolLarge m_sUseSound; // 0x7f8	
	CUtlSymbolLarge m_sLockedSound; // 0x800	
	CUtlSymbolLarge m_sUnlockedSound; // 0x808	
	CUtlSymbolLarge m_sOverrideAnticipationName; // 0x810	
	bool m_bLocked; // 0x818	
	bool m_bDisabled; // 0x819	
private:
	[[maybe_unused]] uint8_t __pad081a[0x2]; // 0x81a
public:
	GameTime_t m_flUseLockedTime; // 0x81c	
	bool m_bSolidBsp; // 0x820	
private:
	[[maybe_unused]] uint8_t __pad0821[0x7]; // 0x821
public:
	CEntityIOOutput m_OnDamaged; // 0x828	
	CEntityIOOutput m_OnPressed; // 0x850	
	CEntityIOOutput m_OnUseLocked; // 0x878	
	CEntityIOOutput m_OnIn; // 0x8a0	
	CEntityIOOutput m_OnOut; // 0x8c8	
	int32_t m_nState; // 0x8f0	
	CEntityHandle m_hConstraint; // 0x8f4	
	CEntityHandle m_hConstraintParent; // 0x8f8	
	bool m_bForceNpcExclude; // 0x8fc	
private:
	[[maybe_unused]] uint8_t __pad08fd[0x3]; // 0x8fd
public:
	CUtlSymbolLarge m_sGlowEntity; // 0x900	
	// MNetworkEnable
	CHandle< CBaseModelEntity > m_glowEntity; // 0x908	
	// MNetworkEnable
	bool m_usable; // 0x90c	
private:
	[[maybe_unused]] uint8_t __pad090d[0x3]; // 0x90d
public:
	// MNetworkEnable
	CUtlSymbolLarge m_szDisplayText; // 0x910	
	
	// Datamap fields:
	//  m_ls.sLockedSound; // 0x7e0
	//  m_ls.sUnlockedSound; // 0x7e8
	// void CBaseButtonButtonTouch; // 0x0
	// void CBaseButtonButtonSpark; // 0x0
	// void CBaseButtonTriggerAndWait; // 0x0
	// void CBaseButtonButtonReturn; // 0x0
	// void CBaseButtonButtonBackHome; // 0x0
	// void CBaseButtonButtonUse; // 0x0
	// void CBaseButtonActivateTouch; // 0x0
	// void InputLock; // 0x0
	// void InputUnlock; // 0x0
	// void InputPress; // 0x0
	// void InputPressIn; // 0x0
	// void InputPressOut; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// CUtlString displaytext; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7a0
// Has VTable
class CEnvExplosion : public CModelPointEntity
{
public:
	int32_t m_iMagnitude; // 0x748	
	float m_flPlayerDamage; // 0x74c	
	int32_t m_iRadiusOverride; // 0x750	
	float m_flInnerRadius; // 0x754	
	int32_t m_spriteScale; // 0x758	
	float m_flDamageForce; // 0x75c	
	CHandle< CBaseEntity > m_hInflictor; // 0x760	
	int32_t m_iCustomDamageType; // 0x764	
	bool m_bCreateDebris; // 0x768	
private:
	[[maybe_unused]] uint8_t __pad0769[0x7]; // 0x769
public:
	CUtlSymbolLarge m_iszExplosionType; // 0x770	
	CUtlSymbolLarge m_iszCustomEffectName; // 0x778	
	CUtlSymbolLarge m_iszCustomSoundName; // 0x780	
	Class_T m_iClassIgnore; // 0x788	
	Class_T m_iClassIgnore2; // 0x78c	
	CUtlSymbolLarge m_iszEntityIgnoreName; // 0x790	
	CHandle< CBaseEntity > m_hEntityIgnore; // 0x798	
	
	// Datamap fields:
	// uint32_t m_nExplosionType; // 0x76c
	// void CEnvExplosionSmoke; // 0x0
	// void InputExplode; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x588
// Has VTable
// 
// MNetworkVarNames "Vector m_vMins"
// MNetworkVarNames "Vector m_vMaxs"
class CSoundEventAABBEntity : public CSoundEventEntity
{
public:
	// MNetworkEnable
	Vector m_vMins; // 0x570	
	// MNetworkEnable
	Vector m_vMaxs; // 0x57c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_ArmorUpgrade_RegeneratingBulletShieldVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ActiveModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_QuickSilverVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x628	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ProcParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x208
// Has VTable
// 
// MGetKV3ClassDefaults
class CNPC_BaseDefenseSentryVData : public CNPC_SimpleAnimatingAIVData
{
public:
	CSubclassName< 4 > m_AbilityWeapon; // 0x108	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SentryExplosionParticle; // 0x118	
	// MPropertyStartGroup "Gameplay"
	float m_flTimeToStartScale; // 0x1f8	
	float m_flTimeToEndScale; // 0x1fc	
	float m_flMaxScale; // 0x200	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9d8
// Has VTable
// 
// MNetworkVarNames "bool m_bTestOcclusion"
class CTriggerLook : public CTriggerOnce
{
public:
	CHandle< CBaseEntity > m_hLookTarget; // 0x940	
	float m_flFieldOfView; // 0x944	
	float m_flLookTime; // 0x948	
	float m_flLookTimeTotal; // 0x94c	
	GameTime_t m_flLookTimeLast; // 0x950	
	float m_flTimeoutDuration; // 0x954	
	bool m_bTimeoutFired; // 0x958	
	bool m_bIsLooking; // 0x959	
	bool m_b2DFOV; // 0x95a	
	bool m_bUseVelocity; // 0x95b	
	// MNetworkEnable
	bool m_bTestOcclusion; // 0x95c	
private:
	[[maybe_unused]] uint8_t __pad095d[0x3]; // 0x95d
public:
	CEntityIOOutput m_OnTimeout; // 0x960	
	CEntityIOOutput m_OnStartLook; // 0x988	
	CEntityIOOutput m_OnEndLook; // 0x9b0	
	
	// Datamap fields:
	// void CTriggerLookTimeoutThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1570
// Has VTable
// 
// MGetKV3ClassDefaults
class CBaseDashCastAbilityVData : public CitadelAbilityVData
{
public:
	CSubclassName< 4 > m_AbilityToTrigger; // 0x14e8	
	// MPropertyDescription "How big of a trigger to use when tracing for targets"
	float m_flDashCastTriggerRadius; // 0x14f8	
	// MPropertyDescription "How fast the dash should go.  When using the curve, the dash will travel this speen when y=1"
	float m_flDashSpeed; // 0x14fc	
	// MPropertyDescription "When true, speed will be set to 0 when the dash cast ends"
	bool m_bSnapToZeroSpeedOnEnd; // 0x1500	
	// MPropertyDescription "When true, use the curve below to scale the speed of the dash across the distance."
	bool m_bUseCurveToDefineSpeed; // 0x1501	
private:
	[[maybe_unused]] uint8_t __pad1502[0x6]; // 0x1502
public:
	// MPropertySuppressExpr "m_bUseCurveToDefineSpeed == false"
	CPiecewiseCurve m_MovementSpeedCurve; // 0x1508	
	// MPropertySuppressField
	float m_flMovementSpeedCurveAvgSpeed; // 0x1548	
private:
	[[maybe_unused]] uint8_t __pad154c[0x4]; // 0x154c
public:
	// MPropertyStartGroup "Sounds"
	// MPropertyDescription "Sound to play if we hit a target."
	CSoundEventName m_strTargetHitSound; // 0x1550	
	// MPropertyDescription "Sound to play if miss entirely.  Only the caster hears it."
	CSoundEventName m_strMissSound; // 0x1560	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x128
// Has VTable
// 
// MGetKV3ClassDefaults
class CPrecipitationVData : public CEntitySubclassVDataBase
{
public:
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_szParticlePrecipitationEffect; // 0x28	
	float m_flInnerDistance; // 0x108	
	ParticleAttachment_t m_nAttachType; // 0x10c	
	bool m_bBatchSameVolumeType; // 0x110	
private:
	[[maybe_unused]] uint8_t __pad0111[0x3]; // 0x111
public:
	int32_t m_nRTEnvCP; // 0x114	
	int32_t m_nRTEnvCPComponent; // 0x118	
private:
	[[maybe_unused]] uint8_t __pad011c[0x4]; // 0x11c
public:
	CUtlString m_szModifier; // 0x120	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CLogicProximity : public CPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb70
// Has VTable
class CCitadel_Ability_Tengu_Urn : public CCitadelBaseAbility
{
public:
	Vector m_vLaunchPosition; // 0xab0	
	QAngle m_qLaunchAngle; // 0xabc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Killing_Blow_GlowVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShivOnlyDeathStatus; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShivOnlyDeathTrail; // 0x6d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strShivOnlyActivateSound; // 0x7b8	
	CSoundEventName m_strShivOnlyLoopSound; // 0x7c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbd0
// Has VTable
class CCitadel_Ability_Astro_Rifle : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Decoy_Tracker : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_ArmorUpgrade_ActiveBulletShieldVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_TempShieldModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x648
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_FullSpectrumVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x628	
	CEmbeddedSubclass< CCitadelModifier > m_BonusDamageModifier; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_OneVsOne : public CCitadel_Modifier_Intrinsic_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf0
// Has VTable
class CCitadel_Modifier_ControlPointCapturerAura : public CCitadelModifierAura
{
public:
	ParticleIndex_t m_particle; // 0xe8	
	CHandle< CCitadelControlPointTrigger > m_hCP; // 0xec	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa50
// Has VTable
// 
// MNetworkVarNames "string_t m_iszCommentaryFile"
// MNetworkVarNames "CHandle< CBaseEntity> m_hViewPosition"
// MNetworkVarNames "bool m_bActive"
// MNetworkVarNames "GameTime_t m_flStartTime"
// MNetworkVarNames "float32 m_flStartTimeInCommentary"
// MNetworkVarNames "string_t m_iszTitle"
// MNetworkVarNames "string_t m_iszSpeakers"
// MNetworkVarNames "int m_iNodeNumber"
// MNetworkVarNames "int m_iNodeNumberMax"
// MNetworkVarNames "bool m_bListenedTo"
class CPointCommentaryNode : public CBaseAnimGraph
{
public:
	CUtlSymbolLarge m_iszPreCommands; // 0x958	
	CUtlSymbolLarge m_iszPostCommands; // 0x960	
	// MNetworkEnable
	CUtlSymbolLarge m_iszCommentaryFile; // 0x968	
	CUtlSymbolLarge m_iszViewTarget; // 0x970	
	CHandle< CBaseEntity > m_hViewTarget; // 0x978	
	CHandle< CBaseEntity > m_hViewTargetAngles; // 0x97c	
	CUtlSymbolLarge m_iszViewPosition; // 0x980	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hViewPosition; // 0x988	
	CHandle< CBaseEntity > m_hViewPositionMover; // 0x98c	
	bool m_bPreventMovement; // 0x990	
	bool m_bUnderCrosshair; // 0x991	
	bool m_bUnstoppable; // 0x992	
private:
	[[maybe_unused]] uint8_t __pad0993[0x1]; // 0x993
public:
	GameTime_t m_flFinishedTime; // 0x994	
	Vector m_vecFinishOrigin; // 0x998	
	QAngle m_vecOriginalAngles; // 0x9a4	
	QAngle m_vecFinishAngles; // 0x9b0	
	bool m_bPreventChangesWhileMoving; // 0x9bc	
	bool m_bDisabled; // 0x9bd	
private:
	[[maybe_unused]] uint8_t __pad09be[0x2]; // 0x9be
public:
	Vector m_vecTeleportOrigin; // 0x9c0	
	GameTime_t m_flAbortedPlaybackAt; // 0x9cc	
	CEntityIOOutput m_pOnCommentaryStarted; // 0x9d0	
	CEntityIOOutput m_pOnCommentaryStopped; // 0x9f8	
	// MNetworkEnable
	bool m_bActive; // 0xa20	
private:
	[[maybe_unused]] uint8_t __pad0a21[0x3]; // 0xa21
public:
	// MNetworkEnable
	GameTime_t m_flStartTime; // 0xa24	
	// MNetworkEnable
	float m_flStartTimeInCommentary; // 0xa28	
private:
	[[maybe_unused]] uint8_t __pad0a2c[0x4]; // 0xa2c
public:
	// MNetworkEnable
	CUtlSymbolLarge m_iszTitle; // 0xa30	
	// MNetworkEnable
	CUtlSymbolLarge m_iszSpeakers; // 0xa38	
	// MNetworkEnable
	int32_t m_iNodeNumber; // 0xa40	
	// MNetworkEnable
	int32_t m_iNodeNumberMax; // 0xa44	
	// MNetworkEnable
	bool m_bListenedTo; // 0xa48	
	
	// Datamap fields:
	// void InputStartCommentary; // 0x0
	// void InputStartUnstoppableCommentary; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void CPointCommentaryNodeSpinThink; // 0x0
	// void CPointCommentaryNodeUpdateViewThink; // 0x0
	// void CPointCommentaryNodeUpdateViewPostThink; // 0x0
	// void CPointCommentaryNodeAcculumatePlayTimeThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe8
// Has VTable
class CCitadel_Modifier_AccuracyTracker : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x18]; // 0xc8
public:
	float m_flInterval; // 0xe0	
	float m_flProgress; // 0xe4	
	
	// Static fields:
	static float &Get_sm_flHighestAccuracy(){return *reinterpret_cast<float*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadel_Modifier_AccuracyTracker")->GetStaticFields()[0]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8d0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Slork_Invis_VData : public CCitadel_Modifier_InvisVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AmbushModifier; // 0x8b0	
	CEmbeddedSubclass< CCitadelModifier > m_VisibleModifier; // 0x8c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_GenericPerson_1 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityGenericPerson1VData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x158
// Has VTable
class CCitadel_Modifier_PerchedPredatorDrag : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x70]; // 0xc8
public:
	QAngle m_qRelativeOffset; // 0x138	
	float m_flRelativeDist; // 0x144	
	Vector m_vecOffsetDir; // 0x148	
	CHandle< CBaseEntity > m_hFollowEnt; // 0x154	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityPsychicPulseVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_DebuffModifier; // 0x14e8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PulseParticle; // 0x14f8	
	// MPropertyStartGroup "+Psychic Pulse Properties"
	float m_flCastEffectLifetime; // 0x15d8	
	float m_flConeAngle; // 0x15dc	
	float m_flConeHalfWidth; // 0x15e0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x148
// Has VTable
class CCitadel_Modifier_Hornet_Chain_Connection : public CCitadelModifier
{
public:
	Vector m_vecOrigin; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1620
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_Savior_VData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SaviorModifier; // 0x1530	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x950
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "bool m_bIgnoreInput"
// MNetworkVarNames "bool m_bLit"
// MNetworkVarNames "bool m_bFollowPlayerAcrossTeleport"
// MNetworkVarNames "float m_flWidth"
// MNetworkVarNames "float m_flHeight"
// MNetworkVarNames "float m_flDPI"
// MNetworkVarNames "float m_flInteractDistance"
// MNetworkVarNames "float m_flDepthOffset"
// MNetworkVarNames "uint32 m_unOwnerContext"
// MNetworkVarNames "uint32 m_unHorizontalAlign"
// MNetworkVarNames "uint32 m_unVerticalAlign"
// MNetworkVarNames "uint32 m_unOrientation"
// MNetworkVarNames "bool m_bAllowInteractionFromAllSceneWorlds"
// MNetworkVarNames "string_t m_vecCSSClasses"
// MNetworkVarNames "bool m_bOpaque"
// MNetworkVarNames "bool m_bNoDepth"
// MNetworkVarNames "bool m_bRenderBackface"
// MNetworkVarNames "bool m_bUseOffScreenIndicator"
// MNetworkVarNames "bool m_bExcludeFromSaveGames"
// MNetworkVarNames "bool m_bGrabbable"
// MNetworkVarNames "bool m_bOnlyRenderToTexture"
// MNetworkVarNames "bool m_bDisableMipGen"
// MNetworkVarNames "int32 m_nExplicitImageLayout"
class CPointClientUIWorldPanel : public CBaseClientUIEntity
{
public:
	// MNetworkEnable
	bool m_bIgnoreInput; // 0x8f8	
	// MNetworkEnable
	bool m_bLit; // 0x8f9	
	// MNetworkEnable
	bool m_bFollowPlayerAcrossTeleport; // 0x8fa	
private:
	[[maybe_unused]] uint8_t __pad08fb[0x1]; // 0x8fb
public:
	// MNetworkEnable
	float m_flWidth; // 0x8fc	
	// MNetworkEnable
	float m_flHeight; // 0x900	
	// MNetworkEnable
	float m_flDPI; // 0x904	
	// MNetworkEnable
	float m_flInteractDistance; // 0x908	
	// MNetworkEnable
	float m_flDepthOffset; // 0x90c	
	// MNetworkEnable
	uint32_t m_unOwnerContext; // 0x910	
	// MNetworkEnable
	uint32_t m_unHorizontalAlign; // 0x914	
	// MNetworkEnable
	uint32_t m_unVerticalAlign; // 0x918	
	// MNetworkEnable
	uint32_t m_unOrientation; // 0x91c	
	// MNetworkEnable
	bool m_bAllowInteractionFromAllSceneWorlds; // 0x920	
private:
	[[maybe_unused]] uint8_t __pad0921[0x7]; // 0x921
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< CUtlSymbolLarge > m_vecCSSClasses; // 0x928	
	// MNetworkEnable
	bool m_bOpaque; // 0x940	
	// MNetworkEnable
	bool m_bNoDepth; // 0x941	
	// MNetworkEnable
	bool m_bRenderBackface; // 0x942	
	// MNetworkEnable
	bool m_bUseOffScreenIndicator; // 0x943	
	// MNetworkEnable
	bool m_bExcludeFromSaveGames; // 0x944	
	// MNetworkEnable
	bool m_bGrabbable; // 0x945	
	// MNetworkEnable
	bool m_bOnlyRenderToTexture; // 0x946	
	// MNetworkEnable
	bool m_bDisableMipGen; // 0x947	
	// MNetworkEnable
	int32_t m_nExplicitImageLayout; // 0x948	
	
	// Datamap fields:
	// void InputIgnoreUserInput; // 0x0
	// void InputAcceptUserInput; // 0x0
	// CUtlSymbolLarge InputAddCSSClass; // 0x0
	// CUtlSymbolLarge InputRemoveCSSClass; // 0x0
	// CUtlSymbolLarge InputLocalPlayerAddCSSClass; // 0x0
	// CUtlSymbolLarge InputLocalPlayerRemoveCSSClass; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
class CFilterContext : public CBaseFilter
{
public:
	CUtlSymbolLarge m_iFilterContext; // 0x510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x598
// Has VTable
class CPathParticleRopeAlias_path_particle_rope_clientside : public CPathParticleRope
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x520
// Has VTable
class CCitadelFilterModifier : public CBaseFilter
{
public:
	CUtlSymbolLarge m_iModifierName; // 0x510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x218
// Has VTable
class CCitadel_Modifier_BulletFlurry : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x118]; // 0xc8
public:
	float m_flRadius; // 0x1e0	
private:
	[[maybe_unused]] uint8_t __pad01e4[0x4]; // 0x1e4
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecShootTargets; // 0x1e8	
	int32_t m_nNumPlayersKilled; // 0x200	
	int32_t m_nShootIndex; // 0x204	
	int32_t m_nShootIndexNPC; // 0x208	
	int32_t m_nBurstShots; // 0x20c	
	GameTime_t m_flNextAttackTime; // 0x210	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_MedicBulletsVData : public CCitadel_Modifier_BaseBulletPreRollProcVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x718	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x30
// Has VTable
// Has Trivial Destructor
struct AI_FreePassParams_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	float timeToTrigger; // 0x8	
	float duration; // 0xc	
	float moveTolerance; // 0x10	
	float refillRate; // 0x14	
	float coverDist; // 0x18	
	float peekTime; // 0x1c	
	float peekTimeAfterDamage; // 0x20	
	float peekEyeDist; // 0x24	
	float peekEyeDistZ; // 0x28	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x20
// Has VTable
// Has Trivial Destructor
class CBuoyancyHelper
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x18]; // 0x0
public:
	float m_flFluidDensity; // 0x18	
	
	// Datamap fields:
	// void m_pController; // 0x8
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_Item_Aura_Base : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
class CFilterAttributeInt : public CBaseFilter
{
public:
	CUtlStringToken m_sAttributeName; // 0x510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilitySleepBombVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplosionParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_AuraModifier; // 0x15c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc38
// Has VTable
class CCitadel_Ability_RocketLauncher : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_HighAlert : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Bebop_LaserBeamVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamParticle; // 0x608	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamParticleLocal; // 0x6e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamHitParticle; // 0x7c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strLaserStartSound; // 0x8a8	
	CSoundEventName m_strLaserEndSound; // 0x8b8	
	CSoundEventName m_strLaserLoopSound; // 0x8c8	
	CSoundEventName m_strLaserHitSound; // 0x8d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_Wraith_RapidFire : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x18]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e8
// Has VTable
class CCitadel_Modifier_Bull_Heal_Target : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x118]; // 0xc8
public:
	float m_flTetherRangeSquared; // 0x1e0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadelPlayer_CameraServices : public CPlayer_CameraServices
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CAISound : public CPointEntity
{
public:
	SoundTypes_t m_iSoundType; // 0x4b8	
	SoundFlags_t m_iSoundFlags; // 0x4ba	
	int32_t m_iVolume; // 0x4bc	
	int32_t m_iSoundIndex; // 0x4c0	
	float m_flDuration; // 0x4c4	
	CUtlSymbolLarge m_iszProxyEntityName; // 0x4c8	
	
	// Datamap fields:
	// int32_t InputInsertSound; // 0x0
	// void InputEmitAISound; // 0x0
	// void InputStopAISound; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x508
// Has VTable
class CPointEntityFinder : public CBaseEntity
{
public:
	CHandle< CBaseEntity > m_hEntity; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	CUtlSymbolLarge m_iFilterName; // 0x4c0	
	CHandle< CBaseFilter > m_hFilter; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04cc[0x4]; // 0x4cc
public:
	CUtlSymbolLarge m_iRefName; // 0x4d0	
	CHandle< CBaseEntity > m_hReference; // 0x4d8	
	EntFinderMethod_t m_FindMethod; // 0x4dc	
	CEntityIOOutput m_OnFoundEntity; // 0x4e0	
	
	// Datamap fields:
	// void InputFindEntity; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_WreckerSalvageBuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_WeaponBuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e0
// Has VTable
class CCitadel_Modifier_Astro_ShotgunBuff : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x50]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1518
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityAstroRifleVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SelfModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x14f8	
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x1508	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd80
// Has VTable
// 
// MNetworkVarNames "Vector m_vStrikeVel"
// MNetworkVarNames "float m_flStartHeight"
class CCitadel_Ability_LashDownStrike : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0xa8]; // 0xab0
public:
	GameTime_t m_ImpactTime; // 0xb58	
	Vector m_vDamagePos; // 0xb5c	
	Vector m_vDamageDir; // 0xb68	
private:
	[[maybe_unused]] uint8_t __pad0b74[0x4]; // 0xb74
public:
	CUtlVector< CHandle< CBaseEntity > > m_vHitEnemies; // 0xb78	
private:
	[[maybe_unused]] uint8_t __pad0b90[0x1c]; // 0xb90
public:
	ParticleIndex_t m_PreviewEffect; // 0xbac	
private:
	[[maybe_unused]] uint8_t __pad0bb0[0x1c0]; // 0xbb0
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vStrikeVel; // 0xd70	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
	float m_flStartHeight; // 0xd7c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierPsychicLiftVData : public CCitadel_Modifier_StunnedVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LiftParticle; // 0x6d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strStartSound; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1918
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityHoldMelee_VData : public CAbilityMeleeVData
{
public:
	CUtlOrderedMap< EMeleeHold_AttackType, AttackData_t > m_mapAttacks; // 0x1500	
	float m_flNextAttackOnParry; // 0x1528	
	float m_flParryWindow; // 0x152c	
	float m_flParryStunTime; // 0x1530	
	float m_flParryCooldown; // 0x1534	
	CRemapFloat m_AirMeleeUpScale; // 0x1538	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HoldBeginEffect; // 0x1548	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SuccessfulParryParticle; // 0x1628	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ParryActivateParticle; // 0x1708	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceHoldStart; // 0x17e8	
	CitadelCameraOperationsSequence_t m_cameraSequenceHitImpact; // 0x1868	
	// MPropertyStartGroup "Sounds"
	// MPropertyDescription "Sound to play when starting the hold"
	CSoundEventName m_strHoldBegin; // 0x18e8	
	CSoundEventName m_strSuccessfulParrySound; // 0x18f8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ParryVictimModifier; // 0x1908	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x80
// Has VTable
// 
// MNetworkVarNames "int32 m_nModelID"
// MNetworkVarNames "HMaterialStrong m_hMaterialBase"
// MNetworkVarNames "HMaterialStrong m_hMaterialDamageOverlay"
// MNetworkVarNames "ShardSolid_t m_solid"
// MNetworkVarNames "Vector2D m_vecPanelSize"
// MNetworkVarNames "Vector2D m_vecStressPositionA"
// MNetworkVarNames "Vector2D m_vecStressPositionB"
// MNetworkVarNames "Vector2D m_vecPanelVertices"
// MNetworkVarNames "Vector4D m_vInitialPanelVertices"
// MNetworkVarNames "float m_flGlassHalfThickness"
// MNetworkVarNames "bool m_bHasParent"
// MNetworkVarNames "bool m_bParentFrozen"
// MNetworkVarNames "CUtlStringToken m_SurfacePropStringToken"
struct shard_model_desc_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	int32_t m_nModelID; // 0x8	
private:
	[[maybe_unused]] uint8_t __pad000c[0x4]; // 0xc
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_hMaterialBase; // 0x10	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_hMaterialDamageOverlay; // 0x18	
	// MNetworkEnable
	ShardSolid_t m_solid; // 0x20	
private:
	[[maybe_unused]] uint8_t __pad0021[0x3]; // 0x21
public:
	// MNetworkEnable
	Vector2D m_vecPanelSize; // 0x24	
	// MNetworkEnable
	Vector2D m_vecStressPositionA; // 0x2c	
	// MNetworkEnable
	Vector2D m_vecStressPositionB; // 0x34	
private:
	[[maybe_unused]] uint8_t __pad003c[0x4]; // 0x3c
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< Vector2D > m_vecPanelVertices; // 0x40	
	// MNetworkEnable
	CNetworkUtlVectorBase< Vector4D > m_vInitialPanelVertices; // 0x58	
	// MNetworkEnable
	float m_flGlassHalfThickness; // 0x70	
	// MNetworkEnable
	bool m_bHasParent; // 0x74	
	// MNetworkEnable
	bool m_bParentFrozen; // 0x75	
private:
	[[maybe_unused]] uint8_t __pad0076[0x2]; // 0x76
public:
	// MNetworkEnable
	CUtlStringToken m_SurfacePropStringToken; // 0x78	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9a0
// Has VTable
class CInfoTrooperNeutralMovementNode : public CBaseProp
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_BreakablePropSpeedPickup : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x198
// Has VTable
class CCitadel_Modifier_ThrowSandProjectile : public CCitadel_Modifier_Intrinsic_Base
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecHitEntities; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00e0[0xa8]; // 0xe0
public:
	Vector m_vInitialCastPosition; // 0x188	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityNanoPounceVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeSlowParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaunchParticle; // 0x16a8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x1788	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x1798	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x17a8	
	// MPropertyStartGroup "Gameplay"
	float m_flPounceDistanceFromTarget; // 0x17b8	
	float m_flPounceTargetOffset; // 0x17bc	
	float m_flPounceToTargetMinStartTime; // 0x17c0	
	float m_flPounceToTargetMaxStartTime; // 0x17c4	
	float m_flPounceToEnemyMaxTime; // 0x17c8	
	float m_flPounceUpForce; // 0x17cc	
	float m_flPounceXYForce; // 0x17d0	
	float m_flPounceNearbyForceFactor; // 0x17d4	
	float m_flPounceMinSpeed; // 0x17d8	
	float m_flPounceToTargetDist; // 0x17dc	
	float m_flAllyMinTargetRange; // 0x17e0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_PuddleVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_puddleAoeDamageFx; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetDamageFx; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityHornetStingVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x14e8	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb78
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierStormCloudVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZapFriendly; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DrawFriendly; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AoEFriendly; // 0x7b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZapEnemy; // 0x898	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DrawEnemy; // 0x978	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AoEEnemy; // 0xa58	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strChannelEndingSoonSound; // 0xb38	
	CSoundEventName m_strChannelFinishedSound; // 0xb48	
	CSoundEventName m_strDamageRecievedSound; // 0xb58	
	CSoundEventName m_strAmbientZapSound; // 0xb68	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_MidBossAggroEnemy : public CCitadelModifier
{
public:
	GameTime_t m_flLastActiveTime; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1c8
// Has VTable
class CCitadel_Modifier_Siphon_Bullets_Watcher : public CCitadel_Modifier_StatStealBase
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7a8
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "HMaterialStrong m_hSkyMaterial"
// MNetworkVarNames "HMaterialStrong m_hSkyMaterialLightingOnly"
// MNetworkVarNames "bool m_bStartDisabled"
// MNetworkVarNames "Color m_vTintColor"
// MNetworkVarNames "Color m_vTintColorLightingOnly"
// MNetworkVarNames "float m_flBrightnessScale"
// MNetworkVarNames "int m_nFogType"
// MNetworkVarNames "float m_flFogMinStart"
// MNetworkVarNames "float m_flFogMinEnd"
// MNetworkVarNames "float m_flFogMaxStart"
// MNetworkVarNames "float m_flFogMaxEnd"
// MNetworkVarNames "bool m_bEnabled"
class CEnvSky : public CBaseModelEntity
{
public:
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_hSkyMaterial; // 0x748	
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_hSkyMaterialLightingOnly; // 0x750	
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	bool m_bStartDisabled; // 0x758	
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	Color m_vTintColor; // 0x759	
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	Color m_vTintColorLightingOnly; // 0x75d	
private:
	[[maybe_unused]] uint8_t __pad0761[0x3]; // 0x761
public:
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	float m_flBrightnessScale; // 0x764	
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	int32_t m_nFogType; // 0x768	
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	float m_flFogMinStart; // 0x76c	
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	float m_flFogMinEnd; // 0x770	
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	float m_flFogMaxStart; // 0x774	
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	float m_flFogMaxEnd; // 0x778	
	// MNetworkEnable
	// MNetworkChangeCallback "SkyStateChanged"
	bool m_bEnabled; // 0x77c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x500
// Has VTable
class CPointVelocitySensor : public CPointEntity
{
public:
	CHandle< CBaseEntity > m_hTargetEntity; // 0x4b8	
	Vector m_vecAxis; // 0x4bc	
	bool m_bEnabled; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04c9[0x3]; // 0x4c9
public:
	float m_fPrevVelocity; // 0x4cc	
	float m_flAvgInterval; // 0x4d0	
private:
	[[maybe_unused]] uint8_t __pad04d4[0x4]; // 0x4d4
public:
	CEntityOutputTemplate< float32 > m_Velocity; // 0x4d8	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
class CFilterMassGreater : public CBaseFilter
{
public:
	float m_fFilterMass; // 0x510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
class FilterTeam : public CBaseFilter
{
public:
	int32_t m_iFilterTeam; // 0x510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Guiding_Arrow : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_QuickSilver_Buff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8c0
// Has VTable
class CFuncTankTrain : public CFuncTrackTrain
{
public:
	CEntityIOOutput m_OnDeath; // 0x898	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7a0
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_timeLaunch"
class CItemXP : public CBaseModelEntity
{
private:
	[[maybe_unused]] uint8_t __pad0748[0x54]; // 0x748
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnLaunchTimeChanged"
	GameTime_t m_timeLaunch; // 0x79c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CNullEntity : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Synth_Grasp_Victim_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strVictimTetheredSound; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GraspVictimParticle; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityRapidFireVData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityRiotProtocolVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChargeUpParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x15c8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_WardenBuffModifier; // 0x16a8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x738
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_CatAmmoVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadel_Modifier_Base_Buildup > m_BuildUpModifier; // 0x628	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x638	
	CEmbeddedSubclass< CCitadelModifier > m_ImmunityModifier; // 0x648	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x658	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Chrono_KineticCarbineVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FullyChargedParticle; // 0x6d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strFullyCharged; // 0x7b8	
	CSoundEventName m_strShotSound; // 0x7c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae0
// Has VTable
class CCitadel_CatAnimating : public CCitadelAnimatingModelEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7a0
// Has VTable
class CMarkupVolumeWithRef : public CMarkupVolumeTagged
{
public:
	bool m_bUseRef; // 0x788	
private:
	[[maybe_unused]] uint8_t __pad0789[0x3]; // 0x789
public:
	Vector m_vRefPos; // 0x78c	
	float m_flRefDot; // 0x798	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb80
// Has VTable
// 
// MNetworkVarNames "int m_nNumStacks"
class CItem_RestorativeLocket : public CCitadel_Item
{
private:
	[[maybe_unused]] uint8_t __pad0ad0[0xa8]; // 0xad0
public:
	// MNetworkEnable
	int32_t m_nNumStacks; // 0xb78	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x548
// Has VTable
class CPointTemplate : public CLogicalEntity
{
public:
	CUtlSymbolLarge m_iszWorldName; // 0x4b8	
	CUtlSymbolLarge m_iszSource2EntityLumpName; // 0x4c0	
	CUtlSymbolLarge m_iszEntityFilterName; // 0x4c8	
	float m_flTimeoutInterval; // 0x4d0	
	bool m_bAsynchronouslySpawnEntities; // 0x4d4	
private:
	[[maybe_unused]] uint8_t __pad04d5[0x3]; // 0x4d5
public:
	CEntityIOOutput m_pOutputOnSpawned; // 0x4d8	
	PointTemplateClientOnlyEntityBehavior_t m_clientOnlyEntityBehavior; // 0x500	
	PointTemplateOwnerSpawnGroupType_t m_ownerSpawnGroupType; // 0x504	
	CUtlVector< uint32 > m_createdSpawnGroupHandles; // 0x508	
	CUtlVector< CEntityHandle > m_SpawnedEntityHandles; // 0x520	
	HSCRIPT m_ScriptSpawnCallback; // 0x538	
	HSCRIPT m_ScriptCallbackScope; // 0x540	
	
	// Datamap fields:
	// void InputForceSpawn; // 0x0
	// void InputDeleteCreatedSpawnGroups; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityFealtyVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_TargetModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_ThrowSandDebuff : public CCitadel_Modifier_Disarmed
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Decoy_Self_Buff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_HornetSnipeVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_GlowEnemeyModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab8
// Has VTable
class CCitadel_Ability_WingBlast : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_Particle; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_LifeDrainVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_LifeDrainTargetModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_LifeDrainCasterModifier; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BoxingGloveVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x628	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SwingParticle; // 0x638	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x718	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e0
// Has VTable
class CCitadel_Modifier_Item_Bleeding_Bullets_Active : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5b0
// Has VTable
// Is Abstract
class CBaseNPCMaker : public CBaseEntity
{
public:
	int32_t m_nMaxNumNPCs; // 0x4b8	
	float m_flSpawnFrequency; // 0x4bc	
	float m_flRetryFrequency; // 0x4c0	
	int32_t m_nHullCheckMode; // 0x4c4	
	CEntityOutputTemplate< CHandle< CBaseEntity > > m_OnSpawnNPC; // 0x4c8	
	CEntityIOOutput m_OnAllSpawned; // 0x4f0	
	CEntityIOOutput m_OnAllSpawnedDead; // 0x518	
	CEntityIOOutput m_OnAllLiveChildrenDead; // 0x540	
	int32_t m_nLiveChildren; // 0x568	
	int32_t m_nMaxLiveChildren; // 0x56c	
	int32_t m_nMinSpawnDistance; // 0x570	
	int32_t m_nSpawnTheshold; // 0x574	
	float m_flRadius; // 0x578	
	bool m_bDisabled; // 0x57c	
	bool m_bSpawning; // 0x57d	
	bool m_bZeroPitchAndRoll; // 0x57e	
private:
	[[maybe_unused]] uint8_t __pad057f[0x1]; // 0x57f
public:
	CHandle< CBaseEntity > m_hIgnoreEntity; // 0x580	
private:
	[[maybe_unused]] uint8_t __pad0584[0x4]; // 0x584
public:
	CUtlSymbolLarge m_iszIgnoreEnt; // 0x588	
	CUtlSymbolLarge m_iszDestinationGroup; // 0x590	
	CHandle< CBaseEntity > m_hSpawnEntity; // 0x598	
	CBaseNPCMaker::VisibilityCriterion_t m_CriterionVisibility; // 0x59c	
	CBaseNPCMaker::ThreeStateDist_t m_CriterionDistance; // 0x5a0	
	
	// Datamap fields:
	// void InputSpawn; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void InputToggle; // 0x0
	// int32_t InputSetMaxChildren; // 0x0
	// int32_t InputAddMaxChildren; // 0x0
	// int32_t InputSetMaxLiveChildren; // 0x0
	// float InputSetSpawnFrequency; // 0x0
	// void InputSpawnInRadius; // 0x0
	// void InputSpawnInLine; // 0x0
	// int32_t InputSpawnMultiple; // 0x0
	// CUtlSymbolLarge InputChangeDestinationGroup; // 0x0
	// int32_t InputSetMinimumSpawnDistance; // 0x0
	// CUtlSymbolLarge InputSetSpawnEntity; // 0x0
	// void CBaseNPCMakerMakerThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1b0
// Has VTable
class CCitadel_Modifier_ModDisruptor : public CCitadel_Modifier_Silenced
{
private:
	[[maybe_unused]] uint8_t __pad00d0[0x10]; // 0xd0
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_ArmorUpgrade_CloakingDeviceActive : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
// Is Abstract
class CPhysForce : public CPointEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CUtlSymbolLarge m_nameAttach; // 0x4c0	
	float m_force; // 0x4c8	
	float m_forceTime; // 0x4cc	
	CHandle< CBaseEntity > m_attachedObject; // 0x4d0	
	bool m_wasRestored; // 0x4d4	
private:
	[[maybe_unused]] uint8_t __pad04d5[0x3]; // 0x4d5
public:
	// -> m_linear - 0x4e4
	// -> m_angular - 0x4f0
	// -> m_linearSave - 0x4fc
	// -> m_angularSave - 0x508
	CConstantForceController m_integrator; // 0x4d8	
	
	// Datamap fields:
	// void m_pController; // 0x4b8
	// void InputActivate; // 0x0
	// void InputDeactivate; // 0x0
	// float InputForceScale; // 0x0
	// void CPhysForceForceOff; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CLogicDistanceAutosave : public CLogicalEntity
{
public:
	CUtlSymbolLarge m_iszTargetEntity; // 0x4b8	
	float m_flDistanceToPlayer; // 0x4c0	
	bool m_bForceNewLevelUnit; // 0x4c4	
	bool m_bCheckCough; // 0x4c5	
	bool m_bThinkDangerous; // 0x4c6	
private:
	[[maybe_unused]] uint8_t __pad04c7[0x1]; // 0x4c7
public:
	float m_flDangerousTime; // 0x4c8	
	
	// Datamap fields:
	// void InputSave; // 0x0
	// float InputSaveDangerous; // 0x0
	// void CLogicDistanceAutosaveSaveThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Chomp_LowHealth_Glow : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xaf0
// Has VTable
class CCitadel_Ability_Slork_Chomp : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb58
// Has VTable
class CCitadel_Ability_Haze_StackingDamage : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x19c0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Viscous_TelepunchVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PortalParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PunchParticle; // 0x16a8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_WallPunchParticle; // 0x1788	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CeilingPunchParticle; // 0x1868	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_EnemyPortalSound; // 0x1948	
	CSoundEventName m_SelfPortalSound; // 0x1958	
	CSoundEventName m_WindupSound; // 0x1968	
	CSoundEventName m_PunchSound; // 0x1978	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_PunchRollSlowModifier; // 0x1988	
	CEmbeddedSubclass< CCitadelModifier > m_ImpactModifier; // 0x1998	
	// MPropertyStartGroup "+Telepunch Parameters"
	float m_flEnemyPortalTelegraphTime; // 0x19a8	
	float m_flSelfPortalTelegraphTime; // 0x19ac	
	float m_flWindupTime; // 0x19b0	
	float m_flAttackTime; // 0x19b4	
	float m_flGroundTraceOnPlayerHitDistance; // 0x19b8	
	float m_flPlayerCheckSphereRadius; // 0x19bc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1600
// Has VTable
// 
// MNetworkVarNames "float m_flForwardSpeed"
// MNetworkVarNames "CHandle< CBaseEntity> m_hOwnerPawn"
class CNPC_NanoRollermine : public CAI_CitadelNPC
{
private:
	[[maybe_unused]] uint8_t __pad1578[0x38]; // 0x1578
public:
	// MNetworkEnable
	float m_flForwardSpeed; // 0x15b0	
private:
	[[maybe_unused]] uint8_t __pad15b4[0x44]; // 0x15b4
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hOwnerPawn; // 0x15f8	
	
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_NANO_ROLLERMINE_ROLL_FORWARD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_NanoRollermine")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_NANO_ROLLERMINE_EXPLODE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_NanoRollermine")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_NANO_ROLLERMINE_EXPLODING(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_NanoRollermine")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_NANO_ROLLERMINE_CHARGE_PATH(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_NanoRollermine")->GetStaticFields()[3]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_NANO_ROLLERMINE_EXPLODE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_NanoRollermine")->GetStaticFields()[4]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_NANO_ROLLERMINE_PATH_TO_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_NanoRollermine")->GetStaticFields()[5]->m_pInstance);};
	static ConditionId_t &Get_COND_NANO_ROLLERMINE_EXPLODE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_NanoRollermine")->GetStaticFields()[6]->m_pInstance);};
	static ConditionId_t &Get_COND_NANO_ROLLERMINE_EXPLODING(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_NanoRollermine")->GetStaticFields()[7]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CInfoDynamicShadowHint : public CPointEntity
{
public:
	bool m_bDisabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	float m_flRange; // 0x4bc	
	int32_t m_nImportance; // 0x4c0	
	int32_t m_nLightChoice; // 0x4c4	
	CHandle< CBaseEntity > m_hLight; // 0x4c8	
	
	// Static fields:
	static CUtlVector< CInfoDynamicShadowHint* > &Get_m_AllHints(){return *reinterpret_cast<CUtlVector< CInfoDynamicShadowHint* >*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CInfoDynamicShadowHint")->GetStaticFields()[0]->m_pInstance);};
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Slork_InvisVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_InvisModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_PreventHealingModifier; // 0x14f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AmbushExplosionParticle; // 0x1508	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_AmbushExplosionSound; // 0x15e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc78
// Has VTable
// 
// MNetworkVarNames "int m_nFastFireBulletsLeft"
// MNetworkVarNames "CCitadelAutoScaledTime m_flBlitzEndTime"
class CAbility_Synth_Blitz : public CCitadelBaseAbility
{
public:
	CUtlVector< ShotID_t > m_vecSpecialShots; // 0xab0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	int32_t m_nFastFireBulletsLeft; // 0xac8	
private:
	[[maybe_unused]] uint8_t __pad0acc[0x4]; // 0xacc
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	CCitadelAutoScaledTime m_flBlitzEndTime; // 0xad0	
	bool m_bCanApplyTechAmp; // 0xae8	
	bool m_bCanLifesteal; // 0xae9	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_ConsumedProtectionRacket : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_TargetPractice : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6a8
// Has VTable
class CSoundOpvarSetOBBEntity : public CSoundOpvarSetAABBEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8
// Has Trivial Constructor
// Has Trivial Destructor
struct CEnvWindShared__WindVariationEvent_t
{
public:
	float m_flWindAngleVariation; // 0x0	
	float m_flWindSpeedVariation; // 0x4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1
// Has Trivial Constructor
// Has Trivial Destructor
// 
// MPulseProvideFeatureTag "PulseEntities"
// MPulseLibraryBindings
class CTakeDamageInfoAPI
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x1]; // 0x0
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x950
// Has VTable
class CScriptTriggerOnce : public CTriggerOnce
{
public:
	Vector m_vExtent; // 0x940	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
class CCitadel_ArmorUpgrade_HighImpactArmor : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CNavWalkable : public CPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1918
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Synth_Pulse_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_EscapeModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x14f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AoEParticle; // 0x1508	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EffectParticle; // 0x15e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelParticle; // 0x16c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x17a8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExpireSound; // 0x1888	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceInSatchel; // 0x1898	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Thumper_3 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x220
// Has VTable
class CCitadel_Modifier_CatAmmo : public CCitadel_Modifier_BaseEventProc
{
public:
	float m_flBuildupPerBullet; // 0x170	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_RocketBarrageVolleyVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strFireSound; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_ZiplineKnockdownImmune : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x898
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierContainmentVictimVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AreaParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChainedParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Slow : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x788
// Has VTable
// 
// MNetworkVarNames "CUtlString m_targetCamera"
// MNetworkVarNames "int m_nResolutionEnum"
// MNetworkVarNames "bool m_bRenderShadows"
// MNetworkVarNames "bool m_bUseUniqueColorTarget"
// MNetworkVarNames "CUtlString m_brushModelName"
// MNetworkVarNames "EHANDLE m_hTargetCamera"
// MNetworkVarNames "bool m_bEnabled"
// MNetworkVarNames "bool m_bDraw3DSkybox"
class CFuncMonitor : public CFuncBrush
{
public:
	// MNetworkEnable
	CUtlString m_targetCamera; // 0x768	
	// MNetworkEnable
	int32_t m_nResolutionEnum; // 0x770	
	// MNetworkEnable
	bool m_bRenderShadows; // 0x774	
	// MNetworkEnable
	bool m_bUseUniqueColorTarget; // 0x775	
private:
	[[maybe_unused]] uint8_t __pad0776[0x2]; // 0x776
public:
	// MNetworkEnable
	CUtlString m_brushModelName; // 0x778	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTargetCamera; // 0x780	
	// MNetworkEnable
	bool m_bEnabled; // 0x784	
	// MNetworkEnable
	bool m_bDraw3DSkybox; // 0x785	
	bool m_bStartEnabled; // 0x786	
	
	// Datamap fields:
	// void InputToggle; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// CUtlSymbolLarge InputSetCamera; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x780
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_hLocalPortalLink"
// MNetworkVarNames "EHANDLE m_hRemotePortalLink"
// MNetworkVarNames "CUtlString m_brushModelName"
// MNetworkVarNames "float m_flFadeStartDist"
// MNetworkVarNames "float m_flFadeEndDist"
// MNetworkVarNames "float m_flFadeStartAngle"
// MNetworkVarNames "float m_flFadeEndAngle"
// MNetworkVarNames "Color m_fadeToColor"
class CRenderPortal : public CBaseModelEntity
{
public:
	CUtlSymbolLarge m_szLocalPortalLink; // 0x748	
	CUtlSymbolLarge m_szRemotePortalLink; // 0x750	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hLocalPortalLink; // 0x758	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hRemotePortalLink; // 0x75c	
	// MNetworkEnable
	CUtlString m_brushModelName; // 0x760	
	// MNetworkEnable
	float m_flFadeStartDist; // 0x768	
	// MNetworkEnable
	float m_flFadeEndDist; // 0x76c	
	// MNetworkEnable
	float m_flFadeStartAngle; // 0x770	
	// MNetworkEnable
	float m_flFadeEndAngle; // 0x774	
	// MNetworkEnable
	Color m_fadeToColor; // 0x778	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9a0
// Has VTable
// 
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
// MNetworkVarNames "Vector m_vExitOrigin"
class CCitadelTeleportTrigger : public CTriggerModifier
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0x928	
	// MNetworkEnable
	Vector m_vExitOrigin; // 0x940	
private:
	[[maybe_unused]] uint8_t __pad094c[0x24]; // 0x94c
public:
	CUtlSymbolLarge m_strExitPoint; // 0x970	
	CEntityIOOutput m_OnTeleport; // 0x978	
	
	// Datamap fields:
	// void m_pEntExit; // 0x950
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb50
// Has VTable
// 
// MNetworkVarNames "char m_messageText"
class CPointClientUIWorldTextPanel : public CPointClientUIWorldPanel
{
public:
	// MNetworkEnable
	char m_messageText[512]; // 0x950	
	
	// Datamap fields:
	// void InputToggle; // 0x0
	// CUtlSymbolLarge InputSetMessage; // 0x0
	// int32_t InputSetIntMessage; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CInfoInstructorHintTarget : public CPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x728
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_HookTargetVData : public CCitadelModifierVData
{
public:
	// MPropertyDescription "How soon before the target arrives at Bebop to play the approaching whoosh sound"
	float m_flApproachingWhooshAnticipationTime; // 0x5f8	
	float m_flCloseEnoughDistance; // 0x5fc	
	float m_flTossUpSpeed; // 0x600	
private:
	[[maybe_unused]] uint8_t __pad0604[0x4]; // 0x604
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x608	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HookRetrieveParticle; // 0x618	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strRetractSound; // 0x6f8	
	CSoundEventName m_strRetractSoundEnd; // 0x708	
	CSoundEventName m_strApproachingWhooshSound; // 0x718	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_TargetPracticeSelf : public CCitadelModifier
{
public:
	bool m_bFoundTarget; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_SilencerProcActive : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16f0
// Has VTable
// 
// MGetKV3ClassDefaults
class CItem_RestorativeLocket_VData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x1530	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TrailParticle; // 0x1610	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_CharmedWraps_VData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SwingParticle; // 0x628	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x708	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1c8
// Has VTable
class CCitadel_Modifier_SleepBomb_Aura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab8
// Has VTable
class CCitadel_Ability_Yakuza_Shakedown : public CCitadelBaseAbility
{
public:
	int32_t m_IgnoreChannelSlow; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1720
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_CheatDeathVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DamagePulseParticle; // 0x1530	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DamageTargetParticle; // 0x1610	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sHealPulseSound; // 0x16f0	
	CSoundEventName m_sHealAndDamagePulseSound; // 0x1700	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DeathImmuneModifier; // 0x1710	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Succor_Move : public CCitadelModifier
{
public:
	bool m_bHasPulled; // 0xc8	
	bool m_bIsPulling; // 0xc9	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x528
// Has VTable
class CLogicBranch : public CLogicalEntity
{
public:
	bool m_bInValue; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x7]; // 0x4b9
public:
	CUtlVector< CHandle< CBaseEntity > > m_Listeners; // 0x4c0	
	CEntityIOOutput m_OnTrue; // 0x4d8	
	CEntityIOOutput m_OnFalse; // 0x500	
	
	// Datamap fields:
	// bool InputSetValue; // 0x0
	// bool InputSetValueTest; // 0x0
	// void InputToggle; // 0x0
	// void InputToggleTest; // 0x0
	// void InputTest; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
class CSpriteAlias_env_glow : public CSprite
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x848
// Has VTable
class CCitadel_Projectile_Viscous_GooGrenade : public CCitadelProjectile
{
public:
	int32_t m_nBounces; // 0x800	
	GameTime_t m_tNextDetonateTime; // 0x804	
	CUtlVector< CHandle< CBaseEntity > > m_vecProjectileHitTargets; // 0x808	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_Upgrade_WeaponPowerForHealth : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x918
// Has VTable
class CPhysicalButton : public CBaseButton
{
public:
	// Datamap fields:
	// void CPhysicalButtonPhysicsThink; // 0x0
	// void CPhysicalButtonButtonTouch; // 0x0
	// void CPhysicalButtonTriggerAndWait; // 0x0
	// void CPhysicalButtonButtonBackHome; // 0x0
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x568
// Has VTable
class CPhysLength : public CPhysConstraint
{
public:
	Vector m_offset[2]; // 0x530	
	Vector m_vecAttach; // 0x548	
	float m_addLength; // 0x554	
	float m_minLength; // 0x558	
	float m_totalLength; // 0x55c	
	bool m_bEnableCollision; // 0x560	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbd0
// Has VTable
class CCitadel_Ability_PrimaryWeapon_Cadence : public CCitadel_Ability_PrimaryWeapon
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_AirLift_Grab : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x260
// Has VTable
class CCitadel_Modifier_ChronoSwap_BubbleMove : public CCitadelModifier
{
public:
	bool m_bOtherIsInFrontAtStart; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00c9[0x3]; // 0xc9
public:
	Vector m_vOtherToDest; // 0xcc	
	Vector m_vStart; // 0xd8	
	Vector m_vDest; // 0xe4	
	CHandle< CBaseEntity > m_hOther; // 0xf0	
	Vector m_vLastSafePos; // 0xf4	
	int32_t m_nNumTicks; // 0x100	
	int32_t m_nTicksLeft; // 0x104	
	ParticleIndex_t m_nBeamIndex; // 0x108	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_Silence_Buildup : public CCitadel_Modifier_Base_Buildup
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x828
// Has VTable
class CLogicNPCCounterOBB : public CLogicNPCCounterAABB
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_PassiveBeefyVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HealParticle; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_IntensifyingClip : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1f8
// Has VTable
class CCitadel_Modifier_Ricochet_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15b8
// Has VTable
class CNPC_HeroDecoy : public CNPC_HeroCloneTrooper
{
public:
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_HERO_DECOY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroDecoy")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_HERO_DECOY_MOVETO(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroDecoy")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MOVE_DECOY_MOVETO(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroDecoy")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MOVE_DECOY_FORWARD(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_HeroDecoy")->GetStaticFields()[3]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9e8
// Has VTable
// 
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkIncludeByName "m_iHealth"
class CPropAnimatingBreakable : public CBaseAnimGraph
{
public:
	CBreakableStageHelper m_stages; // 0x958	
	CEntityIOOutput m_OnTakeDamage; // 0x970	
	CEntityIOOutput m_OnFinalBreak; // 0x998	
	CEntityIOOutput m_OnStageAdvanced; // 0x9c0	
	
	// Datamap fields:
	// void InputNextBreakStage; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e8
// Has VTable
class CCitadel_Modifier_ShakedownPulse : public CCitadelModifier
{
public:
	float m_flSharedDamage; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityStickyBombVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BombAttachedModifier; // 0x14e8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastBombParticle; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9b8
// Has VTable
class CCitadelTriggerHurt : public CTriggerHurt
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e0
// Has VTable
class CCitadel_Modifier_Spin : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x50]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierQuarantineVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BubbleParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BubbleExplodeParticle; // 0x6d8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SilenceModifier; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Neutral_Debuff_Pushback : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_Item_Intensifying_Clip : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_BreakablePropFireRatePickup : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x110
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelViscousBallVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_sModelName; // 0x28	
	float m_flPhysicsRadius; // 0x108	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1550
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_WeaponUpgrade_HeadshotBooster_VData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_HeadShotVictimSound; // 0x1530	
	CSoundEventName m_HeadShotConfirmationSound; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f0
// Has VTable
// 
// MNetworkVarNames "Color m_fadeColor"
class CEnvFade : public CLogicalEntity
{
public:
	// MNetworkEnable
	Color m_fadeColor; // 0x4b8	
	float m_Duration; // 0x4bc	
	float m_HoldDuration; // 0x4c0	
private:
	[[maybe_unused]] uint8_t __pad04c4[0x4]; // 0x4c4
public:
	CEntityIOOutput m_OnBeginFade; // 0x4c8	
	
	// Datamap fields:
	// void InputFade; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_ThrowSand : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1528
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityBouncePadVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BounceModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_AllyBounceModifier; // 0x14f8	
	CEmbeddedSubclass< CCitadelModifier > m_SpeedOnLandModifier; // 0x1508	
	CEmbeddedSubclass< CCitadelModifier > m_NoBounceModifier; // 0x1518	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x358
// Has VTable
class CCitadel_Modifier_RocketBarrageVolley : public CCitadelModifier
{
public:
	float m_flFiringInterval; // 0xc8	
	GameTime_t m_flCastTime; // 0xcc	
	GameTime_t m_flNextRocketTime; // 0xd0	
	int32_t m_nGrenadesLeft; // 0xd4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb38
// Has VTable
// Is Abstract
// 
// MNetworkVarNames "bool m_bUsingThisMelee"
// MNetworkVarNames "bool m_bUsingMeleeTagActive"
// MNetworkVarNames "bool m_bHitWithThisAttack"
// MNetworkVarNames "GameTime_t m_flLastActivateTime"
// MNetworkVarNames "GameTime_t m_flNextAttackAllowedTime"
// MNetworkVarNames "GameTime_t m_flAttackTriggeredTime"
class CCitadel_Ability_Melee_Base : public CCitadelBaseAbility
{
public:
	int32_t m_nHitNumber; // 0xab0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bUsingThisMelee; // 0xab4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bUsingMeleeTagActive; // 0xab5	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bHitWithThisAttack; // 0xab6	
private:
	[[maybe_unused]] uint8_t __pad0ab7[0x1]; // 0xab7
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flLastActivateTime; // 0xab8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flNextAttackAllowedTime; // 0xabc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flAttackTriggeredTime; // 0xac0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x228
// Has VTable
class CCitadel_Modifier_PowerSurge_ChainLightning : public CCitadel_Modifier_ChainLightningEffect
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_FullSpectrumDamage : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4
// Has Trivial Constructor
// Has Trivial Destructor
struct AISound_t
{
public:
	uint16_t nType; // 0x0	
	uint16_t nFlags; // 0x2	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa78
// Has VTable
class CCitadel_Announcer_Base : public CBaseCombatCharacter
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x960
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flTurnSolidTime"
class CCitadel_Ice_Dome_Blocker : public CBaseAnimGraph
{
public:
	// MNetworkEnable
	GameTime_t m_flTurnSolidTime; // 0x958	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc08
// Has VTable
class CDynamicPropAlias_cable_dynamic : public CDynamicProp
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
class CCitadel_Item_TechDamagePulse : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Tier3BossInvuln : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_PristineEmblem_VData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TracerParticle; // 0x5f8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ParticleModifier; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa88
// Has VTable
class CCitadel_PointTalker : public CCitadel_PointTalker_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_Item_ModDisruptor : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1c8
// Has VTable
class CCitadel_Modifier_FrenzyAura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f8
// Has VTable
class CEnvGlobal : public CLogicalEntity
{
public:
	CEntityOutputTemplate< int32 > m_outCounter; // 0x4b8	
	CUtlSymbolLarge m_globalstate; // 0x4e0	
	int32_t m_triggermode; // 0x4e8	
	int32_t m_initialstate; // 0x4ec	
	int32_t m_counter; // 0x4f0	
	
	// Datamap fields:
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
	// void InputRemove; // 0x0
	// void InputToggle; // 0x0
	// int32_t InputSetCounter; // 0x0
	// int32_t InputAddToCounter; // 0x0
	// void InputGetCounter; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityHornetChainVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x14e8	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strExplodeSound; // 0x15c8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ChainModifier; // 0x15d8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DisarmModifier; // 0x15e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc20
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_hProjectile"
// MNetworkVarNames "float m_flArrowSpeed"
// MNetworkVarNames "GameTime_t m_flSnapAnglesBackTime"
// MNetworkVarNames "int m_nBonusTechPower"
class CCitadel_Ability_GuidedArrow : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x8]; // 0xab0
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hProjectile; // 0xab8	
	// MNetworkEnable
	float m_flArrowSpeed; // 0xabc	
	// MNetworkEnable
	GameTime_t m_flSnapAnglesBackTime; // 0xac0	
	// MNetworkEnable
	int32_t m_nBonusTechPower; // 0xac4	
	CHandle< CCitadelAnimatingModelEntity > m_hOwl; // 0xac8	
private:
	[[maybe_unused]] uint8_t __pad0acc[0xc]; // 0xacc
public:
	GameTime_t m_flCastTime; // 0xad8	
	bool m_bNeedsExplosion; // 0xadc	
private:
	[[maybe_unused]] uint8_t __pad0add[0x3]; // 0xadd
public:
	Vector m_vProjectileRemovedOrigin; // 0xae0	
	QAngle m_angCasterAnglesAtCastTime; // 0xaec	
	float m_flTravelDistance; // 0xaf8	
	bool m_bInKillFlow; // 0xafc	
private:
	[[maybe_unused]] uint8_t __pad0afd[0x3]; // 0xafd
public:
	float m_flProjectileTurnVel; // 0xb00	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_FireBombVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChargeParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GroundParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb78
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flParryWindowEndTime"
// MNetworkVarNames "GameTime_t m_flNextParryTime"
// MNetworkVarNames "GameTime_t m_flStateStartTime"
// MNetworkVarNames "GameTime_t m_flDashStartTime"
// MNetworkVarNames "EMeleeHold_AttackState m_eCurrentAttackState"
// MNetworkVarNames "EMeleeHold_AttackType m_eCurrentAttackType"
// MNetworkVarNames "Vector m_vAirDashDir"
class CCitadel_Ability_HoldMelee : public CCitadel_Ability_Melee_Base
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flParryWindowEndTime; // 0xb38	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flNextParryTime; // 0xb3c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flStateStartTime; // 0xb40	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flDashStartTime; // 0xb44	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	EMeleeHold_AttackState m_eCurrentAttackState; // 0xb48	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	EMeleeHold_AttackType m_eCurrentAttackType; // 0xb4c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vAirDashDir; // 0xb50	
	bool m_bCreatedChargeEffects; // 0xb5c	
private:
	[[maybe_unused]] uint8_t __pad0b5d[0x3]; // 0xb5d
public:
	QAngle m_angForced; // 0xb60	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierApexWatcherVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1700
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityJumpVData : public CitadelAbilityVData
{
public:
	float m_flShootingLockoutAfterJump; // 0x14e8	
private:
	[[maybe_unused]] uint8_t __pad14ec[0x4]; // 0x14ec
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DashJumpParticle; // 0x14f0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AirJumpParticle; // 0x15d0	
	// MPropertyStartGroup "Air Jump"
	CSoundEventName m_AirJumpExecutedSound; // 0x16b0	
	float m_flMantleRefundWindow; // 0x16c0	
	float m_flZiplineRefundWindow; // 0x16c4	
	float m_flLateJumpGraceWindow; // 0x16c8	
	// MPropertyDescription "The most we'll adjust your speed in the input direction when performing an air jump"
	float m_flMaxSpeedDelta; // 0x16cc	
	// MPropertyStartGroup "Roll Jump"
	CSoundEventName m_strDashJumpActivate; // 0x16d0	
	float m_flDashJumpStartTime; // 0x16e0	
	float m_flDashJumpEndTime; // 0x16e4	
	// MPropertyDescription "How far a dash jump will send you forward.  This is on top of the ~8m already traveled by the dash."
	float m_flDashJumpDistanceInMeters; // 0x16e8	
private:
	[[maybe_unused]] uint8_t __pad16ec[0x4]; // 0x16ec
public:
	float m_flDashJumpVerticalSpeed; // 0x16f0	
	float m_flDashJumpMissMaxSpeed; // 0x16f4	
	float m_flDashJumpMantleDisableTime; // 0x16f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Objective_BulletReistVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Objective Bullet Resist"
	// MPropertyDescription "Bullet Resist with no Enemy Heroes around"
	float m_BulletResist; // 0x5f8	
	// MPropertyDescription "Bullet Resist Reduced Per Enemy Hero (Max 0%)"
	float m_BulletResistReductionPerHero; // 0x5fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x98
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_hOuter"
// MNetworkVarNames "HitGroup_t m_nCritHitGroup"
// MNetworkVarNames "int m_nBodyGroup"
// MNetworkVarNames "bool m_bPermanentlyBroken"
// MNetworkVarNames "int m_nBrokenBodygroupIndex"
struct WeakPoint_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x7c]; // 0x0
public:
	bool m_bRegistered; // 0x7c	
private:
	[[maybe_unused]] uint8_t __pad007d[0x3]; // 0x7d
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnOuterChanged"
	CHandle< CBaseEntity > m_hOuter; // 0x80	
	// MNetworkEnable
	// MNetworkChangeCallback "OnFlashDataChanged"
	HitGroup_t m_nCritHitGroup; // 0x84	
	// MNetworkEnable
	// MNetworkChangeCallback "OnFlashDataChanged"
	int32_t m_nBodyGroup; // 0x88	
	// MNetworkEnable
	// MNetworkChangeCallback "OnPermanentlyBroken"
	bool m_bPermanentlyBroken; // 0x8c	
private:
	[[maybe_unused]] uint8_t __pad008d[0x3]; // 0x8d
public:
	// MNetworkEnable
	int32_t m_nBrokenBodygroupIndex; // 0x90	
	
	// Datamap fields:
	// void m_OnBreakDelegate; // 0x60
	// void m_params; // 0x38
	// void m_nBreakEffectsAttachment; // 0x30
	// void m_nBreakTick; // 0x70
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
class CFilterName : public CBaseFilter
{
public:
	CUtlSymbolLarge m_iFilterName; // 0x510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x920
// Has VTable
class CTriggerPingLocation : public CBaseTrigger
{
public:
	ECitadelPingLocation_t m_ePingLocation; // 0x918	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5e8
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_hPayload"
// MNetworkVarNames "int m_nBossesAlive"
// MNetworkVarNames "int m_nBossesMax"
// MNetworkVarNames "EFlexSlotTypes_t m_nFlexSlotsUnlocked"
// MNetworkVarNames "STeamFOWEntity m_vecFOWEntities"
class CCitadelTeam : public CTeam
{
private:
	[[maybe_unused]] uint8_t __pad0570[0x18]; // 0x570
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hPayload; // 0x588	
	// MNetworkEnable
	int32_t m_nBossesAlive; // 0x58c	
	// MNetworkEnable
	int32_t m_nBossesMax; // 0x590	
	// MNetworkEnable
	EFlexSlotTypes_t m_nFlexSlotsUnlocked; // 0x594	
private:
	[[maybe_unused]] uint8_t __pad0596[0x2]; // 0x596
public:
	// MNetworkEnable
	// MNetworkSendProxyRecipientsFilter
	// MNetworkPriority "32"
	CUtlVectorEmbeddedNetworkVar< STeamFOWEntity > m_vecFOWEntities; // 0x598	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_Item_Empty : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_Slork_Raging_Current_Countdown : public CCitadelModifier
{
public:
	ParticleIndex_t m_hAreaEffect; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17a8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Mirage_DjinnsReach_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_RootModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_ChainModifier; // 0x14f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelParticle; // 0x1508	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelStartParticle; // 0x15e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShootParticle; // 0x16c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1518
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_IcePathVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_IcePathModifier; // 0x14e8	
	// MPropertyStartGroup "Gameplay"
	float m_flMomentumDecayRate; // 0x14f8	
	float m_flMomentumWeight; // 0x14fc	
	float m_flMaxPitchChange; // 0x1500	
	float m_flMaxPitchUp; // 0x1504	
	float m_flMaxPitchDown; // 0x1508	
	float m_flMaxHeight; // 0x150c	
	float m_flForwardAngleBias; // 0x1510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_HealthSwapVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SwapParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SwapModifier; // 0x15c8	
	CEmbeddedSubclass< CCitadelModifier > m_PreCastModifier; // 0x15d8	
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x15e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CModifier_SiphonBullets_RestoreHealth : public CCitadelModifier
{
public:
	float m_flHealAmount; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_EscalatingExposureProcWatcher : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_CanDamageMidBoss : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
class CCitadel_Item_SingleTargetStun : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9e8
// Has VTable
// 
// MNetworkVarNames "float m_flInitialRadius"
// MNetworkVarNames "float m_flEndRadius"
// MNetworkVarNames "float m_flProgress"
// MNetworkVarNames "float m_flCaptureTime"
// MNetworkVarNames "EHANDLE m_hUnlockPrereq"
// MNetworkVarNames "bool m_bAvailable"
// MNetworkVarNames "bool m_bIsBeingCaptured"
// MNetworkVarNames "bool m_bIsBeingBlocked"
class CCitadelControlPointTrigger : public CTriggerMultiple
{
public:
	CEntityIOOutput m_OnFullyCaptured; // 0x940	
	CEntityIOOutput m_OnBecomeCapturable; // 0x968	
	// MNetworkEnable
	float m_flInitialRadius; // 0x990	
	// MNetworkEnable
	float m_flEndRadius; // 0x994	
	// MNetworkEnable
	float m_flProgress; // 0x998	
	// MNetworkEnable
	float m_flCaptureTime; // 0x99c	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hUnlockPrereq; // 0x9a0	
	// MNetworkEnable
	bool m_bAvailable; // 0x9a4	
	// MNetworkEnable
	bool m_bIsBeingCaptured; // 0x9a5	
	// MNetworkEnable
	bool m_bIsBeingBlocked; // 0x9a6	
private:
	[[maybe_unused]] uint8_t __pad09a7[0x9]; // 0x9a7
public:
	GameTime_t m_flLastTouchedTime; // 0x9b0	
	Vector m_vecBeamTarget; // 0x9b4	
	Vector m_vecBeamStart; // 0x9c0	
	ParticleIndex_t m_nFXProgressBeam; // 0x9cc	
	CUtlSymbolLarge m_strUnlockPrereq; // 0x9d0	
	CUtlSymbolLarge m_strBeamStart; // 0x9d8	
	CUtlSymbolLarge m_strBeamTarget; // 0x9e0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x838
// Has VTable
class CCitadelPositionHomingProjectile : public CCitadelTrackedProjectile
{
public:
	Vector m_vecHomingPosition; // 0x828	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
class CSpriteOriented : public CSprite
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9c0
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierLastBreathVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShieldParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BulletShieldHitParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TechShieldHitParticle; // 0x7b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x898	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strStartSound; // 0x978	
	CSoundEventName m_ExplodeSound; // 0x988	
	float m_flShieldImpactEffectDuration; // 0x998	
private:
	[[maybe_unused]] uint8_t __pad099c[0x4]; // 0x99c
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BulletShieldImpactModifier; // 0x9a0	
	CEmbeddedSubclass< CCitadelModifier > m_TechShieldImpactModifier; // 0x9b0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x398
// Has VTable
class CCitadel_Modifier_PsychicDagger_MakeDaggers : public CCitadelModifier
{
public:
	int32_t m_iCurrentProjectile; // 0xc8	
	int32_t m_nDaggerCount; // 0xcc	
private:
	[[maybe_unused]] uint8_t __pad00d0[0x230]; // 0xd0
public:
	GameTime_t m_flLastDaggerSpawn; // 0x300	
	GameTime_t m_flLastDaggerShoot; // 0x304	
	bool m_bIsSpawning; // 0x308	
	bool m_bInterrupted; // 0x309	
private:
	[[maybe_unused]] uint8_t __pad030a[0x6]; // 0x30a
public:
	CUtlVector< CCitadel_Modifier_PsychicDagger_MakeDaggers::Dagger_t > m_vecDaggers; // 0x310	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6f0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Bull_Leap_Boosting_CrashVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DragModifier; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CrashTrailParticle; // 0x608	
	// MPropertyStartGroup "Gameplay"
	float m_flCollideRadius; // 0x6e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf88
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flStartWindUpTime"
// MNetworkVarNames "GameTime_t m_flStartFiringTime"
// MNetworkVarNames "bool m_bFiring"
class CCitadel_Ability_PrimaryWeapon_Bebop : public CCitadel_Ability_PrimaryWeapon_BeamWeapon
{
private:
	[[maybe_unused]] uint8_t __pad0b60[0x2a8]; // 0xb60
public:
	// MNetworkEnable
	GameTime_t m_flStartWindUpTime; // 0xe08	
	// MNetworkEnable
	GameTime_t m_flStartFiringTime; // 0xe0c	
	// MNetworkEnable
	bool m_bFiring; // 0xe10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x918
// Has VTable
class CTriggerGravity : public CBaseTrigger
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x940
// Has VTable
class CCitadelPushTrigger : public CTriggerModifier
{
public:
	Vector m_vPush; // 0x928	
	QAngle m_angPushEntitySpace; // 0x934	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x58
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_NeutralCampVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyStartGroup "Gameplay"
	int32_t m_iInitialSpawnDelayInSeconds; // 0x28	
	int32_t m_iSpawnIntervalInSeconds; // 0x2c	
	ENeutralTrooperType m_eNeutralType; // 0x30	
private:
	[[maybe_unused]] uint8_t __pad0034[0x4]; // 0x34
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sIdleAmbient; // 0x38	
	CSoundEventName m_sAlertAmbient; // 0x48	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SleepBombVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BombParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeDamageFriendlyParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeDamageEnemyParticle; // 0x7b8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SleepModifier; // 0x898	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x8a8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_StompDebuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x618
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Surging_PowerVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_BerserkerSound; // 0x5f8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ModifierActiveDisplay; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Neutral_Debuff_PushbackVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Gameplay"
	float m_flPushSpeed; // 0x5f8	
	float m_flPushRange; // 0x5fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa88
// Has VTable
class CCitadel_PointTalker_Idol : public CCitadel_PointTalker
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x918
// Has VTable
class CServerRagdollTrigger : public CBaseTrigger
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e8
// Has VTable
class CInfoDynamicShadowHintBox : public CInfoDynamicShadowHint
{
public:
	Vector m_vBoxMins; // 0x4d0	
	Vector m_vBoxMaxs; // 0x4dc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilitySlorkScaldVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x14e8	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6f0
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierAirLiftGrabVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GrabEffect; // 0x5f8	
	// MPropertyStartGroup "Gameplay"
	float m_flLiftHorizontal; // 0x6d8	
	float m_flLiftHeight; // 0x6dc	
	float m_flFollowDampingFactor; // 0x6e0	
	float m_flFollowDistance; // 0x6e4	
	float m_flAllyGrabCancelTime; // 0x6e8	
	float m_flAllyPossibleStuckDistance; // 0x6ec	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x220
// Has VTable
class CCitadel_Modifier_Tengu_LightningCrash_Fly : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x90]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x230
// Has VTable
class CCitadel_Modifier_Wrecker_Ultimate_GrabEnemy : public CCitadelModifier
{
public:
	bool m_bAddedStasisParticle; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00c9[0x3]; // 0xc9
public:
	Vector m_vHoldOffset; // 0xcc	
	float m_flLastTouchTime; // 0xd8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x358
// Has VTable
class CCitadel_Modifier_FissureWall : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x230]; // 0xc8
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecFissureWallEntities; // 0x2f8	
	CUtlVector< CHandle< CBaseEntity > > m_vecFisureEntitiesHit; // 0x310	
	int32_t m_nSegment; // 0x328	
	Vector m_vPosition; // 0x32c	
	Vector m_vDirection; // 0x338	
	Vector m_vLeft; // 0x344	
	float m_Length; // 0x350	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1610
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_WeaponUpgrade_InstantReloadVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ReloadParticle; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf0
// Has VTable
class CCitadel_Modifier_TeleportToObjective : public CCitadelModifier
{
public:
	Vector m_vDest; // 0xc8	
	QAngle m_angDestAngles; // 0xd4	
	Vector m_vDestVelocity; // 0xe0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x51e0
// Has VTable
class CCitadel_Modifier_PlayerDisconnected : public CCitadelModifier
{
public:
	GameTime_t m_flTimePathUpdated; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x528
// Has VTable
class CPathMover : public CBaseEntity
{
public:
	CUtlVector< CHandle< CMoverPathNode > > m_vecPathNodes; // 0x4b8	
	float m_flPathLength; // 0x4d0	
	bool m_bClosedLoop; // 0x4d4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd28
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flCastTime"
// MNetworkVarNames "bool m_bCrashingDown"
// MNetworkVarNames "bool m_bImpulseApplied"
// MNetworkVarNames "Vector m_vecCrashPosition"
// MNetworkVarNames "Vector m_vecCrashDirection"
class CCitadel_UtilityUpgrade_RocketBooster : public CCitadel_UtilityUpgrade_RocketBoots
{
private:
	[[maybe_unused]] uint8_t __pad0b40[0x4]; // 0xb40
public:
	ParticleIndex_t m_nTargetingParticleIndex; // 0xb44	
	// MNetworkEnable
	// MNetworkChangeCallback "OnCanSlamDownChanged"
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flCastTime; // 0xb48	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bCrashingDown; // 0xb4c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bImpulseApplied; // 0xb4d	
private:
	[[maybe_unused]] uint8_t __pad0b4e[0x2]; // 0xb4e
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vecCrashPosition; // 0xb50	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vecCrashDirection; // 0xb5c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a50
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityPerchedPredatorVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_MineActiveParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CatReappearParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CatEyesParticle; // 0x16a8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeBaseParticle; // 0x1788	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeFriendlyParticle; // 0x1868	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeEnemyParticle; // 0x1948	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x1a28	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ModifierDragEnemy; // 0x1a38	
	// MPropertyStartGroup "Gameplay"
	float m_flOnHitDetonateTimer; // 0x1a48	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_UppercutClipSize : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x38]; // 0xc8
public:
	int32_t m_nPreClipSize; // 0x100	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SpeedBoostVData : public CCitadelModifierVData
{
public:
	float m_flMoveSpeedBoost; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1500
// Has VTable
// 
// MGetKV3ClassDefaults
class CBaseTriggerAbilityVData : public CitadelAbilityVData
{
public:
	// MPropertyDescription "Which ability to fire a MODIFIER_EVENT_ABILITY_TRIGGER_ACTIVATED event to when this ability is triggered"
	CSubclassName< 4 > m_AbilityToTrigger; // 0x14e8	
	// MPropertyDescription "The mimumum amount of time after this ability has become active before the trigger can activate"
	float m_flMinCancelTime; // 0x14f8	
	// MPropertyDescription "Which lesson to associate with activating this ability"
	ECitadelHintFeature m_eHintFeatureToMarkUsedOnTrigger; // 0x14fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityGenericPerson2VData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x128
// Has VTable
class CCitadel_Modifier_PoisonBullet_Poisoned : public CCitadel_Modifier_Sleep
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Afterburn_DOT_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sAfterburnParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Fervor_Bonuses : public CCitadelModifier
{
public:
	ParticleIndex_t m_nBonusesParticle; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CAITestPath : public CPointEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CUtlSymbolLarge m_strNextPath; // 0x4c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a0
// Has VTable
class CCitadel_Modifier_Rutger_Pulse_Aura : public CCitadelModifierAura
{
public:
	float m_flStartRadius; // 0xe8	
	float m_flEndRadius; // 0xec	
	float m_flSpreadDuration; // 0xf0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x968
// Has VTable
class CProjectile_Perched_Predator : public CCitadelProjectile
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecHitEntities; // 0x800	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb80
// Has VTable
class CCitadel_ArmorUpgrade_DoubleJump : public CCitadel_Item
{
public:
	int32_t m_nTickJumped; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_PayloadCarrier : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x850
// Has VTable
class CCitadel_Projectile_WreckingBall : public CCitadelProjectile
{
private:
	[[maybe_unused]] uint8_t __pad0800[0x10]; // 0x800
public:
	bool m_bBroken; // 0x810	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x958
// Has VTable
class CChangeLevel : public CBaseTrigger
{
public:
	CUtlString m_sMapName; // 0x918	
	CUtlString m_sLandmarkName; // 0x920	
	CEntityIOOutput m_OnChangeLevel; // 0x928	
	bool m_bTouched; // 0x950	
	bool m_bNoTouch; // 0x951	
	bool m_bNewChapter; // 0x952	
	bool m_bOnChangeLevelFired; // 0x953	
	
	// Datamap fields:
	// void InputChangeLevel; // 0x0
	// CUtlString map; // 0x7fffffff
	// CUtlString landmark; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9c0
// Has VTable
class CTriggerLerpObject : public CBaseTrigger
{
public:
	CUtlSymbolLarge m_iszLerpTarget; // 0x918	
	CHandle< CBaseEntity > m_hLerpTarget; // 0x920	
private:
	[[maybe_unused]] uint8_t __pad0924[0x4]; // 0x924
public:
	CUtlSymbolLarge m_iszLerpTargetAttachment; // 0x928	
	AttachmentHandle_t m_hLerpTargetAttachment; // 0x930	
private:
	[[maybe_unused]] uint8_t __pad0931[0x3]; // 0x931
public:
	float m_flLerpDuration; // 0x934	
	bool m_bLerpRestoreMoveType; // 0x938	
	bool m_bSingleLerpObject; // 0x939	
private:
	[[maybe_unused]] uint8_t __pad093a[0x6]; // 0x93a
public:
	CUtlVector< lerpdata_t > m_vecLerpingObjects; // 0x940	
	CUtlSymbolLarge m_iszLerpEffect; // 0x958	
	CUtlSymbolLarge m_iszLerpSound; // 0x960	
	bool m_bAttachTouchingObject; // 0x968	
private:
	[[maybe_unused]] uint8_t __pad0969[0x3]; // 0x969
public:
	CHandle< CBaseEntity > m_hEntityToWaitForDisconnect; // 0x96c	
	CEntityIOOutput m_OnLerpStarted; // 0x970	
	CEntityIOOutput m_OnLerpFinished; // 0x998	
	
	// Datamap fields:
	// void CTriggerLerpObjectLerpThink; // 0x0
	// void CTriggerLerpObjectUnsetWaitForEntity; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x940
// Has VTable
class CTriggerSoundscape : public CBaseTrigger
{
public:
	CHandle< CEnvSoundscapeTriggerable > m_hSoundscape; // 0x918	
private:
	[[maybe_unused]] uint8_t __pad091c[0x4]; // 0x91c
public:
	CUtlSymbolLarge m_SoundscapeName; // 0x920	
	CUtlVector< CHandle< CBasePlayerPawn > > m_spectators; // 0x928	
	
	// Datamap fields:
	// void CTriggerSoundscapePlayerUpdateThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CLogicScript : public CPointEntity
{
public:
	// Datamap fields:
	// CUtlString Group00; // 0x7fffffff
	// CUtlString Group01; // 0x7fffffff
	// CUtlString Group02; // 0x7fffffff
	// CUtlString Group03; // 0x7fffffff
	// CUtlString Group04; // 0x7fffffff
	// CUtlString Group05; // 0x7fffffff
	// CUtlString Group06; // 0x7fffffff
	// CUtlString Group07; // 0x7fffffff
	// CUtlString Group08; // 0x7fffffff
	// CUtlString Group09; // 0x7fffffff
	// CUtlString Group10; // 0x7fffffff
	// CUtlString Group11; // 0x7fffffff
	// CUtlString Group12; // 0x7fffffff
	// CUtlString Group13; // 0x7fffffff
	// CUtlString Group14; // 0x7fffffff
	// CUtlString Group15; // 0x7fffffff
	// CUtlString Group16; // 0x7fffffff
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x320
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_BreakablePropHealthPickupVData : public CCitadel_BreakablePropPickupVData
{
public:
	// MPropertyFriendlyName "Max health heal percent"
	// MPropertyDescription "Between 0 and 1 (0 and 100%), what percent of max health should a pickup heal"
	float m_flHealMaxHealthPercent; // 0x318	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_Dust_Storm_Aura_Apply : public CCitadelModifier
{
public:
	float m_flDamagePerTick; // 0xc8	
	bool m_bFirstTick; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierChargedTacklePrepareVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PrepareParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb30
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flParryStartTime"
// MNetworkVarNames "bool m_bAttackParried"
// MNetworkVarNames "GameTime_t m_flParrySuccessTime"
class CCitadel_Ability_MeleeParry : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	GameTime_t m_flParryStartTime; // 0xab0	
	// MNetworkEnable
	bool m_bAttackParried; // 0xab4	
private:
	[[maybe_unused]] uint8_t __pad0ab5[0x3]; // 0xab5
public:
	// MNetworkEnable
	GameTime_t m_flParrySuccessTime; // 0xab8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_BerserkerDamageStack : public CCitadelModifier
{
public:
	ParticleIndex_t m_nBuffParticle; // 0xc8	
	ParticleIndex_t m_nBuffParticleEnemy; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x208
// Has VTable
class CCitadel_Modifier_ExplosiveBullets : public CCitadel_Modifier_BaseBulletPreRollProc
{
private:
	[[maybe_unused]] uint8_t __pad0190[0x70]; // 0x190
public:
	ShotID_t m_BuffedShotId; // 0x200	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
// 
// MNetworkVarNames "AbilityID_t m_SourceAbilityID"
// MNetworkVarNames "AbilityID_t m_TargetAbilityID"
// MNetworkVarNames "EModifierValue m_eValType"
// MNetworkVarNames "float m_flValue"
struct DynamicAbilityValues_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x30]; // 0x0
public:
	// MNetworkEnable
	CUtlStringToken m_SourceAbilityID; // 0x30	
	// MNetworkEnable
	CUtlStringToken m_TargetAbilityID; // 0x34	
	// MNetworkEnable
	EModifierValue m_eValType; // 0x38	
	// MNetworkEnable
	float m_flValue; // 0x3c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
// 
// MNetworkIncludeByName "m_ProviderType"
// MNetworkIncludeByName "m_hOuter"
// MNetworkIncludeByName "m_iReapplyProvisionParity"
// MNetworkIncludeByName "m_Item"
// MNetworkVarNames "CEconItemView m_Item"
class CAttributeContainer : public CAttributeManager
{
public:
	// MNetworkEnable
	CEconItemView m_Item; // 0x68	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x800
// Has VTable
class CCitadel_Projectile_ProximityRitual : public CCitadelProjectile
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_ArmorUpgrade_MetalSkin : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1708
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Spinning_BladeVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x14e8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CatchIndicator; // 0x14f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CatchParticle; // 0x15d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strThrowSound; // 0x16b8	
	CSoundEventName m_strReturnSound; // 0x16c8	
	CSoundEventName m_strCatchSound; // 0x16d8	
	CSoundEventName m_strFailSound; // 0x16e8	
	CSoundEventName m_strHitSound; // 0x16f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1770
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Tengu_AirLiftVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_FlyingModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_GrabModifier; // 0x14f8	
	CEmbeddedSubclass< CCitadelModifier > m_HoldBombModifier; // 0x1508	
	CEmbeddedSubclass< CCitadelModifier > m_DroppedBuffModifier; // 0x1518	
	CEmbeddedSubclass< CCitadelModifier > m_ExplodingAllyModifier; // 0x1528	
	CEmbeddedSubclass< CCitadelModifier > m_AoEModifier; // 0x1538	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_InitialExplodeParticle; // 0x1548	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HoldBombEffect; // 0x1628	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strExplodeSound; // 0x1708	
	// MPropertyStartGroup "Gameplay"
	float m_flAirDrag; // 0x1718	
	float m_flMaxFallSpeed; // 0x171c	
	float m_flTargetAirSpeedFast; // 0x1720	
	float m_flTargetAirSpeedBase; // 0x1724	
	float m_flAcceleration; // 0x1728	
	float m_flDecceleration; // 0x172c	
	float m_flAirSideSpeedPercent; // 0x1730	
	float m_flBoostTime; // 0x1734	
	float m_flBoostSpeedUp; // 0x1738	
	float m_flMinFlyHeight; // 0x173c	
	float m_flMaxFlyHeight; // 0x1740	
	float m_flAllyDelayedBoostTime; // 0x1744	
	float m_flChannelingAirDrag; // 0x1748	
	float m_flChannelingMaxFallSpeed; // 0x174c	
	float m_flBombReleaseSpeed; // 0x1750	
	float m_flBombReleasePitch; // 0x1754	
	float m_flBombDropReleaseOffset; // 0x1758	
	float m_flHoldBombOffsetX; // 0x175c	
	float m_flHoldBombOffsetY; // 0x1760	
	float m_flHoldBombOffsetZ; // 0x1764	
	float m_flAnglePitchBias; // 0x1768	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x898
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ChronoSwap_BubbleMoveVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BeamParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HealParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DamageParticle; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Stabilizing_Tripod_Self_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_Hero_Clone : public CCitadelModifier
{
public:
	bool m_bMimicOwner; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7c8
// Has VTable
class CTriggerBrush : public CBaseModelEntity
{
public:
	CEntityIOOutput m_OnStartTouch; // 0x748	
	CEntityIOOutput m_OnEndTouch; // 0x770	
	CEntityIOOutput m_OnUse; // 0x798	
	int32_t m_iInputFilter; // 0x7c0	
	int32_t m_iDontMessageParent; // 0x7c4	
	
	// Datamap fields:
	// void InputDisable; // 0x0
	// void InputEnable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CCitadelTeleportLocation : public CServerOnlyEntity
{
public:
	int32_t m_iLane; // 0x4b8	
	int32_t m_iObjective; // 0x4bc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x28
// Has VTable
// Has Trivial Destructor
// 
// MNetworkVarNames "HSequence m_hSequence"
// MNetworkVarNames "float32 m_flPrevCycle"
// MNetworkVarNames "float32 m_flCycle"
class CNetworkedSequenceOperation
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkEnable
	// MNetworkSerializer "minusone"
	// MNetworkChangeCallback "sequenceOpSequenceChanged"
	// MNetworkPriority "32"
	HSequence m_hSequence; // 0x8	
	// MNetworkEnable
	// MNetworkBitCount "15"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "1.000000"
	// MNetworkEncodeFlags "8"
	// MNetworkPriority "32"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkUserGroup "m_flCycle"
	float m_flPrevCycle; // 0xc	
	// MNetworkEnable
	// MNetworkBitCount "15"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "1.000000"
	// MNetworkEncodeFlags "8"
	// MNetworkPriority "32"
	// MNetworkSendProxyRecipientsFilter
	// MNetworkUserGroup "m_flCycle"
	float m_flCycle; // 0x10	
	// MNetworkEnable
	// MNetworkBitCount "8"
	// MNetworkMinValue "0.000000"
	// MNetworkMaxValue "1.000000"
	// MNetworkEncodeFlags "0"
	CNetworkedQuantizedFloat m_flWeight; // 0x14	
	// MNetworkDisable
	bool m_bSequenceChangeNetworked; // 0x1c	
	// MNetworkDisable
	bool m_bDiscontinuity; // 0x1d	
private:
	[[maybe_unused]] uint8_t __pad001e[0x2]; // 0x1e
public:
	// MNetworkDisable
	float m_flPrevCycleFromDiscontinuity; // 0x20	
	// MNetworkDisable
	float m_flPrevCycleForAnimEventDetection; // 0x24	
	
	// Datamap fields:
	// CUtlString sequenceName; // 0x7fffffff
	// int32_t sequence; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1028
// Has VTable
class CAI_TestHull : public CAI_BaseNPC
{
public:
	TestHullMode_t m_nHullMode; // 0x1020	
	
	// Static fields:
	static CAI_TestHull* &Get_s_pTestHulls(){return *reinterpret_cast<CAI_TestHull**>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_TestHull")->GetStaticFields()[0]->m_pInstance);};
	static bool &Get_s_bTestHullAcquired(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_TestHull")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Cadence_GrandFinaleAOEVData : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AuraParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CInfoCoverPoint : public CServerOnlyPointEntity
{
public:
	int32_t m_nGroupID; // 0x4b8	
	int32_t m_nVisionRadius; // 0x4bc	
	bool m_bAllowOffNav; // 0x4c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Targetdummy_Inherent : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d0
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityShivDeferDamageVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ActiveCastParticle; // 0x14e8	
	// MPropertyStartGroup "+Defer Properties"
	float m_flDeferredDamageApplicationInterval; // 0x15c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Bebop_Hook_BulletAmp : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x190
// Has VTable
class CCitadel_Modifier_Arcane_Eater_Watcher : public CCitadel_Modifier_StatStealBase
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Weapon_BossTier3 : public CTier3BossAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5d8
// Has VTable
class CNPCMaker : public CBaseNPCMaker
{
public:
	CUtlSymbolLarge m_iszNPCSubClass; // 0x5b0	
	CUtlSymbolLarge m_iszSquadName; // 0x5b8	
	CUtlSymbolLarge m_iszHintGroup; // 0x5c0	
	CUtlSymbolLarge m_RelationshipString; // 0x5c8	
	CUtlSymbolLarge m_ChildTargetName; // 0x5d0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5c0
// Has VTable
class CTemplateNPCMaker : public CBaseNPCMaker
{
public:
	CUtlSymbolLarge m_iszWorldName; // 0x5b0	
	CUtlSymbolLarge m_iszSource2EntityLumpName; // 0x5b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityLashUltimateVData : public CBaseLockonAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TargetPreviewParticle; // 0x1508	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaunchParticle; // 0x15e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_UltimateCastParticle; // 0x16c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_UltimateCastEnemyParticle; // 0x17a8	
	// MPropertyStartGroup "Animation"
	// MPropertyLeafSuggestionProviderFn
	CGlobalSymbol m_strThrowEnemyAnimGraphParam; // 0x1888	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadel_Modifier_LashGrappleEnemy_Debuff > m_GrappleEnemyModifier; // 0x1890	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_GrabSound; // 0x18a0	
	CSoundEventName m_MissSound; // 0x18b0	
	CSoundEventName m_ThrowSound; // 0x18c0	
	// MPropertyStartGroup "+Ultimate Properties"
	float m_flAirSpeedMax; // 0x18d0	
	float m_flFallSpeedMax; // 0x18d4	
	float m_flAirDrag; // 0x18d8	
	float m_flMaxPitchRangeScale; // 0x18dc	
	float m_flThrowAnimTossPoint; // 0x18e0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9a8
// Has VTable
// 
// MNetworkVarNames "char m_messageText"
// MNetworkVarNames "char m_FontName"
// MNetworkVarNames "bool m_bEnabled"
// MNetworkVarNames "bool m_bFullbright"
// MNetworkVarNames "float m_flWorldUnitsPerPx"
// MNetworkVarNames "float m_flFontSize"
// MNetworkVarNames "float m_flDepthOffset"
// MNetworkVarNames "Color m_Color"
// MNetworkVarNames "PointWorldTextJustifyHorizontal_t m_nJustifyHorizontal"
// MNetworkVarNames "PointWorldTextJustifyVertical_t m_nJustifyVertical"
// MNetworkVarNames "PointWorldTextReorientMode_t m_nReorientMode"
class CPointWorldText : public CModelPointEntity
{
public:
	// MNetworkEnable
	char m_messageText[512]; // 0x748	
	// MNetworkEnable
	char m_FontName[64]; // 0x948	
	// MNetworkEnable
	bool m_bEnabled; // 0x988	
	// MNetworkEnable
	bool m_bFullbright; // 0x989	
private:
	[[maybe_unused]] uint8_t __pad098a[0x2]; // 0x98a
public:
	// MNetworkEnable
	float m_flWorldUnitsPerPx; // 0x98c	
	// MNetworkEnable
	float m_flFontSize; // 0x990	
	// MNetworkEnable
	float m_flDepthOffset; // 0x994	
	// MNetworkEnable
	Color m_Color; // 0x998	
	// MNetworkEnable
	PointWorldTextJustifyHorizontal_t m_nJustifyHorizontal; // 0x99c	
	// MNetworkEnable
	PointWorldTextJustifyVertical_t m_nJustifyVertical; // 0x9a0	
	// MNetworkEnable
	PointWorldTextReorientMode_t m_nReorientMode; // 0x9a4	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void InputToggle; // 0x0
	// CUtlSymbolLarge InputSetMessage; // 0x0
	// int32_t InputSetIntMessage; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f0
// Has VTable
// 
// MNetworkVarNames "Vector m_vMin"
// MNetworkVarNames "Vector m_vMax"
class CSoundAreaEntityOrientedBox : public CSoundAreaEntityBase
{
public:
	// MNetworkEnable
	Vector m_vMin; // 0x4d8	
	// MNetworkEnable
	Vector m_vMax; // 0x4e4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CModifier_Synth_Grasp_Caster : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xaf0
// Has VTable
// 
// MNetworkVarNames "bool m_bActive"
class CCitadel_Ability_RiotProtocol : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_ChargeUpParticle; // 0xab0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bActive; // 0xab4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ThrowSandProjectileVData : public CCitadel_Modifier_Intrinsic_BaseVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Intimidated_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x618
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Astro_Rifle_DebuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strTargetHitSound; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1668
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Upgrade_MagicCarpetVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SummonParticle; // 0x1530	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_FlyingCarpetModifier; // 0x1610	
	CEmbeddedSubclass< CCitadelModifier > m_SummonFlyingCarpetModifier; // 0x1620	
	CEmbeddedSubclass< CCitadelModifier > m_SummonFlyingCarpetVisualModifier; // 0x1630	
	CEmbeddedSubclass< CCitadelModifier > m_FlyingCarpetVisualModifier; // 0x1640	
	// MPropertyStartGroup "Gameplay"
	float m_flSummonVisualDuration; // 0x1650	
	float m_flBurstSpeedBonus; // 0x1654	
	float m_flBurstSpeedMin; // 0x1658	
	float m_flBurstSpeedDuration; // 0x165c	
	float m_flMinDistanceAboveGround; // 0x1660	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1d0
// Has VTable
class CCitadel_Modifier_FullSpectrum : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1c8
// Has VTable
class CCitadel_Modifier_Tier3Boss_LaserBeam : public CCitadel_Modifier_Tier3Boss_Base
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x8]; // 0xc8
public:
	GameTime_t m_flSoundStartTime; // 0xd0	
private:
	[[maybe_unused]] uint8_t __pad00d4[0x4]; // 0xd4
public:
	Vector m_vStart; // 0xd8	
	Vector m_vEnd; // 0xe4	
	Vector m_vPrevEnd; // 0xf0	
	float m_flAngleBetweenTrace; // 0xfc	
	float m_flPlayerDamagePerTick; // 0x100	
	float m_flNPCDamagePerTick; // 0x104	
	GameTime_t m_flNextDamageTick; // 0x108	
private:
	[[maybe_unused]] uint8_t __pad010c[0x4]; // 0x10c
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecEntitiesHit; // 0x110	
	float m_flDamageTickRate; // 0x128	
	GameTime_t m_flLastShakeTime; // 0x12c	
	bool m_bSweepRightFirst; // 0x130	
private:
	[[maybe_unused]] uint8_t __pad0131[0x3]; // 0x131
public:
	Vector m_vecBeamTarget; // 0x134	
	GameTime_t m_flLastBeamUpdateTime; // 0x140	
	Vector m_vecEnemyPosition; // 0x144	
	int32_t m_nTrackingIndex; // 0x150	
	bool m_bPreviewMode; // 0x154	
	AttachmentHandle_t m_hAttachment; // 0x155	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x220
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_vecProviders"
// MNetworkVarNames "uint32 m_nDisabledGroups"
// MNetworkVarNames "uint32 m_bvEnabledStateMask"
// MNetworkVarNames "uint32 m_bvDisabledStateMask"
// MNetworkVarNames "uint32 m_bvEnabledPredictedStateMask"
class CModifierProperty
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// MNetworkDisable
	// MNetworkChangeAccessorFieldPathIndex
	CNetworkVarChainer __m_pChainEntity; // 0x8	
	CHandle< CBaseEntity > m_hOwner; // 0x30	
private:
	[[maybe_unused]] uint8_t __pad0034[0x15e]; // 0x34
public:
	uint8_t m_nProviderVisitedFlags; // 0x192	
	bool m_bModifierStatesDirty; // 0x193	
	bool m_bPredictedOwner; // 0x194	
	int8_t m_iLockRefCount; // 0x195	
private:
	[[maybe_unused]] uint8_t __pad0196[0x2]; // 0x196
public:
	ModifierPropRuntimeHandle_t m_hHandle; // 0x198	
private:
	[[maybe_unused]] uint8_t __pad019a[0x2]; // 0x19a
public:
	uint32_t m_nBroadcastEventListenerMask; // 0x19c	
private:
	[[maybe_unused]] uint8_t __pad01a0[0x8]; // 0x1a0
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< CHandle< CBaseEntity > > m_vecProviders; // 0x1a8	
	// MNetworkEnable
	uint32_t m_nDisabledGroups; // 0x1c0	
	// MNetworkEnable
	// MNetworkChangeCallback "modifierStatesChanged"
	uint32_t m_bvEnabledStateMask[6]; // 0x1c4	
	// MNetworkEnable
	// MNetworkChangeCallback "modifierStatesChanged"
	uint32_t m_bvDisabledStateMask[6]; // 0x1dc	
	// MNetworkEnable
	// MNetworkChangeCallback "modifierStatesChanged"
	uint32_t m_bvEnabledPredictedStateMask[6]; // 0x1f4	
private:
	[[maybe_unused]] uint8_t __pad020c[0xc]; // 0x20c
public:
	bool m_bParentWantsModifierStateChangeCallback; // 0x218	
	
	// Datamap fields:
	// void m_pNotifyOwnerEvents; // 0x1a0
	// void m_vecModifiers; // 0x38
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d0
// Has VTable
// 
// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iMaxHealth"
class CNPC_FlyingDrone : public CAI_CitadelNPC
{
public:
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_DRONE_FOLLOW_TARGET(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_FlyingDrone")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_DRONE_TELEPORT_TO_FOLLOW_TARGET(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_FlyingDrone")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_DRONE_TELEPORT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_FlyingDrone")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_DRONE_FOLLOW_TARGET(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_FlyingDrone")->GetStaticFields()[3]->m_pInstance);};
	static ConditionId_t &Get_COND_DRONE_LOST_TARGET(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_FlyingDrone")->GetStaticFields()[4]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x978
// Has VTable
// 
// MNetworkVarNames "float m_gravityScale"
// MNetworkVarNames "float m_linearLimit"
// MNetworkVarNames "float m_linearDamping"
// MNetworkVarNames "float m_angularLimit"
// MNetworkVarNames "float m_angularDamping"
// MNetworkVarNames "float m_linearForce"
// MNetworkVarNames "float m_flFrequency"
// MNetworkVarNames "float m_flDampingRatio"
// MNetworkVarNames "Vector m_vecLinearForcePointAt"
// MNetworkVarNames "bool m_bCollapseToForcePoint"
// MNetworkVarNames "Vector m_vecLinearForcePointAtWorld"
// MNetworkVarNames "Vector m_vecLinearForceDirection"
// MNetworkVarNames "bool m_bConvertToDebrisWhenPossible"
class CTriggerPhysics : public CBaseTrigger
{
private:
	[[maybe_unused]] uint8_t __pad0918[0x10]; // 0x918
public:
	// MNetworkEnable
	float m_gravityScale; // 0x928	
	// MNetworkEnable
	float m_linearLimit; // 0x92c	
	// MNetworkEnable
	float m_linearDamping; // 0x930	
	// MNetworkEnable
	float m_angularLimit; // 0x934	
	// MNetworkEnable
	float m_angularDamping; // 0x938	
	// MNetworkEnable
	float m_linearForce; // 0x93c	
	// MNetworkEnable
	float m_flFrequency; // 0x940	
	// MNetworkEnable
	float m_flDampingRatio; // 0x944	
	// MNetworkEnable
	Vector m_vecLinearForcePointAt; // 0x948	
	// MNetworkEnable
	bool m_bCollapseToForcePoint; // 0x954	
private:
	[[maybe_unused]] uint8_t __pad0955[0x3]; // 0x955
public:
	// MNetworkEnable
	Vector m_vecLinearForcePointAtWorld; // 0x958	
	// MNetworkEnable
	Vector m_vecLinearForceDirection; // 0x964	
	// MNetworkEnable
	bool m_bConvertToDebrisWhenPossible; // 0x970	
	
	// Datamap fields:
	// void m_pController; // 0x920
	// CUtlSymbolLarge InputSetLinearForcePointAt; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1c8
// Has VTable
class CCitadel_Modifier_TenguUrn_Aura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe8
// Has VTable
class CGameModifier_OverrideTargetIdentifier : public CCitadelModifier
{
public:
	CGlobalSymbol m_sTargetIdentifier; // 0xc8	
	CHandle< CBaseEntity > m_hTarget; // 0xd0	
private:
	[[maybe_unused]] uint8_t __pad00d4[0x4]; // 0xd4
public:
	CGlobalSymbol m_sAttachmentName; // 0xd8	
	AttachmentHandle_t m_hAttachment; // 0xe0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_NeutralShield : public CCitadelModifier
{
public:
	float m_flShieldActivateDelay; // 0xc8	
	GameTime_t m_timeEnemyDisappeared; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_FealtyTarget : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1680
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_RocketBarrageVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BarrageModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_MoveSlowModifier; // 0x14f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x1508	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x15e8	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceSelected; // 0x15f8	
	// MPropertyStartGroup "+Rocket Barrage Properties"
	float m_flMoveSpeedReductionPct; // 0x1678	
	float m_flHeightTestDistance; // 0x167c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_IncendiaryDebuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7d0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_XPOrbVData : public CEntitySubclassVDataBase
{
public:
	bool m_bIsObjective; // 0x28	
private:
	[[maybe_unused]] uint8_t __pad0029[0x7]; // 0x29
public:
	// MPropertyStartGroup "Sounds"
	// MPropertyDescription "Played to the player who claimed the orb."
	CSoundEventName m_strOrbClaimed; // 0x30	
	// MPropertyDescription "Played to the teammates of the player who claimed the orb."
	CSoundEventName m_strOrbClaimedTeammate; // 0x40	
	// MPropertyDescription "Played to the player when they denied an enemy orb."
	CSoundEventName m_strOrbDenied; // 0x50	
	// MPropertyDescription "Played to assigned earners when an enemy denied their orb."
	CSoundEventName m_strOrbDeniedPlayer; // 0x60	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_sOrbModel; // 0x70	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sFriendlyGlowParticle; // 0x150	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sEnemyGlowParticle; // 0x230	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sGoldReceivedParticle; // 0x310	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sFriendlyOrbDeniedParticle; // 0x3f0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sEnemyOrbDeniedParticle; // 0x4d0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sFriendlyOrbEarnedParticle; // 0x5b0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_sEnemyOrbEarnedParticle; // 0x690	
	// MPropertyStartGroup "Behavior"
	float m_flOrbSpawnDelayMin; // 0x770	
	float m_flOrbSpawnDelayMax; // 0x774	
	float m_flOrbSpawnOffsetZ; // 0x778	
	float m_flOrbSpawnOffsetRandomXYZ; // 0x77c	
	float m_flGravityScale; // 0x780	
	float m_flLateralSpeedMin; // 0x784	
	float m_flLateralSpeedMax; // 0x788	
	float m_flLateralMoveDuration; // 0x78c	
	float m_flUpSpeedMin; // 0x790	
	float m_flUpSpeedMax; // 0x794	
	float m_flBurstSpeedMultiplier; // 0x798	
	float m_flBurstSpeedDuration; // 0x79c	
	float m_flOscillateFrequency; // 0x7a0	
	float m_flLifeTime; // 0x7a4	
	float m_flCollisionRadius; // 0x7a8	
	bool m_bUseKillerPlaneOffsets; // 0x7ac	
private:
	[[maybe_unused]] uint8_t __pad07ad[0x3]; // 0x7ad
public:
	float m_flKillerPlaneOffset; // 0x7b0	
	float m_flKillerPlaneHorizontalDecayRate; // 0x7b4	
	float m_flKillerPlaneHorizontalSpeedX; // 0x7b8	
	float m_flKillerPlaneHorizontalSpeedY; // 0x7bc	
	float m_flKillerPlaneVerticalSpeed; // 0x7c0	
	float m_flKillerPlaneSpeedNoise; // 0x7c4	
	float m_flKillerPlaneLaunchOffset; // 0x7c8	
	float m_flKillerPlaneLaunchDelay; // 0x7cc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x48
// Has VTable
// 
// MNetworkVarNames "CUtlStringToken m_ID"
// MNetworkVarNames "Vector4D m_Values"
struct EntityRenderAttribute_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x30]; // 0x0
public:
	// MNetworkEnable
	CUtlStringToken m_ID; // 0x30	
	// MNetworkEnable
	Vector4D m_Values; // 0x34	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
class CNodeEnt_InfoNodeAir : public CNodeEnt
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CPointBroadcastClientCommand : public CPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5318
// Has VTable
class CCitadelPlayerBot
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x5318]; // 0x0
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTargetdummy3VData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc88
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flStartTime"
// MNetworkVarNames "GameTime_t m_flLandedTime"
// MNetworkVarNames "bool m_bLanded"
// MNetworkVarNames "bool m_bFalling"
// MNetworkVarNames "bool m_bInStoneForm"
// MNetworkVarNames "float m_flStartHeight"
class CCitadel_Ability_Tengu_StoneForm : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x1c0]; // 0xab0
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flStartTime; // 0xc70	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flLandedTime; // 0xc74	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bLanded; // 0xc78	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bFalling; // 0xc79	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bInStoneForm; // 0xc7a	
private:
	[[maybe_unused]] uint8_t __pad0c7b[0x1]; // 0xc7b
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	float m_flStartHeight; // 0xc7c	
	ParticleIndex_t m_nStoneFormEffect; // 0xc80	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CModifier_CheatDeathImmunity : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf8
// Has VTable
class CCitadel_Modifier_Cadence_Crescendo_AOE : public CCitadelModifierAura
{
private:
	[[maybe_unused]] uint8_t __pad00e8[0x8]; // 0xe8
public:
	int32_t m_nTicks; // 0xf0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x950
// Has VTable
class CInWorldKeyBindPanel : public CPointClientUIWorldPanel
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x888
// Has VTable
class CFuncShatterglass : public CBaseModelEntity
{
public:
	matrix3x4_t m_matPanelTransform; // 0x748	
	matrix3x4_t m_matPanelTransformWsTemp; // 0x778	
	CUtlVector< uint32 > m_vecShatterGlassShards; // 0x7a8	
	Vector2D m_PanelSize; // 0x7c0	
	GameTime_t m_flLastShatterSoundEmitTime; // 0x7c8	
	GameTime_t m_flLastCleanupTime; // 0x7cc	
	GameTime_t m_flInitAtTime; // 0x7d0	
	float m_flGlassThickness; // 0x7d4	
	float m_flSpawnInvulnerability; // 0x7d8	
	bool m_bBreakSilent; // 0x7dc	
	bool m_bBreakShardless; // 0x7dd	
	bool m_bBroken; // 0x7de	
	bool m_bGlassNavIgnore; // 0x7df	
	bool m_bGlassInFrame; // 0x7e0	
	bool m_bStartBroken; // 0x7e1	
	uint8_t m_iInitialDamageType; // 0x7e2	
private:
	[[maybe_unused]] uint8_t __pad07e3[0x5]; // 0x7e3
public:
	CUtlSymbolLarge m_szDamagePositioningEntityName01; // 0x7e8	
	CUtlSymbolLarge m_szDamagePositioningEntityName02; // 0x7f0	
	CUtlSymbolLarge m_szDamagePositioningEntityName03; // 0x7f8	
	CUtlSymbolLarge m_szDamagePositioningEntityName04; // 0x800	
	CUtlVector< Vector > m_vInitialDamagePositions; // 0x808	
	CUtlVector< Vector > m_vExtraDamagePositions; // 0x820	
	CUtlVector< Vector4D > m_vInitialPanelVertices; // 0x838	
	CEntityIOOutput m_OnBroken; // 0x850	
	uint8_t m_iSurfaceType; // 0x878	
private:
	[[maybe_unused]] uint8_t __pad0879[0x7]; // 0x879
public:
	CStrongHandle< InfoForResourceTypeIMaterial2 > m_hMaterialDamageBase; // 0x880	
	
	// Datamap fields:
	// void CFuncShatterglassGlassThink; // 0x0
	// void InputHit; // 0x0
	// void InputShatter; // 0x0
	// void InputRestore; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x918
// Has VTable
class CRotButton : public CBaseButton
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x578
// Has VTable
// 
// MNetworkVarNames "float m_flRadius"
class CSoundEventSphereEntity : public CSoundEventEntity
{
public:
	// MNetworkEnable
	float m_flRadius; // 0x570	
	
	// Datamap fields:
	// void CSoundEventSphereEntitySoundEventSphereThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1518
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbility_Synth_Grasp_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_CasterModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_VictimModifier; // 0x14f8	
	CEmbeddedSubclass< CCitadelModifier > m_BulletShieldModifier; // 0x1508	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb98
// Has VTable
// 
// MNetworkVarNames "bool m_bInFlight"
class CCitadel_Ability_Tokamak_DyingStar : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_nRollFXIndex; // 0xab0	
	// MNetworkEnable
	bool m_bInFlight; // 0xab4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Cadence_SleepingVData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xba8
// Has VTable
class CCitadel_Ability_IceGrenade : public CCitadelBaseAbility
{
public:
	Vector m_vLaunchPosition; // 0xab0	
	QAngle m_qLaunchAngle; // 0xabc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1c0
// Has VTable
class CCitadel_Modifier_ChargePullEnemy : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xe0]; // 0xc8
public:
	Vector m_vecOffsetDir; // 0x1a8	
	float m_flTackleRadius; // 0x1b4	
	float m_flPullTargetSpeed; // 0x1b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_SlowingTech_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Quarantine : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x110
// Has VTable
class CCitadel_Modifier_ShieldTracker_Bullet : public CCitadel_Modifier_ShieldTracker_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1f8
// Has VTable
class CCitadel_Modifier_IceBeam_Stacking_Slow : public CCitadel_Modifier_Base_Buildup
{
private:
	[[maybe_unused]] uint8_t __pad00d8[0x118]; // 0xd8
public:
	float m_flCurrBuildup; // 0x1f0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x900
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_hActivator"
class CPointClientUIDialog : public CBaseClientUIEntity
{
public:
	// MNetworkEnable
	// MNetworkChangeCallback "OnDialogActivatorChanged"
	CHandle< CBaseEntity > m_hActivator; // 0x8f8	
	bool m_bStartEnabled; // 0x8fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CEnvSplash : public CPointEntity
{
public:
	float m_flScale; // 0x4b8	
	
	// Datamap fields:
	// void InputSplash; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityRocketLauncherVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplosionParticle; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Warden_CrowdControl_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc10
// Has VTable
class CCitadel_Ability_Nano_Warp : public CCitadelBaseAbility
{
public:
	Vector m_vTeleportTarget; // 0xab0	
	ParticleIndex_t m_ChannelParticle; // 0xabc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc78
// Has VTable
// 
// MNetworkVarNames "CCitadelAutoScaledTime m_flDashEndTime"
// MNetworkVarNames "bool m_bIsSpeedBursting"
class CCitadel_Ability_FlameDash : public CCitadelBaseAbility
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecHitEntities; // 0xab0	
	// MNetworkEnable
	CCitadelAutoScaledTime m_flDashEndTime; // 0xac8	
	// MNetworkEnable
	bool m_bIsSpeedBursting; // 0xae0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ArcaneEaterDebuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_Inhibitor_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x558
// Has VTable
// 
// MNetworkVarNames "sky3dparams_t m_skyboxData"
// MNetworkVarNames "CUtlStringToken m_skyboxSlotToken"
class CSkyCamera : public CBaseEntity
{
public:
	// MNetworkEnable
	// -> scale - 0x4c0
	// -> origin - 0x4c4
	// -> bClip3DSkyBoxNearToWorldFar - 0x4d0
	// -> flClip3DSkyBoxNearToWorldFarOffset - 0x4d4
	// -> fog - 0x4d8
	// -> m_nWorldGroupID - 0x540
	sky3dparams_t m_skyboxData; // 0x4b8	
	// MNetworkEnable
	CUtlStringToken m_skyboxSlotToken; // 0x548	
	bool m_bUseAngles; // 0x54c	
private:
	[[maybe_unused]] uint8_t __pad054d[0x3]; // 0x54d
public:
	CSkyCamera* m_pNext; // 0x550	
	
	// Datamap fields:
	// int16_t m_skyboxData.scale; // 0x4c0
	// Vector m_skyboxData.origin; // 0x4c4
	// bool m_skyboxData.bClip3DSkyBoxNearToWorldFar; // 0x4d0
	// float m_skyboxData.flClip3DSkyBoxNearToWorldFarOffset; // 0x4d4
	// bool m_skyboxData.fog.enable; // 0x53c
	// bool m_skyboxData.fog.blend; // 0x53d
	// Vector m_skyboxData.fog.dirPrimary; // 0x4e0
	// Color m_skyboxData.fog.colorPrimary; // 0x4ec
	// Color m_skyboxData.fog.colorSecondary; // 0x4f0
	// float m_skyboxData.fog.start; // 0x4fc
	// float m_skyboxData.fog.end; // 0x500
	// float m_skyboxData.fog.maxdensity; // 0x508
	// void InputActivateSkybox; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BreakablePropClipSizePickupVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Powerup Values"
	float m_flClipSize; // 0x5f8	
	int32_t m_nClipCount; // 0x5fc	
	float m_flFireRate; // 0x600	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17a8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityHatTrickVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SpectatingProjectileParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplosionParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HatTrickChannelParticle; // 0x16a8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x1788	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strExplodeSound; // 0x1798	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x250
// Has VTable
class CCitadel_Modifier_VoidSphere : public CCitadelModifier
{
public:
	bool m_bTeleported; // 0xc8	
private:
	[[maybe_unused]] uint8_t __pad00c9[0x3]; // 0xc9
public:
	ParticleIndex_t m_particleStart; // 0xcc	
	ParticleIndex_t m_particleEnd; // 0xd0	
	ParticleIndex_t m_particleTrail; // 0xd4	
	Vector m_vecEndLocation; // 0xd8	
	Vector m_vecStartPosition; // 0xe4	
	Vector m_vecEndLocationCaster; // 0xf0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x978
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ZiplineKnockdownImmuneVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZipLineEnemyKnockdownProtectionParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZipLineSelfKnockdownProtectionParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZipLineKnockdownProtectionStatusParticle; // 0x7b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ZipLineKnockdownProtectionStatusEnemyParticle; // 0x898	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_Upgrade_OverdriveClip_Reload : public CCitadelModifier
{
public:
	int32_t m_nStartingClipSize; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x918
// Has VTable
class CRegenerateZone : public CBaseTrigger
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x520
// Has VTable
class CPointCameraVFOV : public CPointCamera
{
public:
	float m_flVerticalFOV; // 0x518	
	
	// Datamap fields:
	// float m_flDofFarCrisp; // 0x4f8
	// float m_flDofFarBlurry; // 0x4fc
	// float m_flDofTiltToGround; // 0x500
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1b20
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelAbilityFlyingStrikeVData : public CCitadelYamatoBaseVData
{
public:
	// MPropertyStartGroup "+Cast Properties"
	float m_flJumpFallSpeedMax; // 0x14f0	
	float m_flJumpAirDrag; // 0x14f4	
	float m_flJumpAirSpeedMax; // 0x14f8	
	// MPropertyStartGroup "+Dash Properties"
	float m_flDashSpeed; // 0x14fc	
	float m_flDashCloseEnoughToTarget; // 0x1500	
	float m_flDashLockOntoTargetDist; // 0x1504	
	float m_flTargetMinSpeedToStopChasing; // 0x1508	
	float m_flVelocityTurnSpringStrength; // 0x150c	
	CRemapFloat m_flAngleToSpeedScale; // 0x1510	
	// MPropertyStartGroup "+Attack Properties"
	float m_flAnimToStrikePointTime; // 0x1520	
	// MPropertyStartGroup "+Grapple Properties"
	float m_flGrappleShotFloatTime; // 0x1524	
	float m_flGrappleShotDelayToFlyOnHit; // 0x1528	
	float m_flGrappleSpeed; // 0x152c	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_SlowModifier; // 0x1530	
	CEmbeddedSubclass< CBaseModifier > m_GrappleTargetModifier; // 0x1540	
	CEmbeddedSubclass< CBaseModifier > m_WeaponBuffModifier; // 0x1550	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LeapParticle; // 0x1560	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x1640	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SlashParticle; // 0x1720	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BulletGrappleTracerParticle; // 0x1800	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EnemyGrappleParticle; // 0x18e0	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strDamageTarget; // 0x19c0	
	CSoundEventName m_strStartDash; // 0x19d0	
	CSoundEventName m_strStartAttack; // 0x19e0	
	CSoundEventName m_strGrappleHitTarget; // 0x19f0	
	CSoundEventName m_strGrappleHitWorld; // 0x1a00	
	CSoundEventName m_strGrappleHitNothing; // 0x1a10	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceFlying; // 0x1a20	
	CitadelCameraOperationsSequence_t m_cameraSequenceAttacking; // 0x1aa0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_FlyingStrikeTarget : public CCitadel_Modifier_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16f0
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityGooGrenadeVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_GooGrenadeImpactModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_GooGrenadePuddleAuraModifier; // 0x14f8	
	// MPropertyStartGroup "Particles"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GooGrenadeSkipParticle; // 0x1508	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GooGrenadeExplodeParticle; // 0x15e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_GrenadeHitImpactSound; // 0x16c8	
	CSoundEventName m_GrenadeMissImpactSound; // 0x16d8	
	// MPropertyStartGroup "BounceSettings"
	float m_flMinRestitution; // 0x16e8	
	float m_flMaxRestitution; // 0x16ec	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_FireBombVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x14e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplodeSound; // 0x15c8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ProgressBarModifier; // 0x15d8	
	CEmbeddedSubclass< CCitadelModifier > m_FireBombModifier; // 0x15e8	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x15f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Tier3_DamagePulse : public CCitadel_Modifier_Tier3Boss_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_timeLastUpdate"
// MNetworkVarNames "STrooperFOWEntity m_vecFOWEntities"
class CCitadelTrooperMinimap : public CBaseEntity
{
public:
	// MNetworkEnable
	// MNetworkPriority "32"
	GameTime_t m_timeLastUpdate; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	// MNetworkEnable
	// MNetworkPriority "32"
	CUtlVectorEmbeddedNetworkVar< STrooperFOWEntity > m_vecFOWEntities; // 0x4c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x958
// Has VTable
class CWaterBullet : public CBaseAnimGraph
{
public:
	// Datamap fields:
	// Vector bullet_direction; // 0x7fffffff
	// void CWaterBulletBulletThink; // 0x0
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_Item_DPS_Aura : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x788
// Has VTable
class CSimpleMarkupVolumeTagged : public CMarkupVolumeTagged
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x500
// Has VTable
class CMessage : public CPointEntity
{
public:
	CUtlSymbolLarge m_iszMessage; // 0x4b8	
	float m_MessageVolume; // 0x4c0	
	int32_t m_MessageAttenuation; // 0x4c4	
	float m_Radius; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04cc[0x4]; // 0x4cc
public:
	CUtlSymbolLarge m_sNoise; // 0x4d0	
	CEntityIOOutput m_OnShowMessage; // 0x4d8	
	
	// Datamap fields:
	// void InputShowMessage; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x508
// Has VTable
// 
// MNetworkVarNames "bool m_bEnabled"
class CLogicGameEventListener : public CLogicalEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x10]; // 0x4b8
public:
	CEntityIOOutput m_OnEventFired; // 0x4c8	
	CUtlSymbolLarge m_iszGameEventName; // 0x4f0	
	CUtlSymbolLarge m_iszGameEventItem; // 0x4f8	
	// MNetworkEnable
	bool m_bEnabled; // 0x500	
	bool m_bStartDisabled; // 0x501	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void InputToggle; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Mirage_FireBeetles_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_CasterModifier; // 0x15c8	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x15d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplosionSound; // 0x15e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTargetdummy4VData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SleepDagger_Drowsy_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SleepModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa78
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierIcePathVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_FrontModel; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_BodyModel; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GroundParticle; // 0x7b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FloatingParticle; // 0x898	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_IcePathBuffParticle; // 0x978	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_FriendlyAuraModifier; // 0xa58	
	CEmbeddedSubclass< CCitadelModifier > m_BonusSpiritLingerModifier; // 0xa68	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_VitalitySuppressor : public CCitadelModifier
{
public:
	GameTime_t m_flLastTickTime; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SlowVData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14
// Has Trivial Destructor
struct COrbSpawner__Bounty_t
{
public:
	int32_t m_nGoldToGive; // 0x0	
	int32_t m_nNumOrbs; // 0x4	
	EDenyDistributionType m_eDenyType; // 0x8	
	ECurrencySource m_eSource; // 0xc	
	CHandle< CCitadelPlayerPawn > m_hTarget; // 0x10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x120
// Has VTable
class CCitadel_Item_Discord_Aura_Enemy : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_ItemPickupPunchable : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x820
// Has VTable
class CPushable : public CBreakable
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_Slork_Riptide : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb00
// Has VTable
class CCitadel_Slork_Raging_Current : public CCitadelBaseAbility
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecMarkedTargets; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Rutger_CheatDeath : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb58
// Has VTable
class CCitadel_Ability_Tokamak_Breach : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc38
// Has VTable
// 
// MNetworkVarNames "CCitadelAutoScaledTime m_flGroundDashJumpStartTime"
// MNetworkVarNames "CCitadelAutoScaledTime m_flGroundDashJumpEndTime"
// MNetworkVarNames "Vector m_vecLeapVelocity"
// MNetworkVarNames "bool m_bJumped"
// MNetworkVarNames "bool m_bCanDashJump"
// MNetworkVarNames "int m_nDesiredAirJumpCount"
// MNetworkVarNames "int m_nExecutedAirJumpCount"
// MNetworkVarNames "bool m_bInSlideJump"
// MNetworkVarNames "int8 m_nConsecutiveAirJumps"
class CCitadel_Ability_Jump : public CCitadelBaseAbility
{
public:
	GameTime_t m_flLastTimeOnZipLine; // 0xab0	
	GameTime_t m_flLastOnGroundTime; // 0xab4	
	GameTime_t m_flPhaseStartTime; // 0xab8	
	GameTime_t m_flJumpTime; // 0xabc	
	bool m_bLastJumpWasDashJump; // 0xac0	
	bool m_bShouldCreateAirJumpEffects; // 0xac1	
private:
	[[maybe_unused]] uint8_t __pad0ac2[0x2]; // 0xac2
public:
	GameTime_t m_flDoubleJumpFailTime; // 0xac4	
	ECitadelAbilityOrders m_eDoubleJumpFailReason; // 0xac8	
private:
	[[maybe_unused]] uint8_t __pad0acc[0x11c]; // 0xacc
public:
	// MNetworkEnable
	CCitadelAutoScaledTime m_flGroundDashJumpStartTime; // 0xbe8	
	// MNetworkEnable
	CCitadelAutoScaledTime m_flGroundDashJumpEndTime; // 0xc00	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vecLeapVelocity; // 0xc18	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bJumped; // 0xc24	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bCanDashJump; // 0xc25	
private:
	[[maybe_unused]] uint8_t __pad0c26[0x2]; // 0xc26
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	int32_t m_nDesiredAirJumpCount; // 0xc28	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	int32_t m_nExecutedAirJumpCount; // 0xc2c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bInSlideJump; // 0xc30	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	int8_t m_nConsecutiveAirJumps; // 0xc31	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e0
// Has VTable
class COrbSpawner : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x940
// Has VTable
class CTriggerRemove : public CBaseTrigger
{
public:
	CEntityIOOutput m_OnRemove; // 0x918	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
class CInfoTarget : public CPointEntity
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_PredatorPrecision : public CCitadel_Modifier_Intrinsic_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TechCleaveVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CleavePlayerParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CleaveTrooperParticle; // 0x6d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sVictimSound; // 0x7b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CScaleFunctionAbilityPropertyMultiStats : public CScaleFunctionBase
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb68
// Has VTable
// 
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
// MNetworkVarNames "float m_flAimPitch"
// MNetworkVarNames "float m_flAttackRange"
class CNPC_ShieldedSentry : public CNPC_SimpleAnimatingAI
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0xaf0	
private:
	[[maybe_unused]] uint8_t __pad0b08[0xc]; // 0xb08
public:
	// MNetworkEnable
	float m_flAimPitch; // 0xb14	
	GameTime_t m_flNextAttackTime; // 0xb18	
	float m_flAttackCone; // 0xb1c	
	float m_flAttackDelay; // 0xb20	
	GameTime_t m_flLastAlertSound; // 0xb24	
	float m_flTrackingSpeed; // 0xb28	
	float m_flDeployTime; // 0xb2c	
private:
	[[maybe_unused]] uint8_t __pad0b30[0xa]; // 0xb30
public:
	bool m_bHadEnemy; // 0xb3a	
	bool m_bLockedOn; // 0xb3b	
private:
	[[maybe_unused]] uint8_t __pad0b3c[0x8]; // 0xb3c
public:
	// MNetworkEnable
	float m_flAttackRange; // 0xb44	
	
	// Datamap fields:
	// float m_flLifeTime; // 0xb34
	// void m_flSpawnTime; // 0xb30
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x930
// Has VTable
// 
// MNetworkVarNames "float m_flWidth"
// MNetworkVarNames "GameTime_t m_tDieTime"
class CProjectile_Stomp_Projectile : public CCitadelProjectile
{
public:
	Vector m_vLastStompPos; // 0x800	
	bool m_bFinished; // 0x80c	
private:
	[[maybe_unused]] uint8_t __pad080d[0x3]; // 0x80d
public:
	// MNetworkEnable
	float m_flWidth; // 0x810	
	// MNetworkEnable
	GameTime_t m_tDieTime; // 0x814	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa18
// Has VTable
class CMomentaryRotButton : public CRotButton
{
public:
	CEntityOutputTemplate< float32 > m_Position; // 0x918	
	CEntityIOOutput m_OnUnpressed; // 0x940	
	CEntityIOOutput m_OnFullyOpen; // 0x968	
	CEntityIOOutput m_OnFullyClosed; // 0x990	
	CEntityIOOutput m_OnReachedPosition; // 0x9b8	
	int32_t m_lastUsed; // 0x9e0	
	QAngle m_start; // 0x9e4	
	QAngle m_end; // 0x9f0	
	float m_IdealYaw; // 0x9fc	
	CUtlSymbolLarge m_sNoise; // 0xa00	
	bool m_bUpdateTarget; // 0xa08	
private:
	[[maybe_unused]] uint8_t __pad0a09[0x3]; // 0xa09
public:
	int32_t m_direction; // 0xa0c	
	float m_returnSpeed; // 0xa10	
	float m_flStartPosition; // 0xa14	
	
	// Datamap fields:
	// bool m_bSolidBsp; // 0x820
	// void CMomentaryRotButtonUseMoveDone; // 0x0
	// void CMomentaryRotButtonReturnMoveDone; // 0x0
	// void CMomentaryRotButtonSetPositionMoveDone; // 0x0
	// void CMomentaryRotButtonUpdateThink; // 0x0
	// float InputSetPosition; // 0x0
	// float InputSetPositionImmediately; // 0x0
	// void InputDisableUpdateTarget; // 0x0
	// void InputEnableUpdateTarget; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1618
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityChargedTackleVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChargePreviewParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ChargePrepareModifier; // 0x15c8	
	CEmbeddedSubclass< CCitadelModifier > m_ChargeActiveModifier; // 0x15d8	
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x15e8	
	CEmbeddedSubclass< CCitadelModifier > m_DragModifier; // 0x15f8	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strHitSound; // 0x1608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SpilledBloodThinkerVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SpilledBloodParticle; // 0x5f8	
	// MPropertyStartGroup "Gameplay"
	float m_flTickRate; // 0x6d8	
	float m_flHeight; // 0x6dc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Fervor : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_AttachTarget : public CCitadelModifier
{
public:
	CHandle< CBaseEntity > m_hTarget; // 0xc8	
	Vector m_vecOffset; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x50
// Has VTable
// 
// MGetKV3ClassDefaults
class CDestructableBuildingVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyStartGroup "GamePlay"
	int32_t m_iMaxHealthFinal; // 0x28	
	int32_t m_iMaxHealthGenerator; // 0x2c	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ObjectiveRegen; // 0x30	
	CEmbeddedSubclass< CCitadelModifier > m_BackdoorBulletResistModifier; // 0x40	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf30
// Has VTable
class CPropDoorRotating : public CBasePropDoor
{
public:
	Vector m_vecAxis; // 0xe98	
	float m_flDistance; // 0xea4	
	PropDoorRotatingSpawnPos_t m_eSpawnPosition; // 0xea8	
	PropDoorRotatingOpenDirection_e m_eOpenDirection; // 0xeac	
	PropDoorRotatingOpenDirection_e m_eCurrentOpenDirection; // 0xeb0	
	float m_flAjarAngle; // 0xeb4	
	QAngle m_angRotationAjarDeprecated; // 0xeb8	
	QAngle m_angRotationClosed; // 0xec4	
	QAngle m_angRotationOpenForward; // 0xed0	
	QAngle m_angRotationOpenBack; // 0xedc	
	QAngle m_angGoal; // 0xee8	
	Vector m_vecForwardBoundsMin; // 0xef4	
	Vector m_vecForwardBoundsMax; // 0xf00	
	Vector m_vecBackBoundsMin; // 0xf0c	
	Vector m_vecBackBoundsMax; // 0xf18	
	bool m_bAjarDoorShouldntAlwaysOpen; // 0xf24	
private:
	[[maybe_unused]] uint8_t __pad0f25[0x3]; // 0xf25
public:
	CHandle< CEntityBlocker > m_hEntityBlocker; // 0xf28	
	
	// Datamap fields:
	// float InputSetRotationDistance; // 0x0
	// float InputSetSpeed; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x778
// Has VTable
class CGameText : public CRulePointEntity
{
public:
	CUtlSymbolLarge m_iszMessage; // 0x758	
	hudtextparms_t m_textParms; // 0x760	
	
	// Datamap fields:
	// void InputDisplay; // 0x0
	// CUtlSymbolLarge InputSetText; // 0x0
	// Color color; // 0x7fffffff
	// Color color2; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Chomp_LowHealth_GlowVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strLocalStatusEffect; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierGravityLassoEnemyVData : public CCitadel_Modifier_StunnedVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LassoEffect; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Wraith_RapidFireVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x14e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_TargetBuffSound; // 0x15c8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_RapidFireModifier; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x780
// Has VTable
// 
// MNetworkVarNames "bool m_bLoop"
// MNetworkVarNames "float m_flFPS"
// MNetworkVarNames "HRenderTextureStrong m_hPositionKeys"
// MNetworkVarNames "HRenderTextureStrong m_hRotationKeys"
// MNetworkVarNames "Vector m_vAnimationBoundsMin"
// MNetworkVarNames "Vector m_vAnimationBoundsMax"
// MNetworkVarNames "float m_flStartTime"
// MNetworkVarNames "float m_flStartFrame"
class CTextureBasedAnimatable : public CBaseModelEntity
{
public:
	// MNetworkEnable
	bool m_bLoop; // 0x748	
private:
	[[maybe_unused]] uint8_t __pad0749[0x3]; // 0x749
public:
	// MNetworkEnable
	float m_flFPS; // 0x74c	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hPositionKeys; // 0x750	
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hRotationKeys; // 0x758	
	// MNetworkEnable
	Vector m_vAnimationBoundsMin; // 0x760	
	// MNetworkEnable
	Vector m_vAnimationBoundsMax; // 0x76c	
	// MNetworkEnable
	float m_flStartTime; // 0x778	
	// MNetworkEnable
	float m_flStartFrame; // 0x77c	
	
	// Datamap fields:
	// void InputStart; // 0x0
	// void InputStop; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7a0
// Has VTable
class CMarkupVolumeTagged_NavCitadel : public CMarkupVolumeWithRef
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x528
// Has VTable
class CPhysThruster : public CPhysForce
{
public:
	Vector m_localOrigin; // 0x518	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityStackingDamageVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_StackingModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x220
// Has VTable
class CCitadel_Modifier_TechDamageProcWatcher : public CCitadel_Modifier_BaseEventProc
{
public:
	GameTime_t m_flNextProcTime; // 0x170	
	ShotID_t m_shotProced; // 0x174	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_Discord_AuraVData_Enemy : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strAreaEffectEnemy; // 0x638	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strAreaEffectFriendly; // 0x718	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strAreaEffectSelf; // 0x7f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x508
// Has VTable
// 
// MNetworkVarNames "string_t m_iszStackName"
// MNetworkVarNames "string_t m_iszOperatorName"
// MNetworkVarNames "string_t m_iszOpvarName"
// MNetworkVarNames "Vector m_vDistanceInnerMins"
// MNetworkVarNames "Vector m_vDistanceInnerMaxs"
// MNetworkVarNames "Vector m_vDistanceOuterMins"
// MNetworkVarNames "Vector m_vDistanceOuterMaxs"
// MNetworkVarNames "int m_nAABBDirection"
class CCitadelSoundOpvarSetOBB : public CBaseEntity
{
public:
	// MNetworkEnable
	CUtlSymbolLarge m_iszStackName; // 0x4b8	
	// MNetworkEnable
	CUtlSymbolLarge m_iszOperatorName; // 0x4c0	
	// MNetworkEnable
	CUtlSymbolLarge m_iszOpvarName; // 0x4c8	
	// MNetworkEnable
	Vector m_vDistanceInnerMins; // 0x4d0	
	// MNetworkEnable
	Vector m_vDistanceInnerMaxs; // 0x4dc	
	// MNetworkEnable
	Vector m_vDistanceOuterMins; // 0x4e8	
	// MNetworkEnable
	Vector m_vDistanceOuterMaxs; // 0x4f4	
	// MNetworkEnable
	int32_t m_nAABBDirection; // 0x500	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Slork_RagingCurrentVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_CountdownModifier; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_WaterAuraParticle; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcc8
// Has VTable
// 
// MNetworkVarNames "bool m_bIsFriendlyTarget"
// MNetworkVarNames "EHANDLE m_hTarget"
// MNetworkVarNames "Vector m_vAttackTarget"
// MNetworkVarNames "GameTime_t m_flPounceStartTime"
// MNetworkVarNames "GameTime_t m_flToTargetStartTime"
class CCitadel_Ability_Nano_Pounce : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x1f8]; // 0xab0
public:
	// MNetworkEnable
	bool m_bIsFriendlyTarget; // 0xca8	
private:
	[[maybe_unused]] uint8_t __pad0ca9[0x3]; // 0xca9
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTarget; // 0xcac	
	// MNetworkEnable
	Vector m_vAttackTarget; // 0xcb0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flPounceStartTime; // 0xcbc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flToTargetStartTime; // 0xcc0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CInfoPortalLink : public CPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbb0
// Has VTable
class CCitadel_Item_AOERoot : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Wrecker_UltimateGrabEnemyVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EnemyHeroStasisEffect; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EnemyHeroGrabEffect; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CLaneMarkerPath : public CServerOnlyEntity
{
public:
	int32_t m_iLane; // 0x4b8	
	int32_t m_iLaneSlot; // 0x4bc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf00
// Has VTable
// 
// MNetworkIncludeByName "m_bTakesDamage"
// MNetworkIncludeByName "m_nTakeDamageFlags"
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
// MNetworkVarNames "CCitadelAbilityComponent::Storage_t m_CCitadelAbilityComponent"
// MNetworkVarNames "WeakPoint_t m_vecWeakPoints"
// MNetworkVarNames "bool m_bDestroyed"
// MNetworkVarNames "bool m_bActive"
// MNetworkVarNames "bool m_bFinal"
class CCitadel_Destroyable_Building : public CCitadelAnimatingModelEntity
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0xad8	
	CEntityIOOutput m_OnDestroyed; // 0xaf0	
	CEntityIOOutput m_OnRevitilized; // 0xb18	
	CEntityIOOutput m_OnDamageTaken; // 0xb40	
	CEntityIOOutput m_OnLifeChanged; // 0xb68	
	CEntityIOOutput m_OnBecomeActive; // 0xb90	
	CEntityIOOutput m_OnBecomeInvulnerable; // 0xbb8	
	CEntityIOOutput m_OnBecomeVulnerable; // 0xbe0	
	CEntityIOOutput m_OnUnderAttack; // 0xc08	
	CEntityIOOutput m_OnAttackSubsided; // 0xc30	
	int32_t m_nBuildingHealth; // 0xc58	
private:
	[[maybe_unused]] uint8_t __pad0c5c[0x4]; // 0xc5c
public:
	int32_t m_iLane; // 0xc60	
	GameTime_t m_flDestroyedTime; // 0xc64	
	GameTime_t m_flLastDamagedTime; // 0xc68	
	QAngle m_angOriginal; // 0xc6c	
private:
	[[maybe_unused]] uint8_t __pad0c78[0x18]; // 0xc78
public:
	CUtlSymbolLarge m_backdoorProtectionTrigger; // 0xc90	
private:
	[[maybe_unused]] uint8_t __pad0c98[0x8]; // 0xc98
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelAbilityComponent"
	// MNetworkAlias "CCitadelAbilityComponent"
	// MNetworkTypeAlias "CCitadelAbilityComponent"
	CCitadelAbilityComponent m_CCitadelAbilityComponent; // 0xca0	
	// MNetworkEnable
	CUtlVectorEmbeddedNetworkVar< WeakPoint_t > m_vecWeakPoints; // 0xea8	
	// MNetworkEnable
	// MNetworkChangeCallback "DestroyedChanged"
	bool m_bDestroyed; // 0xef8	
	// MNetworkEnable
	bool m_bActive; // 0xef9	
	// MNetworkEnable
	bool m_bFinal; // 0xefa	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd38
// Has VTable
// 
// MNetworkExcludeByName "m_hModel"
// MNetworkVarNames "shard_model_desc_t m_ShardDesc"
class CShatterGlassShardPhysics : public CPhysicsProp
{
public:
	bool m_bDebris; // 0xcb0	
private:
	[[maybe_unused]] uint8_t __pad0cb1[0x3]; // 0xcb1
public:
	uint32_t m_hParentShard; // 0xcb4	
	// MNetworkEnable
	shard_model_desc_t m_ShardDesc; // 0xcb8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
class CFilterModel : public CBaseFilter
{
public:
	CUtlSymbolLarge m_iFilterModel; // 0x510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x320
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_BreakablePropGoldPickupVData : public CCitadel_BreakablePropPickupVData
{
public:
	float m_flGoldAmount; // 0x318	
	float m_flGoldPerMinuteAmount; // 0x31c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CModifier_Synth_Barrage_Amp : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17a8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityHornetLeapVData : public CitadelAbilityVData
{
public:
	float m_flChannelingAirDrag; // 0x14e8	
	float m_flChannelingMaxFallSpeed; // 0x14ec	
	float m_flVerticalMoveSpeedTarget; // 0x14f0	
private:
	[[maybe_unused]] uint8_t __pad14f4[0x4]; // 0x14f4
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_LeapModifier; // 0x14f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DustParticle; // 0x1508	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TrailParticle; // 0x15e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x16c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_AOE_Tech_ShieldVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DurationModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x980
// Has VTable
class CCitadel_FissureWall : public CBaseAnimGraph
{
public:
	Vector m_vStartPos; // 0x958	
	Vector m_vEndPos; // 0x964	
	GameTime_t m_flStartEmitTime; // 0x970	
	GameTime_t m_flEndEmitTime; // 0x974	
	bool m_bSolid; // 0x978	
private:
	[[maybe_unused]] uint8_t __pad0979[0x3]; // 0x979
public:
	int32_t m_nTouchCount; // 0x97c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CModifier_Thumper_Bullet_Watcher : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_Protection_Racket : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb70
// Has VTable
// 
// MNetworkVarNames "GameTime_t m_flExplodeEndTime"
// MNetworkVarNames "GameTime_t m_flBuffEndTime"
class CCitadel_Ability_InfinitySlash : public CCitadelBaseYamatoAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab8[0xa8]; // 0xab8
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flExplodeEndTime; // 0xb60	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flBuffEndTime; // 0xb64	
	ParticleIndex_t m_nCastEffect; // 0xb68	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadelModifierProjectilePitchingLoopSoundThinker : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x2d0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_HeroTestOrbSpawnerVData : public CEntitySubclassVDataBase
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_hModel; // 0x28	
	float m_flModelScale; // 0x108	
	float m_flSpawnOffset; // 0x10c	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AmbientParticle; // 0x110	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SpawnParticle; // 0x1f0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xce0
// Has VTable
// 
// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
// MNetworkVarNames "int m_eLootType"
class CItemCrate : public CPhysicsProp
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0xcb0	
private:
	[[maybe_unused]] uint8_t __pad0cc8[0x14]; // 0xcc8
public:
	// MNetworkEnable
	int32_t m_eLootType; // 0xcdc	
	
	// Datamap fields:
	// CHandle< CBaseEntity > m_hSpawner; // 0xcc8
	// int32_t m_eObjectivePosition; // 0xcd4
	// void InputAttachedToParachute; // 0x0
	// void InputDetachedFromParachute; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x120
// Has VTable
class CCitadel_Modifier_Tokamak_EnemySmokeAOE : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa48
// Has VTable
// 
// MNetworkVarNames "EPlayerPlayState m_ePlayState"
// MNetworkVarNames "int m_iGuidedBotMatchLastHits"
// MNetworkVarNames "int m_iGuidedBotMatchOrbsSecured"
// MNetworkVarNames "int m_iGuidedBotMatchOrbsDenied"
// MNetworkVarNames "int m_iGuidedBotMatchDamageToGuardians"
// MNetworkVarNames "int m_iGuidedBotMatchDamageToPlayers"
// MNetworkVarNames "int m_iGuidedBotMatchDamageTaken"
// MNetworkVarNames "int m_iGuidedBotMatchNetWorth"
// MNetworkVarNames "int m_iGuidedBotMatchModsPurchased"
// MNetworkVarNames "int m_iGuidedBotMatchAbilityUpgrades"
// MNetworkVarNames "float m_flGuideBotMatchLastTaskNagVO"
// MNetworkVarNames "float m_flGuideBotLastTimeTaskCompleted"
// MNetworkVarNames "EGuidedBotMatchObjective m_eGuidedBotMatchObjective"
// MNetworkVarNames "int8 m_nAssignedLane"
// MNetworkVarNames "int8 m_nOriginalLaneAssignment"
// MNetworkVarNames "bool m_bSwapCastModeAbility1"
// MNetworkVarNames "bool m_bSwapCastModeAbility2"
// MNetworkVarNames "bool m_bSwapCastModeAbility3"
// MNetworkVarNames "bool m_bSwapCastModeAbility4"
// MNetworkVarNames "bool m_bIsKingPanda"
// MNetworkVarNames "bool m_bBotDisconnectTakeover"
// MNetworkVarNames "bool m_bInTeamChat"
// MNetworkVarNames "bool m_bInPartyChat"
// MNetworkVarNames "CHandle< CCitadelPlayerPawn> m_hHeroPawn"
// MNetworkVarNames "PlayerDataGlobal_t m_PlayerDataGlobal"
// MNetworkVarNames "int8 m_nDeathReplayAvailable"
// MNetworkVarNames "CitadelLobbyPlayerSlot_t m_unLobbyPlayerSlot"
class CCitadelPlayerController : public CBasePlayerController
{
public:
	// MNetworkEnable
	EPlayerPlayState m_ePlayState; // 0x740	
	// MNetworkEnable
	int32_t m_iGuidedBotMatchLastHits; // 0x744	
	// MNetworkEnable
	int32_t m_iGuidedBotMatchOrbsSecured; // 0x748	
	// MNetworkEnable
	int32_t m_iGuidedBotMatchOrbsDenied; // 0x74c	
	// MNetworkEnable
	int32_t m_iGuidedBotMatchDamageToGuardians; // 0x750	
	// MNetworkEnable
	int32_t m_iGuidedBotMatchDamageToPlayers; // 0x754	
	// MNetworkEnable
	int32_t m_iGuidedBotMatchDamageTaken; // 0x758	
	// MNetworkEnable
	int32_t m_iGuidedBotMatchNetWorth; // 0x75c	
	// MNetworkEnable
	int32_t m_iGuidedBotMatchModsPurchased; // 0x760	
	// MNetworkEnable
	int32_t m_iGuidedBotMatchAbilityUpgrades; // 0x764	
	// MNetworkEnable
	float m_flGuideBotMatchLastTaskNagVO; // 0x768	
	// MNetworkEnable
	float m_flGuideBotLastTimeTaskCompleted; // 0x76c	
	// MNetworkEnable
	EGuidedBotMatchObjective m_eGuidedBotMatchObjective; // 0x770	
	// MNetworkEnable
	// MNetworkChangeCallback "AssignedLaneChanged"
	int8_t m_nAssignedLane; // 0x774	
	// MNetworkEnable
	int8_t m_nOriginalLaneAssignment; // 0x775	
	// MNetworkEnable
	bool m_bSwapCastModeAbility1; // 0x776	
	// MNetworkEnable
	bool m_bSwapCastModeAbility2; // 0x777	
	// MNetworkEnable
	bool m_bSwapCastModeAbility3; // 0x778	
	// MNetworkEnable
	bool m_bSwapCastModeAbility4; // 0x779	
	// MNetworkEnable
	bool m_bIsKingPanda; // 0x77a	
	// MNetworkEnable
	bool m_bBotDisconnectTakeover; // 0x77b	
	// MNetworkEnable
	// MNetworkChangeCallback "ChatGroupsChanged"
	bool m_bInTeamChat; // 0x77c	
	// MNetworkEnable
	// MNetworkChangeCallback "ChatGroupsChanged"
	bool m_bInPartyChat; // 0x77d	
private:
	[[maybe_unused]] uint8_t __pad077e[0xc2]; // 0x77e
public:
	// MNetworkEnable
	CHandle< CCitadelPlayerPawn > m_hHeroPawn; // 0x840	
private:
	[[maybe_unused]] uint8_t __pad0844[0x14]; // 0x844
public:
	// MNetworkEnable
	PlayerDataGlobal_t m_PlayerDataGlobal; // 0x858	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	int8_t m_nDeathReplayAvailable; // 0xa30	
	// MNetworkEnable
	CitadelLobbyPlayerSlot_t m_unLobbyPlayerSlot; // 0xa31	
private:
	[[maybe_unused]] uint8_t __pad0a32[0x2]; // 0xa32
public:
	GameTime_t m_flLastCommsTime; // 0xa34	
	GameTime_t m_flLastFailedCommsTime; // 0xa38	
	bool m_bLastCommsWasDoublePing; // 0xa3c	
private:
	[[maybe_unused]] uint8_t __pad0a3d[0x3]; // 0xa3d
public:
	int32_t m_nGuideBotNumTasksComplete; // 0xa40	
	
	// Datamap fields:
	// void CCitadelPlayerControllerResourceDataThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1718
// Has VTable
// 
// MGetKV3ClassDefaults
class CNPC_Boss_Tier3VData : public CAI_CitadelNPCVData
{
public:
	int32_t m_nPhase2Health; // 0xe18	
	float m_flEyeZOffset; // 0xe1c	
	float m_flDefaultMoveSpeed; // 0xe20	
	float m_flNoShieldMoveSpeed; // 0xe24	
	float m_flDyingMoveSpeed; // 0xe28	
	float m_flMovingToFinalPositionSpeed; // 0xe2c	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DeathSmallExplosionParticle; // 0xe30	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DeathLargeExplosionParticle; // 0xf10	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_WeakpointBrokenExplosionParticle; // 0xff0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChargeUpExplosionParticle; // 0x10d0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_strWIPModelName; // 0x11b0	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_DyingSmallExplosion; // 0x1290	
	CSoundEventName m_AvatarKilledSound; // 0x12a0	
	CSoundEventName m_AvatarBecomePatronSound; // 0x12b0	
	CSoundEventName m_PatronLandedSound; // 0x12c0	
	CSoundEventName m_PatronKilledSound; // 0x12d0	
	CSoundEventName m_LaserSound; // 0x12e0	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_LaserBeamModifier; // 0x12f0	
	CEmbeddedSubclass< CBaseModifier > m_DyingModifier; // 0x1300	
	CEmbeddedSubclass< CBaseModifier > m_VulnerableModifier; // 0x1310	
	CEmbeddedSubclass< CBaseModifier > m_Phase1Modifier; // 0x1320	
	CEmbeddedSubclass< CBaseModifier > m_Phase2Modifier; // 0x1330	
	CEmbeddedSubclass< CBaseModifier > m_BackdoorProtection; // 0x1340	
	CEmbeddedSubclass< CBaseModifier > m_ObjectiveRegen; // 0x1350	
	// MPropertyStartGroup "Laser"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaserChargingParticle; // 0x1360	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaserBeamEffect; // 0x1440	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaserPreviewEffect; // 0x1520	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaserDamageEffect; // 0x1600	
	float m_flLaserTargetingZOffset; // 0x16e0	
	float m_flLaserTrackingSpeed; // 0x16e4	
	float m_flLaserTrackingMaxSpeed; // 0x16e8	
	float m_flLaserCastingTrackSpeed; // 0x16ec	
	float m_flLaserCastingTrackMaxSpeed; // 0x16f0	
	float m_flLaserDPSToPlayers; // 0x16f4	
	float m_flLaserDPSToNPCs; // 0x16f8	
	float m_flNoShieldLaserTrackingSpeed; // 0x16fc	
	float m_flNoShieldLaserTrackingMaxSpeed; // 0x1700	
	float m_flNoShieldLaserCastingTrackSpeed; // 0x1704	
	float m_flNoShieldLaserCastingTrackMaxSpeed; // 0x1708	
	float m_flNoShieldLaserDPSToPlayers; // 0x170c	
	float m_flNoShieldLaserDPSToNPCs; // 0x1710	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
class CPathTrack : public CPointEntity
{
public:
	CPathTrack* m_pnext; // 0x4b8	
	CPathTrack* m_pprevious; // 0x4c0	
	CPathTrack* m_paltpath; // 0x4c8	
	float m_flRadius; // 0x4d0	
	float m_length; // 0x4d4	
	CUtlSymbolLarge m_altName; // 0x4d8	
	int32_t m_nIterVal; // 0x4e0	
	TrackOrientationType_t m_eOrientationType; // 0x4e4	
	CEntityIOOutput m_OnPass; // 0x4e8	
	
	// Static fields:
	static int32_t &Get_s_nCurrIterVal(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CPathTrack")->GetStaticFields()[0]->m_pInstance);};
	static bool &Get_s_bIsIterating(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CPathTrack")->GetStaticFields()[1]->m_pInstance);};
	
	// Datamap fields:
	// void InputPass; // 0x0
	// void InputEnableAlternatePath; // 0x0
	// void InputDisableAlternatePath; // 0x0
	// void InputToggleAlternatePath; // 0x0
	// void InputEnablePath; // 0x0
	// void InputDisablePath; // 0x0
	// void InputTogglePath; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbe0
// Has VTable
class CCitadel_Ability_Hornet_Chain : public CCitadelBaseAbility
{
public:
	Vector m_vLaunchPosition; // 0xab0	
	QAngle m_qLaunchAngle; // 0xabc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1620
// Has VTable
// 
// MGetKV3ClassDefaults
class CItemSingleTargetStunVData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_StunDelayModifier; // 0x1530	
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1640
// Has VTable
// 
// MGetKV3ClassDefaults
class CItem_WitheringWhip_VData : public CCitadel_Item_TrackingProjectileApplyModifierVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_DebuffModifier; // 0x1630	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x548
// Has VTable
class CLogicDistanceCheck : public CLogicalEntity
{
public:
	CUtlSymbolLarge m_iszEntityA; // 0x4b8	
	CUtlSymbolLarge m_iszEntityB; // 0x4c0	
	float m_flZone1Distance; // 0x4c8	
	float m_flZone2Distance; // 0x4cc	
	CEntityIOOutput m_InZone1; // 0x4d0	
	CEntityIOOutput m_InZone2; // 0x4f8	
	CEntityIOOutput m_InZone3; // 0x520	
	
	// Datamap fields:
	// void InputCheckDistance; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa60
// Has VTable
// 
// MNetworkVarNames "float m_flInnerAngle"
// MNetworkVarNames "float m_flOuterAngle"
// MNetworkVarNames "bool m_bShowLight"
class COmniLight : public CBarnLight
{
public:
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flInnerAngle; // 0xa50	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	float m_flOuterAngle; // 0xa54	
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	bool m_bShowLight; // 0xa58	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x800
// Has VTable
class CCitadel_Projectile_Mirage_DjinnsReach : public CCitadelProjectile
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x530
// Has VTable
// 
// MNetworkVarNames "bool m_bDisabled"
// MNetworkVarNames "int m_nResolutionX"
// MNetworkVarNames "int m_nResolutionY"
// MNetworkVarNames "string_t m_szLayoutFileName"
// MNetworkVarNames "string_t m_RenderAttrName"
// MNetworkVarNames "CHandle< CBaseModelEntity > m_TargetEntities"
// MNetworkVarNames "int m_nTargetChangeCount"
// MNetworkVarNames "string_t m_vecCSSClasses"
class CInfoOffscreenPanoramaTexture : public CPointEntity
{
public:
	// MNetworkEnable
	bool m_bDisabled; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	// MNetworkEnable
	int32_t m_nResolutionX; // 0x4bc	
	// MNetworkEnable
	int32_t m_nResolutionY; // 0x4c0	
private:
	[[maybe_unused]] uint8_t __pad04c4[0x4]; // 0x4c4
public:
	// MNetworkEnable
	CUtlSymbolLarge m_szLayoutFileName; // 0x4c8	
	// MNetworkEnable
	CUtlSymbolLarge m_RenderAttrName; // 0x4d0	
	// MNetworkEnable
	CNetworkUtlVectorBase< CHandle< CBaseModelEntity > > m_TargetEntities; // 0x4d8	
	// MNetworkEnable
	int32_t m_nTargetChangeCount; // 0x4f0	
private:
	[[maybe_unused]] uint8_t __pad04f4[0x4]; // 0x4f4
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< CUtlSymbolLarge > m_vecCSSClasses; // 0x4f8	
	CUtlSymbolLarge m_szTargetsName; // 0x510	
	CUtlVector< CHandle< CBaseModelEntity > > m_AdditionalTargetEntities; // 0x518	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// CUtlSymbolLarge InputAddCSSClass; // 0x0
	// CUtlSymbolLarge InputRemoveCSSClass; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1830
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_PrimaryWeapon_SlorkVData : public CCitadel_Ability_PrimaryWeaponVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x1538	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_WeaponShapeParticle; // 0x1618	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_WeaponRangeAssistParticle; // 0x16f8	
	int32_t m_nNumConePoints; // 0x17d8	
	float m_flRoundPerSecond; // 0x17dc	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x17e0	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_PoisonSprayerHitSound; // 0x17f0	
	CSoundEventName m_WeaponLoopStartSound; // 0x1800	
	CSoundEventName m_WeaponLoopSound; // 0x1810	
	CSoundEventName m_WeaponLoopEndSound; // 0x1820	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Bull_Leap_BoostingVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BoostTrailParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1550
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_ArmorUpgrade_CloakingDeviceActive_VData : public CitadelItemVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AmbushModifier; // 0x1530	
	CEmbeddedSubclass< CCitadelModifier > m_InvisModifier; // 0x1540	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_TeamRelativeParticle : public CCitadelModifier
{
public:
	ParticleIndex_t m_nParentViewParticle; // 0xc8	
	ParticleIndex_t m_nOtherPlayerViewParticle; // 0xcc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
// 
// MNetworkVarNames "int m_nMode"
// MNetworkVarNames "Vector m_vBoxSize"
// MNetworkVarNames "bool m_bEnabled"
class CInfoVisibilityBox : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x4]; // 0x4b8
public:
	// MNetworkEnable
	int32_t m_nMode; // 0x4bc	
	// MNetworkEnable
	Vector m_vBoxSize; // 0x4c0	
	// MNetworkEnable
	bool m_bEnabled; // 0x4cc	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Rutger_CheatDeath_Activated : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Warden_HighAlert : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ImmobilizeTrapDOT_ThinkerVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GroundParticle; // 0x5f8	
	// MPropertyStartGroup "Gameplay"
	float m_flTickRate; // 0x6d8	
	float m_flHeight; // 0x6dc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x19c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityGuidedArrowVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraCancelledTransitionBacktoArcher; // 0x14e8	
	CitadelCameraOperationsSequence_t m_cameraExplodedTransitionBackToArcher; // 0x1568	
	float m_flCameraHoldAtExplosion; // 0x15e8	
	float m_flFadeToBlackTime; // 0x15ec	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SpectatingProjectileParticle; // 0x15f0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplosionParticle; // 0x16d0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GuidedArrowChannelParticle; // 0x17b0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_ProjectileModel; // 0x1890	
	float m_ArrowOffsetX; // 0x1970	
	float m_ArrowCameraDistance; // 0x1974	
	float m_ArrowCameraHeightOffset; // 0x1978	
	float m_ArrowInitialPitch; // 0x197c	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_GuidingModifier; // 0x1980	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x1990	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strExplodeSound; // 0x19a0	
	// MPropertyStartGroup "Gameplay"
	float m_flTrackAmount; // 0x19b0	
	float m_flSpeedAccel; // 0x19b4	
	float m_flSpeedDeccel; // 0x19b8	
	float m_flBaseProjectileSpeed; // 0x19bc	
	float m_flMaxProjectileSpeed; // 0x19c0	
	float m_flArrowModelTurnSpringStrength; // 0x19c4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityPowerJumpVData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_JumpParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_InAirModifier; // 0x15c8	
	CEmbeddedSubclass< CCitadelModifier > m_PowerJumpModifier; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb80
// Has VTable
class CCitadel_ArmorUpgrade_PersonalRejuvenator : public CCitadel_Item
{
public:
	bool m_bActivated; // 0xad0	
private:
	[[maybe_unused]] uint8_t __pad0ad1[0x3]; // 0xad1
public:
	ParticleIndex_t m_nFxIndex; // 0xad4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_PayloadPusherAuraTarget : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x770
// Has VTable
class CGamePlayerEquip : public CRulePointEntity
{
public:
	// Datamap fields:
	// CUtlString weapon%d[32]; // 0x7fffffff
	// void InputTriggerForAllPlayers; // 0x0
	// CUtlSymbolLarge InputTriggerForActivatedPlayer; // 0x0
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CInfoTargetServerOnly : public CServerOnlyPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Tokamak_Radiance : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierCadenceGunSpikesVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CUtlString m_strSmallIconCssClassMax; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Cadence_GrandFinale_BuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadel_Modifier_Base_Buildup > m_BuildUpModifier; // 0x5f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x608	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplodeSound; // 0x6e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Cadence_AnthemBuffVData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1770
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_InfinitySlashVData : public CCitadelYamatoBaseVData
{
public:
	float m_flRiseSpeed; // 0x14f0	
	float m_flRiseDuration; // 0x14f4	
	float m_flSpeedDecayScale; // 0x14f8	
	float m_flExplodeHoldTime; // 0x14fc	
	float m_flExplosionShakeAmplitude; // 0x1500	
	float m_flExplosionShakeFrequency; // 0x1504	
	float m_flExplosionShakeDuration; // 0x1508	
private:
	[[maybe_unused]] uint8_t __pad150c[0x4]; // 0x150c
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AOERangeEffect; // 0x1510	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AnimCastEffect; // 0x15f0	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceExplosion; // 0x16d0	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x1750	
	CEmbeddedSubclass< CCitadelModifier > m_BuffTimerModifier; // 0x1760	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TangoTether_TetherReceiverVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strAttackBuffParticle; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_TetherSound; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_WreckerSalvageVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SalvageBeam; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ConnectBeam; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb60
// Has VTable
// 
// MNetworkVarNames "CHandle< CCitadelProjectile> m_hProjectile"
class CCitadel_Ability_HatTrick : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	CHandle< CCitadelProjectile > m_hProjectile; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x708
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Ricochet_ProcVData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_RicochetTracerParticle; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Weapon_BossTier2 : public CCitadelBaseAbilityServerOnly
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x2e8
// Has VTable
class CCitadel_Modifier_Camouflage_Invis : public CCitadel_Modifier_Invis
{
public:
	Vector m_vCastPosition; // 0x268	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x668
// Has VTable
class CSoundOpvarSetPathCornerEntity : public CSoundOpvarSetPointEntity
{
private:
	[[maybe_unused]] uint8_t __pad0640[0x18]; // 0x640
public:
	float m_flDistMinSqr; // 0x658	
	float m_flDistMaxSqr; // 0x65c	
	CUtlSymbolLarge m_iszPathCornerEntityName; // 0x660	
	
	// Datamap fields:
	// void CSoundOpvarSetPathCornerEntitySetOpvarThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CInfoAbilityTestBot : public CPointEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Mirage_SandPhantom_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_WhirlwindSpeedModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x128
// Has VTable
class CCitadel_Modifier_SleepBomb_Asleep : public CCitadel_Modifier_Sleep
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Lockdown_BulletResist : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_WreckerUltimate_Invincible : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc00
// Has VTable
class CCitadel_Ability_Lash : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15e0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_BloodBombVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SpilledBloodModifier; // 0x15c8	
	// MPropertyStartGroup "Misc"
	CUtlString m_strBloodSpillStatName; // 0x15d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_LongRangeSlowingTech_Proc : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f0
// Has VTable
// 
// MNetworkVarNames "CHandle< CBaseEntity> m_hEntAttached"
// MNetworkVarNames "bool m_bCheapEffect"
class CEntityFlame : public CBaseEntity
{
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hEntAttached; // 0x4b8	
	// MNetworkEnable
	bool m_bCheapEffect; // 0x4bc	
private:
	[[maybe_unused]] uint8_t __pad04bd[0x3]; // 0x4bd
public:
	float m_flSize; // 0x4c0	
	bool m_bUseHitboxes; // 0x4c4	
private:
	[[maybe_unused]] uint8_t __pad04c5[0x3]; // 0x4c5
public:
	int32_t m_iNumHitboxFires; // 0x4c8	
	float m_flHitboxFireScale; // 0x4cc	
	GameTime_t m_flLifetime; // 0x4d0	
	CHandle< CBaseEntity > m_hAttacker; // 0x4d4	
	int32_t m_iDangerSound; // 0x4d8	
	float m_flDirectDamagePerSecond; // 0x4dc	
	int32_t m_iCustomDamageType; // 0x4e0	
	
	// Datamap fields:
	// void m_hPlayingSound; // 0x4e4
	// void CEntityFlameFlameThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CLightCapsuleEntity : public CLightEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa78
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Mirage_SandPhantom_WhirlwindEvasion_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AttackerHitFx; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_playerBuffSelf; // 0x7b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_playerBuffEnemy; // 0x898	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ReflectedBulletTracerParticle; // 0x978	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strAttackerHitSound; // 0xa58	
	CSoundEventName m_strVictimHitSound; // 0xa68	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Cadence_SilenceContraptionsDebuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcc8
// Has VTable
class CCitadel_Ability_Spinning_Blade : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x1f8]; // 0xab0
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecOutgoingHits; // 0xca8	
	CHandle< CCitadelProjectile > m_hActiveProjectile; // 0xcc0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x638
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierAirLiftExplodeTargetVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strSilenceTargetSound; // 0x5f8	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SilenceModifier; // 0x608	
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x618	
	CEmbeddedSubclass< CCitadelModifier > m_BulletResistModifier; // 0x628	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbc8
// Has VTable
class CCitadel_Ability_DeathTax : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb58
// Has VTable
class CCitadel_Ability_StaticCharge : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1700
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_ArmorUpgrade_DebuffReducerVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffReducedParticle; // 0x1530	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PurgeCastParticle; // 0x1610	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_MoveSpeedModifier; // 0x16f0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CScaleFunctionAbilityProperty_TechDamage : public CScaleFunctionBase
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'entity2')
// Alignment: 8
// Size: 0x78
// 
// MNetworkVarNames "int32 m_nameStringableIndex"
class CEntityIdentity
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x14]; // 0x0
public:
	// MNetworkEnable
	// MNetworkChangeCallback "entityIdentityNameChanged"
	int32_t m_nameStringableIndex; // 0x14	
	CUtlSymbolLarge m_name; // 0x18	
	CUtlSymbolLarge m_designerName; // 0x20	
private:
	[[maybe_unused]] uint8_t __pad0028[0x8]; // 0x28
public:
	uint32_t m_flags; // 0x30	
private:
	[[maybe_unused]] uint8_t __pad0034[0x4]; // 0x34
public:
	// MNetworkDisable
	WorldGroupId_t m_worldGroupId; // 0x38	
	uint32_t m_fDataObjectTypes; // 0x3c	
	// MNetworkDisable
	// MNetworkChangeAccessorFieldPathIndex
	ChangeAccessorFieldPathIndex_t m_PathIndex; // 0x40	
private:
	[[maybe_unused]] uint8_t __pad0044[0x14]; // 0x44
public:
	CEntityIdentity* m_pPrev; // 0x58	
	CEntityIdentity* m_pNext; // 0x60	
	CEntityIdentity* m_pPrevByClass; // 0x68	
	CEntityIdentity* m_pNextByClass; // 0x70	
	
	// Datamap fields:
	// void m_pAttributes; // 0x48
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f8
// Has VTable
class CGunTarget : public CBaseToggle
{
public:
	bool m_on; // 0x7c8	
private:
	[[maybe_unused]] uint8_t __pad07c9[0x3]; // 0x7c9
public:
	CHandle< CBaseEntity > m_hTargetEnt; // 0x7cc	
	CEntityIOOutput m_OnDeath; // 0x7d0	
	
	// Datamap fields:
	// void CGunTargetNext; // 0x0
	// void CGunTargetStart; // 0x0
	// void CGunTargetWait; // 0x0
	// void InputStart; // 0x0
	// void InputStop; // 0x0
	// void InputToggle; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x800
// Has VTable
class CProjectile_Synth_Barrage : public CCitadelProjectile
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc20
// Has VTable
// 
// MNetworkVarNames "LockonTarget_t m_vecLockonTargets"
// MNetworkVarNames "GameTime_t m_LockOnStartTime"
class CCitadelBaseLockonAbility : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x118]; // 0xab0
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	CUtlVectorEmbeddedNetworkVar< LockonTarget_t > m_vecLockonTargets; // 0xbc8	
	// MNetworkEnable
	GameTime_t m_LockOnStartTime; // 0xc18	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x610
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierItemPickupTimerVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Timers"
	float m_TimerToSilence; // 0x5f8	
	float m_SilenceDuration; // 0x5fc	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SilenceModifier; // 0x600	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CSoundEventParameter : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CUtlSymbolLarge m_iszParamName; // 0x4c0	
	float m_flFloatValue; // 0x4c8	
	
	// Datamap fields:
	// uint64_t InputSetEventGuid; // 0x0
	// CUtlSymbolLarge InputSetParamName; // 0x0
	// float InputSetFloatValue; // 0x0
	// void m_nGUID; // 0x4b8
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Rutger_Pulse_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_AuraModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityThumper1VData : public CitadelAbilityVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Uppercut_Buff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1bf0
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityViscousBowlingVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TransformStartFx; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeFX; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_WallImpactFx; // 0x16a8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BallTrailFx; // 0x1788	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GroundImpactParticle; // 0x1868	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_JumpParticle; // 0x1948	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DirectionParticle; // 0x1a28	
	float m_flVerticalCameraOffsetLerpTime; // 0x1b08	
	float m_flVerticalCameraOffsetBias; // 0x1b0c	
	float m_flVerticalCameraOffset; // 0x1b10	
	float m_flDistanceCameraOffsetLerpTime; // 0x1b14	
	float m_flDistanceCameraOffsetBias; // 0x1b18	
	float m_flDistanceCameraOffset; // 0x1b1c	
	// MPropertyLeafSuggestionProviderFn
	CGlobalSymbol m_strPopGraphParamter; // 0x1b20	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_BallJumpSound; // 0x1b28	
	CSoundEventName m_EnterBallSound; // 0x1b38	
	CSoundEventName m_BallLoopSound; // 0x1b48	
	CSoundEventName m_ExitBallSound; // 0x1b58	
	CSoundEventName m_WallImpactSound; // 0x1b68	
	CSoundEventName m_PlayerImpactSound; // 0x1b78	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ImpactModifier; // 0x1b88	
	CEmbeddedSubclass< CCitadelModifier > m_DamagePreventionModifier; // 0x1b98	
	CEmbeddedSubclass< CCitadelModifier > m_RollingModifier; // 0x1ba8	
	// MPropertyStartGroup "+Ball Parameters"
	float m_flTransformToBallTime; // 0x1bb8	
	float m_flTransformFromBallTime; // 0x1bbc	
	float m_flAirTurnRatio; // 0x1bc0	
	float m_flWallTurnRatio; // 0x1bc4	
	float m_flTurnRatio; // 0x1bc8	
	float m_flDefaultBallSpeed; // 0x1bcc	
	float m_flFastBallSpeed; // 0x1bd0	
	float m_flSpeedAccel; // 0x1bd4	
	float m_flSpeedDeccel; // 0x1bd8	
	float m_flElasticity; // 0x1bdc	
	float m_flWallCheckGroundOffset; // 0x1be0	
	float m_flWallPauseTime; // 0x1be4	
	float m_flWallAngleMin; // 0x1be8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_Nearby_Enemy_Boost : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x610
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Base_BuildupVData : public CCitadelModifierVData
{
public:
	bool m_bUseBaseWeaponCycleTimeForDelay; // 0x5f8	
private:
	[[maybe_unused]] uint8_t __pad05f9[0x3]; // 0x5f9
public:
	float m_flCycleTimeDelayAdd; // 0x5fc	
	float m_flBuildUpDecayDelay; // 0x600	
	BuildupMode_t m_eBuildupMode; // 0x604	
	// MPropertyDescription "When true, effectiveness (distance falloff) will be applied to the buildup."
	bool m_bBuildupAffectedByEffectiveness; // 0x608	
	// MPropertyDescription "When true, the averaged effectiveness of the build up modifier will be passed to the fill modifier"
	bool m_bPassBuildupEffectivenessToFillModifier; // 0x609	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5de0
// Has VTable
// 
// MNetworkVarNames "CCitadelAbilityComponent::Storage_t m_CCitadelAbilityComponent"
// MNetworkVarNames "bool m_bPickedUp"
class CCitadelItemPickupRejuv : public CCitadelItemPickup
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelAbilityComponent"
	// MNetworkAlias "CCitadelAbilityComponent"
	// MNetworkTypeAlias "CCitadelAbilityComponent"
	CCitadelAbilityComponent m_CCitadelAbilityComponent; // 0x5bd0	
private:
	[[maybe_unused]] uint8_t __pad5dd8[0x4]; // 0x5dd8
public:
	// MNetworkEnable
	bool m_bPickedUp; // 0x5ddc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7a8
// Has VTable
class CMarkupVolumeTagged_NavGame : public CMarkupVolumeWithRef
{
public:
	bool m_bFloodFillAttribute; // 0x7a0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x680
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ZiplineBoostVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Gameplay"
	float m_flRampUpTime; // 0x5f8	
	float m_flPercentageSpeedIncrease; // 0x5fc	
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceStartBoost; // 0x600	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8d0
// Has VTable
class CCitadelViscousBall : public CCitadelModelEntity
{
public:
	CHandle< CCitadelBaseAbility > m_hAbility; // 0x8c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5e8
// Has VTable
class CTestEffect : public CBaseEntity
{
public:
	int32_t m_iLoop; // 0x4b8	
	int32_t m_iBeam; // 0x4bc	
	CBeam* m_pBeam[24]; // 0x4c0	
	GameTime_t m_flBeamTime[24]; // 0x580	
	GameTime_t m_flStartTime; // 0x5e0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xba8
// Has VTable
class CCitadel_Ability_Slork_Scald : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0xe0]; // 0xab0
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecDamagedTargets; // 0xb90	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_LashGrappleTarget : public CCitadelModifier
{
public:
	ParticleIndex_t m_nActiveRopeFX; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Snipe_Glow : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1a8
// Has VTable
class CCitadel_Modifier_TechOverflowProcWatcher : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x768
// Has VTable
class CScriptNavBlocker : public CFuncNavBlocker
{
public:
	Vector m_vExtent; // 0x758	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x960
// Has VTable
class CConstraintAnchor : public CBaseAnimGraph
{
public:
	float m_massScale; // 0x958	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Drone_Tracker : public CCitadelModifier
{
public:
	CHandle< CNPC_FlyingDrone > m_hDrone; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilitySlorkChompVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_ChompHobbled; // 0x14e8	
	CEmbeddedSubclass< CBaseModifier > m_ChompGrapple; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc70
// Has VTable
class CCitadel_Ability_Tokamak_HeatSinks : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcd0
// Has VTable
// 
// MNetworkVarNames "bool m_bFlying"
// MNetworkVarNames "bool m_bFlyingStarted"
// MNetworkVarNames "bool m_bIsGrabbing"
// MNetworkVarNames "bool m_bIsHoldingBomb"
// MNetworkVarNames "float m_flCurrentSpeed"
class CCitadel_Ability_Tengu_AirLift : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x1c]; // 0xab0
public:
	ParticleIndex_t m_nHoldBombEffect; // 0xacc	
private:
	[[maybe_unused]] uint8_t __pad0ad0[0x1f8]; // 0xad0
public:
	// MNetworkEnable
	bool m_bFlying; // 0xcc8	
	// MNetworkEnable
	bool m_bFlyingStarted; // 0xcc9	
	// MNetworkEnable
	bool m_bIsGrabbing; // 0xcca	
	// MNetworkEnable
	bool m_bIsHoldingBomb; // 0xccb	
	// MNetworkEnable
	float m_flCurrentSpeed; // 0xccc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_Nikuman : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityChronoSwapVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BubbleMoveModifier; // 0x14e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strSwapStarted; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_Frenzy_MoveSpeed : public CCitadelModifier
{
public:
	float m_flMoveSpeedPerStack; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
// 
// MNetworkVarNames "float m_flCameraDist"
// MNetworkVarNames "float m_flCameraPitch"
// MNetworkVarNames "float m_flCameraHeight"
// MNetworkVarNames "EHANDLE m_hTarget"
class CCitadelSpectateDirectedCamera : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x4]; // 0x4b8
public:
	// MNetworkEnable
	// MNetworkPriority "32"
	float m_flCameraDist; // 0x4bc	
	// MNetworkEnable
	float m_flCameraPitch; // 0x4c0	
	// MNetworkEnable
	float m_flCameraHeight; // 0x4c4	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTarget; // 0x4c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x788
// Has VTable
class CMarkupVolumeTagged_Nav : public CMarkupVolumeTagged
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa30
// Has VTable
class CInstancedSceneEntity : public CSceneEntity
{
public:
	CHandle< CBaseEntity > m_hOwner; // 0xa18	
	bool m_bHadOwner; // 0xa1c	
private:
	[[maybe_unused]] uint8_t __pad0a1d[0x3]; // 0xa1d
public:
	float m_flPostSpeakDelay; // 0xa20	
	float m_flPreDelay; // 0xa24	
	bool m_bIsBackground; // 0xa28	
	bool m_bRemoveOnCompletion; // 0xa29	
private:
	[[maybe_unused]] uint8_t __pad0a2a[0x2]; // 0xa2a
public:
	CHandle< CBaseEntity > m_hTarget; // 0xa2c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d8
// Has VTable
class CInfoTrooperSpawn : public CServerOnlyPointEntity
{
public:
	int32_t m_iLane; // 0x4b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityExplosiveBarrelVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BarrelExplodeParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_MirvExplodeParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BarrelBurnParticle; // 0x16a8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplodeSound; // 0x1788	
	CSoundEventName m_strMirvExplodeSound; // 0x1798	
	CSoundEventName m_strRiccochetSound; // 0x17a8	
	CSoundEventName m_strBarrelSoundLp; // 0x17b8	
	CSoundEventName m_strBarrelLaunchSound; // 0x17c8	
	CSoundEventName m_strBarrelMeleedSound; // 0x17d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17b0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_MobileResupplyVData : public CitadelAbilityVData
{
public:
	float m_flResupplyForceScale; // 0x14e8	
	float m_flResupplyUp; // 0x14ec	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strKilledSound; // 0x14f0	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_AuraModifier; // 0x1500	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_DispenserModel; // 0x1510	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SprayParticle; // 0x15f0	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DestroyedParticle; // 0x16d0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Fervor_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FervorParticle; // 0x5f8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BonusesModifier; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_RegeneratingBulletShield : public CCitadel_Modifier_BaseShield
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_WeaponPowerForHealth : public CCitadelModifier
{
public:
	float m_flHealthDrained; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x750
// Has VTable
class CLightEnvironmentEntity : public CLightDirectionalEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x508
// Has VTable
// 
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
class CInfoTrooperNeutralCamp : public CPointEntity
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04d0[0x18]; // 0x4d0
public:
	CUtlSymbolLarge m_iszCampName; // 0x4e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad8
// Has VTable
class CCitadel_Item_Stasis_Bomb : public CCitadel_Item_Bubble
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d8
// Has VTable
class CLogicActiveAutosave : public CLogicAutosave
{
public:
	int32_t m_TriggerHitPoints; // 0x4c8	
	float m_flTimeToTrigger; // 0x4cc	
	GameTime_t m_flStartTime; // 0x4d0	
	float m_flDangerousTime; // 0x4d4	
	
	// Datamap fields:
	// void CLogicActiveAutosaveSaveThink; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CEnvBeverage : public CBaseEntity
{
public:
	bool m_CanInDispenser; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04b9[0x3]; // 0x4b9
public:
	int32_t m_nBeverageType; // 0x4bc	
	
	// Datamap fields:
	// void InputActivate; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityTokamakHeatSinksInherentVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HotTracerParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HotWeaponFxParticle; // 0x15c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strHotWeaponShootSound; // 0x16a8	
	CSoundEventName m_strOverheatRed; // 0x16b8	
	CSoundEventName m_strOverheatFull; // 0x16c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x688
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TangoTether_TetherVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_TetherSound; // 0x5f8	
	CSoundEventName m_HealSound; // 0x608	
	CSoundEventName m_HitIndicator; // 0x618	
	CSoundEventName m_GrappleHitSound; // 0x628	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x638	
	CEmbeddedSubclass< CCitadelModifier > m_DisconnectingModifier; // 0x648	
	CEmbeddedSubclass< CCitadelModifier > m_DisconnectedModifier; // 0x658	
	CEmbeddedSubclass< CCitadelModifier > m_LockedTargetModifier; // 0x668	
	// MPropertyStartGroup "Gameplay"
	float m_flMinConnectTime; // 0x678	
	float m_flDisconnectDistanceBuffer; // 0x67c	
	float m_flCandidateCloserDistance; // 0x680	
	float m_flTargetAwayDistance; // 0x684	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbe8
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_hProjectile"
// MNetworkVarNames "float m_flArrowSpeed"
// MNetworkVarNames "GameTime_t m_flSnapAnglesBackTime"
class CCitadel_Ability_WreckerTeleport : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x8]; // 0xab0
public:
	// MNetworkEnable
	CHandle< CBaseEntity > m_hProjectile; // 0xab8	
	// MNetworkEnable
	float m_flArrowSpeed; // 0xabc	
	// MNetworkEnable
	GameTime_t m_flSnapAnglesBackTime; // 0xac0	
	float m_flCastTimeDamage; // 0xac4	
	GameTime_t m_flCastTime; // 0xac8	
	bool m_bNeedsExplosion; // 0xacc	
private:
	[[maybe_unused]] uint8_t __pad0acd[0x3]; // 0xacd
public:
	Vector m_vProjectileRemovedOrigin; // 0xad0	
	QAngle m_angCasterAnglesAtCastTime; // 0xadc	
	float m_flTravelDistance; // 0xae8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_SnipeGlowVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_GlowParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x168
// Has VTable
class CCitadel_Modifier_ChargeDragEnemy : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x70]; // 0xc8
public:
	QAngle m_qRelativeOffset; // 0x138	
	float m_flRelativeDist; // 0x144	
	float m_flMaxDist; // 0x148	
	Vector m_vecOffsetDir; // 0x14c	
	Vector m_vecStartPosition; // 0x158	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x128
// Has VTable
class CCitadel_Modifier_Containment_Victim : public CCitadelModifier
{
public:
	float m_flGoalHeight; // 0xc8	
	float m_flFallRate; // 0xcc	
	ParticleIndex_t m_nFXIndex; // 0xd0	
	ParticleIndex_t m_nFXIndexVictim; // 0xd4	
	ParticleIndex_t m_nChainFxIndex; // 0xd8	
	float m_flTetherRadius; // 0xdc	
	Vector m_vecOrigin; // 0xe0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x980
// Has VTable
class CCitadel_GrandFinaleStage : public CBaseAnimGraph
{
public:
	Vector m_vStartPos; // 0x958	
	Vector m_vEndPos; // 0x964	
	GameTime_t m_flStartEmitTime; // 0x970	
	GameTime_t m_flEndEmitTime; // 0x974	
	int32_t m_nTouchCount; // 0x978	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xaa0
// Has VTable
class CCitadel_Announcer : public CCitadel_Announcer_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9c8
// Has VTable
class CScriptTriggerHurt : public CTriggerHurt
{
public:
	Vector m_vExtent; // 0x9b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x290
// Has VTable
class CCitadel_Modifier_VacuumAura : public CCitadelModifierAura
{
private:
	[[maybe_unused]] uint8_t __pad00e8[0x188]; // 0xe8
public:
	CUtlVector< CHandle< CBaseEntity > > m_hEnemyHeroInVacuum; // 0x270	
	int32_t m_nNumPlayersKilled; // 0x288	
	GameTime_t m_tLastDamageTime; // 0x28c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe8
// Has VTable
class CCitadelModifierAura_Default : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f0
// Has VTable
class CMathColorBlend : public CLogicalEntity
{
public:
	float m_flInMin; // 0x4b8	
	float m_flInMax; // 0x4bc	
	Color m_OutColor1; // 0x4c0	
	Color m_OutColor2; // 0x4c4	
	CEntityOutputTemplate< Color > m_OutValue; // 0x4c8	
	
	// Datamap fields:
	// float InputValue; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x540
// Has VTable
// 
// MNetworkVarNames "string_t m_iszOverlayNames"
// MNetworkVarNames "float32 m_flOverlayTimes"
// MNetworkVarNames "GameTime_t m_flStartTime"
// MNetworkVarNames "int32 m_iDesiredOverlay"
// MNetworkVarNames "bool m_bIsActive"
class CEnvScreenOverlay : public CPointEntity
{
public:
	// MNetworkEnable
	CUtlSymbolLarge m_iszOverlayNames[10]; // 0x4b8	
	// MNetworkEnable
	// MNetworkBitCount "11"
	// MNetworkMinValue "-1.000000"
	// MNetworkMaxValue "63.000000"
	float m_flOverlayTimes[10]; // 0x508	
	// MNetworkEnable
	GameTime_t m_flStartTime; // 0x530	
	// MNetworkEnable
	int32_t m_iDesiredOverlay; // 0x534	
	// MNetworkEnable
	bool m_bIsActive; // 0x538	
	
	// Datamap fields:
	// void InputStartOverlay; // 0x0
	// void InputStopOverlay; // 0x0
	// int32_t InputSwitchOverlay; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CCitadel_Ability_Wraith_RapidFire : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ShieldImpactVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShieldBreakParticle; // 0x5f8	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_ShieldBreakSound; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc28
// Has VTable
class CCitadelPlayerPawnBase : public CBasePlayerPawn
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x940
// Has VTable
// 
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
class CTriggerItemShop : public CBaseTrigger
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0x918	
	Vector m_vAudioOffset; // 0x930	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
// 
// MNetworkVarNames "CAttributeContainer m_AttributeManager"
class CEconEntity : public CBaseFlex
{
private:
	[[maybe_unused]] uint8_t __pad09e8[0x10]; // 0x9e8
public:
	// MNetworkEnable
	CAttributeContainer m_AttributeManager; // 0x9f8	
	CHandle< CBaseEntity > m_hOldProvidee; // 0xb38	
	int32_t m_iOldOwnerClass; // 0xb3c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
class CCitadel_Item_Charge_Mastery : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x268
// Has VTable
class CCitadel_Modifier_Ult_Shadow : public CCitadel_Modifier_Invis
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Infuser_VData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc70
// Has VTable
// 
// MNetworkVarNames "float m_flBoostYaw"
// MNetworkVarNames "Vector m_vecCrashPosition"
// MNetworkVarNames "Vector m_vecCrashDirection"
// MNetworkVarNames "ELeapState_t m_eLeapState"
// MNetworkVarNames "GameTime_t m_flStateEnterTime"
// MNetworkVarNames "CCitadelAutoScaledTime m_flNextStateTime"
// MNetworkVarNames "CCitadelAutoScaledTime m_flBoostEndTime"
class CCitadel_Ability_Bull_Leap : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	float m_flBoostYaw; // 0xab0	
	// MNetworkEnable
	Vector m_vecCrashPosition; // 0xab4	
	// MNetworkEnable
	Vector m_vecCrashDirection; // 0xac0	
	// MNetworkEnable
	// MNetworkChangeCallback "OnLeapStateChanged"
	ELeapState_t m_eLeapState; // 0xacc	
private:
	[[maybe_unused]] uint8_t __pad0acd[0x3]; // 0xacd
public:
	// MNetworkEnable
	GameTime_t m_flStateEnterTime; // 0xad0	
private:
	[[maybe_unused]] uint8_t __pad0ad4[0x4]; // 0xad4
public:
	// MNetworkEnable
	CCitadelAutoScaledTime m_flNextStateTime; // 0xad8	
	// MNetworkEnable
	CCitadelAutoScaledTime m_flBoostEndTime; // 0xaf0	
private:
	[[maybe_unused]] uint8_t __pad0b08[0x158]; // 0xb08
public:
	Vector m_vecLastVel; // 0xc60	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1010
// Has VTable
// 
// MGetKV3ClassDefaults
class CNPC_MidBossVData : public CAI_CitadelNPCVData
{
public:
	int32_t m_iStartingHealth; // 0xe18	
	int32_t m_iHealthGainPerMinute; // 0xe1c	
	float m_flAggroTime; // 0xe20	
private:
	[[maybe_unused]] uint8_t __pad0e24[0x4]; // 0xe24
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DyingSmallExplosion; // 0xe28	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DyingFinalExplosion; // 0xf08	
	float m_flDyingDuration; // 0xfe8	
private:
	[[maybe_unused]] uint8_t __pad0fec[0x4]; // 0xfec
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_KnockbackAura; // 0xff0	
	CEmbeddedSubclass< CCitadelModifier > m_AggroEnemy; // 0x1000	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc0
// Has VTable
// Is Abstract
class CTeamplayRules : public CMultiplayRules
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x718
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Thumper_PullAOE_VData : public CCitadelModifierAuraVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AuraParticle; // 0x638	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x208
// Has VTable
class CCitadel_Modifier_Nikuman : public CCitadelModifierAura
{
private:
	[[maybe_unused]] uint8_t __pad00e8[0x118]; // 0xe8
public:
	int32_t m_nTotalSelfHeal; // 0x200	
	int32_t m_nTotalTeammateHeal; // 0x204	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad0
// Has VTable
class CCitadel_TechUpgrade_Infuser : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d0
// Has VTable
class CAI_LookTarget : public CPointEntity
{
public:
	int32_t m_iContext; // 0x4b8	
	int32_t m_iPriority; // 0x4bc	
	bool m_bDisabled; // 0x4c0	
private:
	[[maybe_unused]] uint8_t __pad04c1[0x3]; // 0x4c1
public:
	GameTime_t m_flTimeNextAvailable; // 0x4c4	
	float m_flMaxDist; // 0x4c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1890
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Tengu_StoneFormVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StoneFormParticle; // 0x16a8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_CastTargetSound; // 0x1788	
	CSoundEventName m_strImpactSound; // 0x1798	
	// MPropertyDescription "Model"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > > m_strTrueFormModel; // 0x17a8	
	// MPropertyStartGroup "+Stone Form Params"
	float m_flLandHoldTime; // 0x1888	
	float m_flRisingTime; // 0x188c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_UltComboVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_MeleeSwingParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_MeleeImpactParticle; // 0x15c8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SelfModifier; // 0x16a8	
	CEmbeddedSubclass< CCitadelModifier > m_TargetModifier; // 0x16b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd40
// Has VTable
class CCitadel_Ability_Shotgun_Astro : public CCitadel_Ability_PrimaryWeapon
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Astro_Rifle_Self : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_DragEnemyVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Gameplay"
	float m_flForwardOffset; // 0x5f8	
	float m_flVerticalOffset; // 0x5fc	
	float m_flDragDistance; // 0x600	
	float m_flForceDistScale; // 0x604	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x250
// Has VTable
class CCitadel_Modifier_SilenceProcWatcher : public CCitadel_Modifier_BaseEventProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_WeaponUpgrade_HeadshotBooster : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityDustStormVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DustStormAura; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_GrenadeTrailModifier; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1540
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_UtilityUpgrade_DebuffImmunityVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffImmunityModifier; // 0x1530	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_UtilityUpgrade_RocketBoosterVData : public CCitadel_UtilityUpgrade_RocketBootsVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LandingParticle; // 0x1620	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AoEPreviewParticle; // 0x1700	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DropDownStartParticle; // 0x17e0	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_DropDownStartSound; // 0x18c0	
	CSoundEventName m_LandingSound; // 0x18d0	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x18e0	
	// MPropertyStartGroup "Gameplay"
	float m_flSlamEnabledTime; // 0x18f0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x738
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_CritShotVData : public CCitadel_Modifier_BaseBulletPreRollProcVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x718	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_CritSound; // 0x728	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_WarpStone_Caster_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_playerBuffSelf; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_SiphonBullets_HealthLoss_VData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SiphonParticle; // 0x5f8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_HealModifier; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x618
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BerserkerVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_BerserkerSound; // 0x5f8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_StackModifier; // 0x608	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Bullet_Shield_Pulse : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_Delayed_Stun : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x70]; // 0xc8
public:
	float m_flRadius; // 0x138	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe0
// Has VTable
class CCitadel_Modifier_HeroUpgradeBonuses : public CCitadelModifier
{
public:
	CCitadelPlayerPawn* m_pOwningPlayer; // 0xc8	
	float m_flWeaponPower; // 0xd0	
	float m_flArmorPower; // 0xd4	
	float m_flTechPower; // 0xd8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1558
// Has VTable
// 
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkExcludeByName "m_baseLayer.m_hSequence"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByName "m_flEncodedController"
// MNetworkExcludeByName "m_flPoseParameter"
// MNetworkUserGroupProxy "CCitadelPlayerPawn"
// MNetworkUserGroupProxy "CCitadelPlayerPawn"
// MNetworkVarTypeOverride "CCitadelPlayer_CameraServices m_pCameraServices"
// MNetworkIncludeByName "m_pCameraServices"
// MNetworkVarTypeOverride "CCitadelPlayer_MovementServices m_pMovementServices"
// MNetworkIncludeByName "m_pMovementServices"
// MNetworkVarNames "QAngle m_angClientCamera"
// MNetworkVarNames "QAngle m_angEyeAngles"
// MNetworkVarNames "QAngle m_angLockedEyeAngles"
// MNetworkVarNames "int32 m_nLevel"
// MNetworkVarNames "int32 m_nCurrencies"
// MNetworkVarNames "int32 m_nSpentCurrencies"
// MNetworkVarNames "GameTime_t m_flRespawnTime"
// MNetworkVarNames "GameTime_t m_flLastSpawnTime"
// MNetworkVarNames "bool m_bInRegenerationZone"
// MNetworkVarNames "bool m_bInItemShopZone"
// MNetworkVarNames "GameTime_t m_timeRevealedOnMinimapByNPC"
// MNetworkVarNames "EntitySubclassID_t m_vecFullSellPriceItems"
// MNetworkVarNames "FullSellPriceAbilityUpgrades_t m_vecFullSellPriceAbilityUpgrades"
// MNetworkVarNames "bool m_bNetworkDisconnected"
// MNetworkVarNames "bool m_bHasIncomingThreats"
// MNetworkVarNames "bool m_bLearningAbility"
// MNetworkVarNames "int m_nFlashStartTick"
// MNetworkVarNames "int m_nFlashMaxStartTick"
// MNetworkVarNames "int m_nFlashFadeStartTick"
// MNetworkVarNames "int m_nFlashEndTick"
// MNetworkVarNames "int8 m_nFlashMaxAlpha"
// MNetworkVarNames "int32 m_nDeducedLane"
// MNetworkVarNames "bool m_bDismissedReportCard"
// MNetworkVarNames "float m_flCurrentHealingAmount"
// MNetworkVarNames "CCitadelAbilityComponent::Storage_t m_CCitadelAbilityComponent"
// MNetworkVarNames "CCitadelHeroComponent::Storage_t m_CCitadelHeroComponent"
// MNetworkVarNames "CCitadelRegenComponent::Storage_t m_CCitadelRegenComponent"
// MNetworkVarNames "CCitadelMinimapComponent::Storage_t m_CCitadelMinimapComponent"
// MNetworkVarNames "CMsgLaneColor m_eZipLineLaneColor"
// MNetworkVarNames "bool m_bAnimGraphMovementClipped"
// MNetworkVarNames "bool m_bAnimGraphMovementDisableGravity"
// MNetworkVarNames "bool m_bAnimGraphMovementDirectAirControl"
// MNetworkVarNames "GameTime_t m_flPredTimeSlowedStart"
// MNetworkVarNames "GameTime_t m_flPredTimeSlowedEnd"
// MNetworkVarNames "float32 m_flPredSlowSpeed"
// MNetworkVarNames "GameTime_t m_flTimeSlowedStart"
// MNetworkVarNames "GameTime_t m_flTimeSlowedEnd"
// MNetworkVarNames "float32 m_flSlowSpeed"
// MNetworkVarNames "GameTime_t m_flSprintAnimSuppressEndTime"
class CCitadelPlayerPawn : public CCitadelPlayerPawnBase
{
private:
	[[maybe_unused]] uint8_t __pad0c28[0x18]; // 0xc28
public:
	int32_t m_arrGoldSources[32]; // 0xc40	
	// MNetworkEnable
	// MNetworkUserGroup "SourceTVExclusive"
	// MNetworkBitCount "11"
	// MNetworkPriority "32"
	QAngle m_angClientCamera; // 0xcc0	
	// MNetworkEnable
	// MNetworkUserGroup "RemotePlayersOnly"
	// MNetworkEncoder "qangle"
	// MNetworkBitCount "11"
	// MNetworkPriority "32"
	QAngle m_angEyeAngles; // 0xccc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	QAngle m_angLockedEyeAngles; // 0xcd8	
	// MNetworkEnable
	int32_t m_nLevel; // 0xce4	
	// MNetworkEnable
	int32_t m_nCurrencies[4]; // 0xce8	
	// MNetworkEnable
	int32_t m_nSpentCurrencies[4]; // 0xcf8	
	// MNetworkEnable
	GameTime_t m_flRespawnTime; // 0xd08	
	// MNetworkEnable
	GameTime_t m_flLastSpawnTime; // 0xd0c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerAndObserversExclusive"
	bool m_bInRegenerationZone; // 0xd10	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bInItemShopZone; // 0xd11	
private:
	[[maybe_unused]] uint8_t __pad0d12[0x2]; // 0xd12
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerAndObserversExclusive"
	GameTime_t m_timeRevealedOnMinimapByNPC; // 0xd14	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	CNetworkUtlVectorBase< CUtlStringToken > m_vecFullSellPriceItems; // 0xd18	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	CNetworkUtlVectorBase< FullSellPriceAbilityUpgrades_t > m_vecFullSellPriceAbilityUpgrades; // 0xd30	
	// MNetworkEnable
	bool m_bNetworkDisconnected; // 0xd48	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bHasIncomingThreats; // 0xd49	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bLearningAbility; // 0xd4a	
private:
	[[maybe_unused]] uint8_t __pad0d4b[0x1]; // 0xd4b
public:
	// MNetworkEnable
	int32_t m_nFlashStartTick; // 0xd4c	
	// MNetworkEnable
	int32_t m_nFlashMaxStartTick; // 0xd50	
	// MNetworkEnable
	int32_t m_nFlashFadeStartTick; // 0xd54	
	// MNetworkEnable
	int32_t m_nFlashEndTick; // 0xd58	
	// MNetworkEnable
	int8_t m_nFlashMaxAlpha; // 0xd5c	
private:
	[[maybe_unused]] uint8_t __pad0d5d[0x3]; // 0xd5d
public:
	// MNetworkEnable
	int32_t m_nDeducedLane; // 0xd60	
	// MNetworkEnable
	bool m_bDismissedReportCard; // 0xd64	
private:
	[[maybe_unused]] uint8_t __pad0d65[0x3]; // 0xd65
public:
	// MNetworkEnable
	float m_flCurrentHealingAmount; // 0xd68	
	CHandle< CCitadelBaseAbility > m_hAbilityRequiresDebounce; // 0xd6c	
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelAbilityComponent"
	// MNetworkAlias "CCitadelAbilityComponent"
	// MNetworkTypeAlias "CCitadelAbilityComponent"
	// MNetworkPriority "32"
	CCitadelAbilityComponent m_CCitadelAbilityComponent; // 0xd70	
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelHeroComponent"
	// MNetworkAlias "CCitadelHeroComponent"
	// MNetworkTypeAlias "CCitadelHeroComponent"
	// -> m_nHeroID - 0xf8c
	// -> m_nHeroLoading - 0xf90
	CCitadelHeroComponent m_CCitadelHeroComponent; // 0xf78	
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelRegenComponent"
	// MNetworkAlias "CCitadelRegenComponent"
	// MNetworkTypeAlias "CCitadelRegenComponent"
	CCitadelRegenComponent m_CCitadelRegenComponent; // 0xf98	
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelMinimapComponent"
	// MNetworkAlias "CCitadelMinimapComponent"
	// MNetworkTypeAlias "CCitadelMinimapComponent"
	CCitadelMinimapComponent m_CCitadelMinimapComponent; // 0x1118	
	bool m_bHasShopOpen; // 0x1130	
private:
	[[maybe_unused]] uint8_t __pad1131[0x3]; // 0x1131
public:
	ECitadelPingLocation_t m_eCurrentPingLocation; // 0x1134	
private:
	[[maybe_unused]] uint8_t __pad1138[0xc]; // 0x1138
public:
	float m_flLastRegenThinkTime; // 0x1144	
	float m_flCitadelDamageAccumulator; // 0x1148	
private:
	[[maybe_unused]] uint8_t __pad114c[0x2c]; // 0x114c
public:
	int32_t m_nBulletsFiredAtUs; // 0x1178	
	int32_t m_nBulletsHitOnUs; // 0x117c	
	int32_t m_nHeadshotsOnUs; // 0x1180	
	GameTime_t m_flLastGameStatsRecorded; // 0x1184	
	float m_flUnusedGoldRemainder; // 0x1188	
	float m_flUnusedAbilityRemainder; // 0x118c	
	int32_t m_nBulletsFiredAtEnemyHeroes; // 0x1190	
	int32_t m_nBulletsHitOnEnemyHeroes; // 0x1194	
	int32_t m_nHeadshotsOnEnemyHeroes; // 0x1198	
	int32_t m_nBulletsHitOnImmobileEnemyHeroes; // 0x119c	
	int32_t m_nHeadshotsOnImmobileEnemyHeroes; // 0x11a0	
	CHandle< CBaseEntity > m_hEnemyHeroClientAimedAtAttackTime; // 0x11a4	
	bool m_bHasOverrideSpawnPos; // 0x11a8	
private:
	[[maybe_unused]] uint8_t __pad11a9[0x3]; // 0x11a9
public:
	Vector m_vecOverrideSpawnPos; // 0x11ac	
	int32_t m_iKillStreak; // 0x11b8	
	bool m_bHasStartedPlaying; // 0x11bc	
private:
	[[maybe_unused]] uint8_t __pad11bd[0x3]; // 0x11bd
public:
	CHandle< CBaseEntity > m_hRevengeTarget; // 0x11c0	
private:
	[[maybe_unused]] uint8_t __pad11c4[0xc]; // 0x11c4
public:
	GameTime_t m_flLastHurtTimeByEnemyTeam; // 0x11d0	
	GameTime_t m_flLastTimeLookedAtByDirector; // 0x11d4	
	CTakeDamageResult m_ragdollDamage; // 0x11d8	
	CUtlVector< CHandle< CBaseEntity > > m_vecThreats; // 0x11f0	
private:
	[[maybe_unused]] uint8_t __pad1208[0x12c]; // 0x1208
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	CMsgLaneColor m_eZipLineLaneColor; // 0x1334	
	bool m_bCanBecomeRagdoll; // 0x1338	
private:
	[[maybe_unused]] uint8_t __pad1339[0x3]; // 0x1339
public:
	float m_blindUntilTime; // 0x133c	
	float m_blindStartTime; // 0x1340	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bAnimGraphMovementClipped; // 0x1344	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bAnimGraphMovementDisableGravity; // 0x1345	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	bool m_bAnimGraphMovementDirectAirControl; // 0x1346	
	bool m_bLastMoveWasAnimGraph; // 0x1347	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	GameTime_t m_flPredTimeSlowedStart; // 0x1348	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	GameTime_t m_flPredTimeSlowedEnd; // 0x134c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	float m_flPredSlowSpeed; // 0x1350	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	GameTime_t m_flTimeSlowedStart[4]; // 0x1354	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	GameTime_t m_flTimeSlowedEnd[4]; // 0x1364	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	float m_flSlowSpeed[4]; // 0x1374	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerExclusive"
	GameTime_t m_flSprintAnimSuppressEndTime; // 0x1384	
	bool m_bPreventAbilityLearning; // 0x1388	
private:
	[[maybe_unused]] uint8_t __pad1389[0x3]; // 0x1389
public:
	int32_t m_iCurSlowSlot; // 0x138c	
private:
	[[maybe_unused]] uint8_t __pad1390[0x4]; // 0x1390
public:
	ParticleIndex_t m_nRespawnParticleIndex; // 0x1394	
	ParticleIndex_t m_nShoppingParticle; // 0x1398	
private:
	[[maybe_unused]] uint8_t __pad139c[0x2c]; // 0x139c
public:
	CCitadelPlayerBot* m_pBot; // 0x13c8	
private:
	[[maybe_unused]] uint8_t __pad13d0[0x168]; // 0x13d0
public:
	Vector m_vShootTestOffsetStanding; // 0x1538	
	Vector m_vShootTestOffsetCrouching; // 0x1544	
	GameTime_t m_leanStartTime; // 0x1550	
	
	// Datamap fields:
	// CCitadelPlayer_CameraServices m_pCameraServices; // 0xab0
	// CCitadelPlayer_MovementServices m_pMovementServices; // 0xab8
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x958
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "HPostProcessingStrong m_hPostSettings"
// MNetworkVarNames "float m_flFadeDuration"
// MNetworkVarNames "float m_flMinLogExposure"
// MNetworkVarNames "float m_flMaxLogExposure"
// MNetworkVarNames "float m_flMinExposure"
// MNetworkVarNames "float m_flMaxExposure"
// MNetworkVarNames "float m_flExposureCompensation"
// MNetworkVarNames "float m_flExposureFadeSpeedUp"
// MNetworkVarNames "float m_flExposureFadeSpeedDown"
// MNetworkVarNames "float m_flTonemapEVSmoothingRange"
// MNetworkVarNames "bool m_bMaster"
// MNetworkVarNames "bool m_bExposureControl"
class CPostProcessingVolume : public CBaseTrigger
{
private:
	[[maybe_unused]] uint8_t __pad0918[0x10]; // 0x918
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCPostProcessingResource > m_hPostSettings; // 0x928	
	// MNetworkEnable
	float m_flFadeDuration; // 0x930	
	// MNetworkEnable
	float m_flMinLogExposure; // 0x934	
	// MNetworkEnable
	float m_flMaxLogExposure; // 0x938	
	// MNetworkEnable
	float m_flMinExposure; // 0x93c	
	// MNetworkEnable
	float m_flMaxExposure; // 0x940	
	// MNetworkEnable
	float m_flExposureCompensation; // 0x944	
	// MNetworkEnable
	float m_flExposureFadeSpeedUp; // 0x948	
	// MNetworkEnable
	float m_flExposureFadeSpeedDown; // 0x94c	
	// MNetworkEnable
	float m_flTonemapEVSmoothingRange; // 0x950	
	// MNetworkEnable
	bool m_bMaster; // 0x954	
	// MNetworkEnable
	bool m_bExposureControl; // 0x955	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb40
// Has VTable
class CCitadel_Item_PhantomStrike : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x768
// Has VTable
// 
// MNetworkVarNames "float32 m_flLightScale"
// MNetworkVarNames "float32 m_Radius"
class CSpotlightEnd : public CBaseModelEntity
{
public:
	// MNetworkEnable
	float m_flLightScale; // 0x748	
	// MNetworkEnable
	float m_Radius; // 0x74c	
	Vector m_vSpotlightDir; // 0x750	
	Vector m_vSpotlightOrg; // 0x75c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7f0
// Has VTable
class CGamePlayerZone : public CRuleBrushEntity
{
public:
	CEntityIOOutput m_OnPlayerInZone; // 0x750	
	CEntityIOOutput m_OnPlayerOutZone; // 0x778	
	CEntityOutputTemplate< int32 > m_PlayersInCount; // 0x7a0	
	CEntityOutputTemplate< int32 > m_PlayersOutCount; // 0x7c8	
	
	// Datamap fields:
	// void InputCountPlayersInZone; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb60
// Has VTable
class CCitadel_Ability_Shotgun_Astro_Backwards : public CCitadel_Ability_PrimaryWeapon
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_PoisonBullets : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb20
// Has VTable
class CCitadel_Ability_SelfVacuum : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x110
// Has VTable
class CCitadel_Modifier_ShieldTracker_Magic : public CCitadel_Modifier_ShieldTracker_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xba0
// Has VTable
class CCitadelItemMetal : public CItemGeneric
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9c8
// Has VTable
class CCitadel_Projectile_DustStorm : public CCitadelProjectile
{
public:
	int32_t m_cTicksNoMovement; // 0x800	
	CHandle< CCitadel_Ability_Dust_Storm > m_DustStormAbility; // 0x804	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_SunfireCataclysm_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SunfireCataclysmModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_VacuumModifier; // 0x14f8	
	CEmbeddedSubclass< CCitadelModifier > m_EMPModifier; // 0x1508	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SphereChargeParticle; // 0x1518	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ColumnParticle; // 0x15f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplosionParticle; // 0x16d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strExplosionSound; // 0x17b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x168
// Has VTable
class CCitadel_Modifier_VacuumAuraTarget : public CCitadel_Modifier_Stunned
{
private:
	[[maybe_unused]] uint8_t __pad00d0[0x70]; // 0xd0
public:
	float m_flMaxDist; // 0x140	
	Vector m_vecOffsetDir; // 0x144	
	Vector m_vecStartPosition; // 0x150	
	float m_flAOERadius; // 0x15c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CModifier_CloakingDevice_Active_Ambush : public CCitadelModifier
{
public:
	ParticleIndex_t m_nAmbushParticle; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1580
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_ArmorUpgrade_AblativeCoatVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_RestoreEffectModifier; // 0x1530	
	CEmbeddedSubclass< CCitadelModifier > m_OnTakeDamageEffectModifier; // 0x1540	
	CEmbeddedSubclass< CCitadelModifier > m_OnBreakEffectModifier; // 0x1550	
	CEmbeddedSubclass< CCitadelModifier > m_ResistBuffModifier; // 0x1560	
	// MPropertyStartGroup "Gameplay"
	float m_flOnTakeDamageEffectDuration; // 0x1570	
	float m_flOnBreakEffectDuration; // 0x1574	
	float m_flOnRestoreEffectDuration; // 0x1578	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_ActiveDisarm_SpiritSteal : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x968
// Has VTable
class CTriggerDetectExplosion : public CBaseTrigger
{
private:
	[[maybe_unused]] uint8_t __pad0918[0x28]; // 0x918
public:
	CEntityIOOutput m_OnDetectedExplosion; // 0x940	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
class CSoundStackSave : public CLogicalEntity
{
public:
	CUtlSymbolLarge m_iszStackName; // 0x4b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x148
// Has VTable
class CCitadel_Modifier_Mirage_DjinnsReach_Chain : public CCitadelModifier
{
public:
	Vector m_vecOrigin; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcd8
// Has VTable
// 
// MNetworkVarNames "Vector m_vecTeleportPosition"
// MNetworkVarNames "Vector m_vecTeleportPositionNormal"
// MNetworkVarNames "ETelepunchState_t m_eTelepunchState"
// MNetworkVarNames "GameTime_t m_flNextStateTime"
class CCitadel_Ability_Viscous_Telepunch : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x1f8]; // 0xab0
public:
	// MNetworkEnable
	Vector m_vecTeleportPosition; // 0xca8	
	// MNetworkEnable
	Vector m_vecTeleportPositionNormal; // 0xcb4	
	// MNetworkEnable
	ETelepunchState_t m_eTelepunchState; // 0xcc0	
private:
	[[maybe_unused]] uint8_t __pad0cc1[0x3]; // 0xcc1
public:
	// MNetworkEnable
	GameTime_t m_flNextStateTime; // 0xcc4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd00
// Has VTable
// 
// MNetworkVarNames "CUtlVector<EHANDLE> m_vecPuddleModifiers"
class CCitadel_Ability_GooGrenade : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	CUtlVector< CHandle< CBaseEntity > > m_vecPuddleModifiers; // 0xab0	
private:
	[[maybe_unused]] uint8_t __pad0ac8[0x230]; // 0xac8
public:
	GameTime_t m_LastDetonateTime; // 0xcf8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_ViscousWeapon_Alt_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_strChargingParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FiringParticle; // 0x16a8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_ExplosionSound; // 0x1788	
	CSoundEventName m_ChargeSound; // 0x1798	
	CSoundEventName m_ShootSound; // 0x17a8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc68
// Has VTable
// 
// MNetworkVarNames "bool m_bAirCast"
class CCitadel_Ability_Chrono_TimeWall : public CCitadelBaseAbility
{
public:
	CHandle< CCitadelBulletTimeWarp > m_hWall; // 0xab0	
	Vector vecDir; // 0xab4	
	ParticleIndex_t m_hChargingParticle; // 0xac0	
	Vector m_vSpawnPos; // 0xac4	
	QAngle m_qAngles; // 0xad0	
	// MNetworkEnable
	bool m_bAirCast; // 0xadc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_ServerOnly : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c0
// Has VTable
// 
// MNetworkVarNames "CCitadelGameRules * m_pGameRules"
class CCitadelGameRulesProxy : public CGameRulesProxy
{
public:
	// MNetworkEnable
	// MNetworkTypeAlias "CCitadelGamerules*"
	// MNetworkPriority "32"
	CCitadelGameRules* m_pGameRules; // 0x4b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x990
// Has VTable
// 
// MNetworkVarNames "int m_iGoldReward"
class CCitadel_BreakablePropGoldPickup : public CCitadel_BreakablePropPickup
{
public:
	// MNetworkEnable
	int32_t m_iGoldReward; // 0x988	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb00
// Has VTable
class CCitadel_Ability_Cadence_SilenceContraptions : public CCitadelBaseDashCastAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x88
// Has VTable
class ConstraintSoundInfo
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	// -> m_prevSample - 0x8
	// -> m_fPrevSampleTime - 0x14
	// -> m_fIdealSampleRate - 0x18
	VelocitySampler m_vSampler; // 0x8	
private:
	[[maybe_unused]] uint8_t __pad001c[0x4]; // 0x1c
public:
	// -> eKeypoints - 0x28
	// -> m_keyPoints[2] - 0x2c
	// -> m_reversalSoundThresholds[3] - 0x34
	SimpleConstraintSoundProfile m_soundProfile; // 0x20	
	Vector m_forwardAxis; // 0x40	
private:
	[[maybe_unused]] uint8_t __pad004c[0x4]; // 0x4c
public:
	CUtlSymbolLarge m_iszTravelSoundFwd; // 0x50	
	CUtlSymbolLarge m_iszTravelSoundBack; // 0x58	
private:
	[[maybe_unused]] uint8_t __pad0060[0x8]; // 0x60
public:
	CUtlSymbolLarge m_iszReversalSounds[3]; // 0x68	
	bool m_bPlayTravelSound; // 0x80	
	bool m_bPlayReversalSound; // 0x81	
	
	// Datamap fields:
	// CUtlSymbolLarge m_iszReversalSounds[0]; // 0x68
	// CUtlSymbolLarge m_iszReversalSounds[1]; // 0x70
	// CUtlSymbolLarge m_iszReversalSounds[2]; // 0x78
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ShivDashVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DashParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DashTrailParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18a0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_BurrowVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplodeParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BurrowStartParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BurrowEndParticle; // 0x16a8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BurrowInGroundParticle; // 0x1788	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BurrowModifier; // 0x1868	
	CEmbeddedSubclass< CCitadelModifier > m_SpinModifier; // 0x1878	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strBurrowEndSound; // 0x1888	
	// MPropertyStartGroup "+Burrow Properties"
	float m_flChannelEndEnemyPopUpForce; // 0x1898	
	float m_flChannelEndEnemyPopUpCylinderHeight; // 0x189c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x238
// Has VTable
class CCitadel_Modifier_CritShot : public CCitadel_Modifier_BaseBulletPreRollProc
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7b8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Savior_VData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BuffParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TrailParticle; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1578
// Has VTable
class CNPC_YakuzaGangster : public CAI_CitadelNPC
{
public:
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_GANGSTER_IDLE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_YakuzaGangster")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_IDLE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_YakuzaGangster")->GetStaticFields()[1]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CSingleplayRules : public CGameRules
{
public:
	bool m_bSinglePlayerGameEnding; // 0xc0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x518
// Has VTable
class CFilterProximity : public CBaseFilter
{
public:
	float m_flRadius; // 0x510	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb48
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
class CEconWearable : public CEconEntity
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xad8
// Has VTable
class CCitadel_RestorativeGooCube : public CCitadelAnimatingModelEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_Cadence_AnthemAOE : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18c0
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityWreckerTeleportVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SpectatingProjectileParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ExplosionParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelParticle; // 0x16a8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastParticle; // 0x1788	
	float m_ArrowOffsetX; // 0x1868	
	float m_ArrowCameraDistance; // 0x186c	
	float m_ArrowCameraHeightOffset; // 0x1870	
	float m_ArrowInitialPitch; // 0x1874	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_GuidingModifier; // 0x1878	
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x1888	
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strExplodeSound; // 0x1898	
	// MPropertyStartGroup "Gameplay"
	float m_flTrackAmount; // 0x18a8	
	float m_flSpeedAccel; // 0x18ac	
	float m_flSpeedDeccel; // 0x18b0	
	float m_flBaseProjectileSpeed; // 0x18b4	
	float m_flMaxProjectileSpeed; // 0x18b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_Savior : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd0
// Has VTable
class CCitadel_Modifier_Objective_Regen : public CCitadelModifier
{
public:
	GameTime_t m_flLastAttackedTime; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BulletResistReductionStackVData : public CCitadelModifierVData
{
public:
	bool m_bSelfish; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
class CPlayer_ItemServices : public CPlayerPawnComponent
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_ArmorUpgrade_ActiveBulletShield : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd68
// Has VTable
// 
// MNetworkVarNames "ELashGrappleState m_EGrappleState"
// MNetworkVarNames "GameTime_t m_flStateEnterTime"
// MNetworkVarNames "GameTime_t m_flNextStateTime"
// MNetworkVarNames "GameTime_t m_flBoostEndTime"
class CCitadel_Ability_Lash_Ultimate : public CCitadelBaseLockonAbility
{
public:
	// MNetworkEnable
	ELashGrappleState m_EGrappleState; // 0xc20	
private:
	[[maybe_unused]] uint8_t __pad0c21[0x3]; // 0xc21
public:
	// MNetworkEnable
	GameTime_t m_flStateEnterTime; // 0xc24	
	// MNetworkEnable
	GameTime_t m_flNextStateTime; // 0xc28	
	// MNetworkEnable
	GameTime_t m_flBoostEndTime; // 0xc2c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xae8
// Has VTable
class CAbility_Rutger_CheatDeath : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BoucePadVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StompParticle; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strImpactSound; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1608
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityStompVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_StompParticle; // 0x14e8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strStompExplosionSound; // 0x15c8	
	CSoundEventName m_strCastDelayLocalPlayerSound; // 0x15d8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x15e8	
	CEmbeddedSubclass< CCitadelModifier > m_BulletResistModifier; // 0x15f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc20
// Has VTable
class CCitadel_Ability_PassiveBeefy : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x18]; // 0xab0
public:
	GameTime_t m_flLastHealTime; // 0xac8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityStormCloudVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_StormCloudModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CCitadel_Modifier_Tech_Bleed : public CCitadelModifier
{
public:
	float m_flDamage; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_HoldingGoldenIdol : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x70]; // 0xc8
public:
	ParticleIndex_t m_iIdolParticle; // 0x138	
	int32_t m_nGoldValue; // 0x13c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5b8
// Has VTable
class CMathCounter : public CLogicalEntity
{
public:
	float m_flMin; // 0x4b8	
	float m_flMax; // 0x4bc	
	bool m_bHitMin; // 0x4c0	
	bool m_bHitMax; // 0x4c1	
	bool m_bDisabled; // 0x4c2	
private:
	[[maybe_unused]] uint8_t __pad04c3[0x5]; // 0x4c3
public:
	CEntityOutputTemplate< float32 > m_OutValue; // 0x4c8	
	CEntityOutputTemplate< float32 > m_OnGetValue; // 0x4f0	
	CEntityIOOutput m_OnHitMin; // 0x518	
	CEntityIOOutput m_OnHitMax; // 0x540	
	CEntityIOOutput m_OnChangedFromMin; // 0x568	
	CEntityIOOutput m_OnChangedFromMax; // 0x590	
	
	// Datamap fields:
	// float InputAdd; // 0x0
	// float InputDivide; // 0x0
	// float InputMultiply; // 0x0
	// float InputSetValue; // 0x0
	// float InputSetValueNoFire; // 0x0
	// float InputSubtract; // 0x0
	// float InputSetHitMax; // 0x0
	// float InputSetHitMin; // 0x0
	// void InputGetValue; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// int32_t startvalue; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f8
// Has VTable
// 
// MNetworkVarNames "string_t m_worldName"
// MNetworkVarNames "string_t m_layerName"
// MNetworkVarNames "bool m_bWorldLayerVisible"
// MNetworkVarNames "bool m_bEntitiesSpawned"
class CInfoWorldLayer : public CBaseEntity
{
public:
	CEntityIOOutput m_pOutputOnEntitiesSpawned; // 0x4b8	
	// MNetworkEnable
	CUtlSymbolLarge m_worldName; // 0x4e0	
	// MNetworkEnable
	CUtlSymbolLarge m_layerName; // 0x4e8	
	// MNetworkEnable
	bool m_bWorldLayerVisible; // 0x4f0	
	// MNetworkEnable
	bool m_bEntitiesSpawned; // 0x4f1	
	bool m_bCreateAsChildSpawnGroup; // 0x4f2	
private:
	[[maybe_unused]] uint8_t __pad04f3[0x1]; // 0x4f3
public:
	uint32_t m_hLayerSpawnGroup; // 0x4f4	
	
	// Datamap fields:
	// void ShowWorldLayer; // 0x0
	// void HideWorldLayer; // 0x0
	// void SpawnEntities; // 0x0
	// void DestroyEntities; // 0x0
	// void ShowWorldLayerAndSpawnEntities; // 0x0
	// void HideWorldLayerAndDestroyEntities; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17c8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_ShivDaggerVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DamageDebuffModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_SlowDebuffModifier; // 0x14f8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DaggerStuckParticle; // 0x1508	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DaggerImpactParticle; // 0x15e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DaggerExplodeParticle; // 0x16c8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strDaggerHitSound; // 0x17a8	
	CSoundEventName m_strDaggerExplodeSound; // 0x17b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x158
// Has VTable
class CCitadel_Modifier_PsychicLift : public CCitadel_Modifier_Stunned
{
private:
	[[maybe_unused]] uint8_t __pad00d0[0x70]; // 0xd0
public:
	Vector m_vecFloatDest; // 0x140	
	Vector m_vecStartingPos; // 0x14c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_NearDeathFX : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ZiplineSpeedVData : public CCitadelModifierVData
{
public:
	float m_flPercentageMultiplierStart; // 0x5f8	
	float m_flPercentageMultiplierEnd; // 0x5fc	
	float m_flRampUpTime; // 0x600	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x16c0
// Has VTable
class CCitadelPlayerBotNPCBrain : public CAI_CitadelNPC
{
public:
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_BOT_IDLE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MOVE_WITHOUT_GOAL(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_WAIT_FOR_REEVALUATE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_ATTACK_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[3]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_USE_ABILITY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[4]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_DEFEND_OBJECTIVE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[5]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_RETREAT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[6]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_PUSH_LANE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[7]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_ZIPLINING(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[8]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_USE_ZIPLINE_FROM_BASE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[9]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_USE_ZIPLINE_RETREAT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[10]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_DEFEND_BASE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[11]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_MOVE_TO_LOCATION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[12]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_RETRIEVE_IDOL(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[13]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_RETURN_IDOL(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[14]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_TAKEOVER_SUPPORT_ALLY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[15]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_TEST_SCHEDULE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[16]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_BOT_TEST_IDLE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[17]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_SELECT_HERO(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[18]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_GET_PATH_TO_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[19]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_GET_PATH_TO_TARGET(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[20]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_GET_PATH_TO_LOCATION(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[21]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_MOVE_WITHOUT_GOAL(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[22]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_WAIT_MOVEMENT_RETREAT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[23]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_STOP_ZIPLING(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[24]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_WAIT_FOR_ZIPLINE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[25]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_EXECUTE_ZIPLINE_ABILITY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[26]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_WAIT_ZIPLINING_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[27]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_WAIT_ZIPLINING_RETREAT(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[28]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_ATTACK_TARGET(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[29]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_AIM_ABILITY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[30]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_USE_ABILITY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[31]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_PICKUP_IDOL(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[32]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_TEST_TASK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[33]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_BOT_TEST_END_SCHEDULE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[34]->m_pInstance);};
	static ConditionId_t &Get_COND_BOT_REEVALUATE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[35]->m_pInstance);};
	static ConditionId_t &Get_COND_HEALTH_CRITICAL(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[36]->m_pInstance);};
	static ConditionId_t &Get_COND_OUT_OF_AMMO(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[37]->m_pInstance);};
	static ConditionId_t &Get_COND_SILENCED(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[38]->m_pInstance);};
	static ConditionId_t &Get_COND_OBJECTIVE_LOST(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[39]->m_pInstance);};
	static ConditionId_t &Get_COND_USE_ABILITY(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[40]->m_pInstance);};
	static ConditionId_t &Get_COND_HOLDING_IDOL(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadelPlayerBotNPCBrain")->GetStaticFields()[41]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa58
// Has VTable
// 
// MNetworkVarNames "bool m_bShowLight"
class CRectLight : public CBarnLight
{
public:
	// MNetworkEnable
	// MNetworkChangeCallback "RenderingChanged"
	bool m_bShowLight; // 0xa50	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CGameModifier_FireUserEntityIOVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Fire User Entity IO"
	// MPropertyDescription "User Entity IO to fire when modifier added. 0 = don't fire."
	FireUserEntityIO_t m_FireOnAdded; // 0x5f8	
	// MPropertyDescription "User Entity IO to fire when modifier removed. 0 = don't fire."
	FireUserEntityIO_t m_FireOnRemoved; // 0x5fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6e0
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierBossInvulnVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShieldParticle; // 0x5f8	
	float m_flShieldRadius; // 0x6d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_GangActivity_Cancel : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Shakedown_TargetVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_RootModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_PulseModifier; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x148
// Has VTable
class CCitadel_Modifier_WingBlastPush : public CCitadelModifier
{
public:
	Vector m_vPush; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb28
// Has VTable
// 
// MNetworkVarNames "float m_flVertOffset"
// MNetworkVarNames "float m_flHorizGap"
// MNetworkVarNames "Vector m_vStartPos"
// MNetworkVarNames "Vector m_vTargetPos"
// MNetworkVarNames "QAngle m_angFacing"
// MNetworkVarNames "int m_nMantleTypeIndex"
// MNetworkVarNames "GameTime_t m_flStartTime"
class CCitadel_Ability_Mantle : public CCitadelBaseAbility
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	float m_flVertOffset; // 0xab0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	float m_flHorizGap; // 0xab4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vStartPos; // 0xab8	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	Vector m_vTargetPos; // 0xac4	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	QAngle m_angFacing; // 0xad0	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	int32_t m_nMantleTypeIndex; // 0xadc	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flStartTime; // 0xae0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_NearDeathFXVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EnemyNearDeathParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_FriendlyNearDeathParticle; // 0x6d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sSelfDestructStart; // 0x7b8	
	CSoundEventName m_sSelfDestructEnd; // 0x7c8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5bd8
// Has VTable
class CCitadelItemPickupIdol : public CCitadelItemPickup
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9d0
// Has VTable
// 
// MNetworkVarNames "bool m_bIsUsable"
class CBaseDoor : public CBaseToggle
{
private:
	[[maybe_unused]] uint8_t __pad07c8[0x10]; // 0x7c8
public:
	QAngle m_angMoveEntitySpace; // 0x7d8	
	Vector m_vecMoveDirParentSpace; // 0x7e4	
	locksound_t m_ls; // 0x7f0	
	bool m_bForceClosed; // 0x810	
	bool m_bDoorGroup; // 0x811	
	bool m_bLocked; // 0x812	
	bool m_bIgnoreDebris; // 0x813	
	FuncDoorSpawnPos_t m_eSpawnPosition; // 0x814	
	float m_flBlockDamage; // 0x818	
private:
	[[maybe_unused]] uint8_t __pad081c[0x4]; // 0x81c
public:
	CUtlSymbolLarge m_NoiseMoving; // 0x820	
	CUtlSymbolLarge m_NoiseArrived; // 0x828	
	CUtlSymbolLarge m_NoiseMovingClosed; // 0x830	
	CUtlSymbolLarge m_NoiseArrivedClosed; // 0x838	
	CUtlSymbolLarge m_ChainTarget; // 0x840	
	CEntityIOOutput m_OnBlockedClosing; // 0x848	
	CEntityIOOutput m_OnBlockedOpening; // 0x870	
	CEntityIOOutput m_OnUnblockedClosing; // 0x898	
	CEntityIOOutput m_OnUnblockedOpening; // 0x8c0	
	CEntityIOOutput m_OnFullyClosed; // 0x8e8	
	CEntityIOOutput m_OnFullyOpen; // 0x910	
	CEntityIOOutput m_OnClose; // 0x938	
	CEntityIOOutput m_OnOpen; // 0x960	
	CEntityIOOutput m_OnLockedUse; // 0x988	
	bool m_bLoopMoveSound; // 0x9b0	
private:
	[[maybe_unused]] uint8_t __pad09b1[0x17]; // 0x9b1
public:
	bool m_bCreateNavObstacle; // 0x9c8	
	bool m_isChaining; // 0x9c9	
	// MNetworkEnable
	bool m_bIsUsable; // 0x9ca	
	
	// Datamap fields:
	// void m_nMovingSoundGUID; // 0x9b4
	//  m_ls.sLockedSound; // 0x7f8
	//  m_ls.sUnlockedSound; // 0x800
	// void InputOpen; // 0x0
	// void InputClose; // 0x0
	// void InputToggle; // 0x0
	// void InputLock; // 0x0
	// void InputUnlock; // 0x0
	// float InputSetSpeed; // 0x0
	// float InputSetToggleState; // 0x0
	// void CBaseDoorDoorTouch; // 0x0
	// void CBaseDoorDoorGoUp; // 0x0
	// void CBaseDoorDoorGoDown; // 0x0
	// void CBaseDoorDoorHitTop; // 0x0
	// void CBaseDoorDoorHitBottom; // 0x0
	// void CBaseDoorMovingSoundThink; // 0x0
	// void CBaseDoorCloseAreaPortalsThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f0
// Has VTable
class CLogicLineToEntity : public CLogicalEntity
{
public:
	CEntityOutputTemplate< Vector > m_Line; // 0x4b8	
	CUtlSymbolLarge m_SourceName; // 0x4e0	
	CHandle< CBaseEntity > m_StartEntity; // 0x4e8	
	CHandle< CBaseEntity > m_EndEntity; // 0x4ec	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CAI_Navigator : public CAI_Component
{
private:
	[[maybe_unused]] uint8_t __pad0040[0x8]; // 0x40
public:
	float m_flGoalStoppingDistance; // 0x48	
	float m_flPathEndGoalRange; // 0x4c	
	float m_flPathEndGoalRange_Repathing; // 0x50	
	Navigation_t m_navType; // 0x54	
	bool m_bNavComplete; // 0x58	
private:
	[[maybe_unused]] uint8_t __pad0059[0x1f]; // 0x59
public:
	CAI_Path* m_pPath; // 0x78	
private:
	[[maybe_unused]] uint8_t __pad0080[0x8]; // 0x80
public:
	CHandle< CBaseEntity > m_hLosTarget; // 0x88	
private:
	[[maybe_unused]] uint8_t __pad008c[0x4]; // 0x8c
public:
	CAI_WaypointList m_interruptPathWaypoints; // 0x90	
	GameTime_t m_flLastSuccessfulSimplifyTime; // 0x98	
	GameTime_t m_flTimeLastAvoidanceTriangulate; // 0x9c	
	GameTime_t m_flLastMoveTime; // 0xa0	
	GameTime_t m_flStartWaitingForFacingTime; // 0xa4	
	bool m_bPeerMoveWait; // 0xa8	
private:
	[[maybe_unused]] uint8_t __pad00a9[0x3]; // 0xa9
public:
	CHandle< CBaseEntity > m_hPeerWaitingOn; // 0xac	
	CSimTimer m_PeerWaitMoveTimer; // 0xb0	
	CSimTimer m_PeerWaitClearTimer; // 0xbc	
	CSimTimer m_NextSidestepTimer; // 0xc8	
	CHandle< CBaseEntity > m_hBigStepGroundEnt; // 0xd4	
	CHandle< CBaseEntity > m_hLastBlockingEnt; // 0xd8	
	Vector m_vPosBeginFailedSteer; // 0xdc	
	GameTime_t m_timeBeginFailedSteer; // 0xe8	
	int32_t m_nNavFailCounter; // 0xec	
	GameTime_t m_flLastNavFailTime; // 0xf0	
	bool m_bShouldBruteForceFailedNav; // 0xf4	
	bool m_bNavChangedAlongPath; // 0xf5	
private:
	[[maybe_unused]] uint8_t __pad00f6[0x2]; // 0xf6
public:
	int32_t m_nPreviousCollisionGroup; // 0xf8	
	GameTime_t m_flLastNpcOverlapTime; // 0xfc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Slork_LastBreathVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_ShieldModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_AirLiftExplodingAlly : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbc0
// Has VTable
// 
// MNetworkVarNames "QAngle m_angBeamAngles"
class CCitadel_Ability_Wrecker_Ultimate : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x20]; // 0xab0
public:
	// MNetworkEnable
	QAngle m_angBeamAngles; // 0xad0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x818
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadelModifierChronoPulseGrenadePulseAreaVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DebuffModifier; // 0x5f8	
	CEmbeddedSubclass< CCitadelModifier > m_SlowModifier; // 0x608	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_PreviewRingParticle; // 0x618	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AreaEffect; // 0x6f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strArmingSound; // 0x7d8	
	CSoundEventName m_strArmedSound; // 0x7e8	
	CSoundEventName m_strLoopingSound; // 0x7f8	
	CSoundEventName m_strHitSound; // 0x808	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xcf8
// Has VTable
// 
// MNetworkVarNames "bool m_bLeaping"
// MNetworkVarNames "GameTime_t m_flLeapStartTime"
class CCitadel_Ability_HornetLeap : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x2]; // 0xab0
public:
	// MNetworkEnable
	bool m_bLeaping; // 0xab2	
private:
	[[maybe_unused]] uint8_t __pad0ab3[0x1]; // 0xab3
public:
	// MNetworkEnable
	GameTime_t m_flLeapStartTime; // 0xab4	
	ParticleIndex_t m_nFXIndex; // 0xab8	
private:
	[[maybe_unused]] uint8_t __pad0abc[0x234]; // 0xabc
public:
	ParticleIndex_t m_TrailFX; // 0xcf0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x260
// Has VTable
class CCitadel_Modifier_Galvanic_Storm_Effect : public CCitadel_Modifier_ChainLightningEffect
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x170
// Has VTable
class CCitadel_Modifier_VexBarrier_Shield : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x2728
// Has VTable
// 
// MNetworkVarNames "bool m_bFreezePeriod"
// MNetworkVarNames "GameTime_t m_fLevelStartTime"
// MNetworkVarNames "GameTime_t m_flGameStartTime"
// MNetworkVarNames "GameTime_t m_flRoundStartTime"
// MNetworkVarNames "EGameState m_eGameState"
// MNetworkVarNames "EHANDLE m_hTowerAmber"
// MNetworkVarNames "EHANDLE m_hTowerSapphire"
// MNetworkVarNames "bool m_bEnemyInAmberBase"
// MNetworkVarNames "bool m_bEnemyInSapphireBase"
// MNetworkVarNames "float m_flCombineZiplineSpeedMultiplier"
// MNetworkVarNames "float m_flRebelZiplineSpeedMultiplier"
// MNetworkVarNames "Vector m_vMinimapMins"
// MNetworkVarNames "Vector m_vMinimapMaxs"
// MNetworkVarNames "bool m_bMatchSafeToAbandon"
// MNetworkVarNames "bool m_bNoDeathEnabled"
// MNetworkVarNames "bool m_bFastCooldownsEnabled"
// MNetworkVarNames "bool m_bStaminaCooldownsEnabled"
// MNetworkVarNames "bool m_bInfiniteResourcesEnabled"
// MNetworkVarNames "bool m_bFlexSlotsForcedUnlocked"
// MNetworkVarNames "ECitadelMatchMode m_eMatchMode"
// MNetworkVarNames "ECitadelGameMode m_eGameMode"
// MNetworkVarNames "CHandle<CCitadelTrooperMinimap> m_hTrooperMinimap"
// MNetworkVarNames "EHANDLE m_hCurrentHeroDrafterRebels"
// MNetworkVarNames "EHANDLE m_hCurrentHeroDrafterCombine"
// MNetworkVarNames "bool m_bServerPaused"
// MNetworkVarNames "int m_iPauseTeam"
// MNetworkVarNames "int m_nMatchClockUpdateTick"
// MNetworkVarNames "float m_flMatchClockAtLastUpdate"
// MNetworkVarNames "bool m_bRequiresReportCardDismissal"
// MNetworkVarNames "int m_eGGTeam"
// MNetworkVarNames "GameTime_t m_flGGEndsAtTime"
// MNetworkVarNames "MatchID_t m_unMatchID"
// MNetworkVarNames "int m_nExperimentalGameplayState"
// MNetworkVarNames "GameTime_t m_flHeroDiedTime"
class CCitadelGameRules : public CTeamplayRules
{
private:
	[[maybe_unused]] uint8_t __pad00c0[0x10]; // 0xc0
public:
	// MNetworkEnable
	bool m_bFreezePeriod; // 0xd0	
private:
	[[maybe_unused]] uint8_t __pad00d1[0x3]; // 0xd1
public:
	// MNetworkEnable
	GameTime_t m_fLevelStartTime; // 0xd4	
	// MNetworkEnable
	GameTime_t m_flGameStartTime; // 0xd8	
	// MNetworkEnable
	GameTime_t m_flRoundStartTime; // 0xdc	
	// MNetworkEnable
	EGameState m_eGameState; // 0xe0	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTowerAmber; // 0xe4	
	// MNetworkEnable
	CHandle< CBaseEntity > m_hTowerSapphire; // 0xe8	
	// MNetworkEnable
	bool m_bEnemyInAmberBase; // 0xec	
	// MNetworkEnable
	bool m_bEnemyInSapphireBase; // 0xed	
private:
	[[maybe_unused]] uint8_t __pad00ee[0x2]; // 0xee
public:
	// MNetworkEnable
	float m_flCombineZiplineSpeedMultiplier; // 0xf0	
	// MNetworkEnable
	float m_flRebelZiplineSpeedMultiplier; // 0xf4	
	// MNetworkEnable
	Vector m_vMinimapMins; // 0xf8	
	// MNetworkEnable
	Vector m_vMinimapMaxs; // 0x104	
	// MNetworkEnable
	bool m_bMatchSafeToAbandon; // 0x110	
	// MNetworkEnable
	bool m_bNoDeathEnabled; // 0x111	
	// MNetworkEnable
	bool m_bFastCooldownsEnabled; // 0x112	
	// MNetworkEnable
	bool m_bStaminaCooldownsEnabled; // 0x113	
	// MNetworkEnable
	bool m_bInfiniteResourcesEnabled; // 0x114	
	// MNetworkEnable
	bool m_bFlexSlotsForcedUnlocked; // 0x115	
private:
	[[maybe_unused]] uint8_t __pad0116[0x2]; // 0x116
public:
	// MNetworkEnable
	ECitadelMatchMode m_eMatchMode; // 0x118	
	// MNetworkEnable
	ECitadelGameMode m_eGameMode; // 0x11c	
	// MNetworkEnable
	CHandle< CCitadelTrooperMinimap > m_hTrooperMinimap; // 0x120	
	// MNetworkEnable
	// MNetworkPriority "32"
	CHandle< CBaseEntity > m_hCurrentHeroDrafterRebels; // 0x124	
	// MNetworkEnable
	// MNetworkPriority "32"
	CHandle< CBaseEntity > m_hCurrentHeroDrafterCombine; // 0x128	
	bool m_bDontUploadStats; // 0x12c	
private:
	[[maybe_unused]] uint8_t __pad012d[0x3]; // 0x12d
public:
	int32_t m_iWinningTeam; // 0x130	
private:
	[[maybe_unused]] uint8_t __pad0134[0x74]; // 0x134
public:
	bool m_bSpawnedBots; // 0x1a8	
	bool m_bGuideBotAssigned; // 0x1a9	
private:
	[[maybe_unused]] uint8_t __pad01aa[0x2]; // 0x1aa
public:
	float m_timeLastSpawnCrates; // 0x1ac	
	bool m_bNotifiedClientsOfNextCrateSpawn; // 0x1b0	
	bool m_bEarlyCratesSpawned; // 0x1b1	
	bool m_bIsEarlyCrateGamestate; // 0x1b2	
private:
	[[maybe_unused]] uint8_t __pad01b3[0x2a5]; // 0x1b3
public:
	GameTime_t m_flGameTimeAllPlayersDisconnected; // 0x458	
	int32_t m_nNextHeroDraftPosition; // 0x45c	
private:
	[[maybe_unused]] uint8_t __pad0460[0x11e0]; // 0x460
public:
	CountdownTimer m_CheckIdleTimer; // 0x1640	
private:
	[[maybe_unused]] uint8_t __pad1658[0x1020]; // 0x1658
public:
	// MNetworkEnable
	bool m_bServerPaused; // 0x2678	
private:
	[[maybe_unused]] uint8_t __pad2679[0x3]; // 0x2679
public:
	// MNetworkEnable
	int32_t m_iPauseTeam; // 0x267c	
	// MNetworkEnable
	int32_t m_nMatchClockUpdateTick; // 0x2680	
	// MNetworkEnable
	float m_flMatchClockAtLastUpdate; // 0x2684	
	double m_flPauseTime; // 0x2688	
	CPlayerSlot m_pausingPlayerId; // 0x2690	
	CPlayerSlot m_unpausingPlayerId; // 0x2694	
	float m_fPauseRawTime; // 0x2698	
	float m_fPauseCurTime; // 0x269c	
	float m_fUnpauseRawTime; // 0x26a0	
	float m_fUnpauseCurTime; // 0x26a4	
private:
	[[maybe_unused]] uint8_t __pad26a8[0x28]; // 0x26a8
public:
	// MNetworkEnable
	bool m_bRequiresReportCardDismissal; // 0x26d0	
private:
	[[maybe_unused]] uint8_t __pad26d1[0x3]; // 0x26d1
public:
	GameTime_t m_flPreGameWaitEndTime; // 0x26d4	
	GameTime_t m_flReportCardDismissalWaitStart; // 0x26d8	
	int32_t m_nLastPreGameCount; // 0x26dc	
	// MNetworkEnable
	int32_t m_eGGTeam; // 0x26e0	
	// MNetworkEnable
	GameTime_t m_flGGEndsAtTime; // 0x26e4	
	// MNetworkEnable
	MatchID_t m_unMatchID; // 0x26e8	
	// MNetworkEnable
	int32_t m_nExperimentalGameplayState; // 0x26f0	
	int32_t m_nPlayerDeathEventID; // 0x26f4	
	int32_t m_nReplayChangedEvent; // 0x26f8	
	int32_t m_nGameOverEvent; // 0x26fc	
private:
	[[maybe_unused]] uint8_t __pad2700[0x20]; // 0x2700
public:
	// MNetworkEnable
	GameTime_t m_flHeroDiedTime; // 0x2720	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb58
// Has VTable
class CCitadel_Ability_Disruptive_Charge : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xaf8
// Has VTable
// 
// MNetworkVarNames "CHandle< CCitadelBaseAbility> m_hAbility"
class CCitadel_Nano_Predatory_Statue : public CCitadelAnimatingModelEntity
{
private:
	[[maybe_unused]] uint8_t __pad0ad8[0x18]; // 0xad8
public:
	// MNetworkEnable
	CHandle< CCitadelBaseAbility > m_hAbility; // 0xaf0	
	float m_flLifetime; // 0xaf4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_ArmorUpgrade_Frenzy : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xa48
// Has VTable
class CCitadelPreviewPlayerController : public CCitadelPlayerController
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5a0
// Has VTable
// 
// MEntityAllowsPortraitWorldSpawn
// MNetworkVarNames "HRenderTextureStrong m_Entity_hCubemapTexture"
// MNetworkVarNames "bool m_Entity_bCustomCubemapTexture"
// MNetworkVarNames "float m_Entity_flInfluenceRadius"
// MNetworkVarNames "Vector m_Entity_vBoxProjectMins"
// MNetworkVarNames "Vector m_Entity_vBoxProjectMaxs"
// MNetworkVarNames "bool m_Entity_bMoveable"
// MNetworkVarNames "int m_Entity_nHandshake"
// MNetworkVarNames "int m_Entity_nEnvCubeMapArrayIndex"
// MNetworkVarNames "int m_Entity_nPriority"
// MNetworkVarNames "float m_Entity_flEdgeFadeDist"
// MNetworkVarNames "Vector m_Entity_vEdgeFadeDists"
// MNetworkVarNames "float m_Entity_flDiffuseScale"
// MNetworkVarNames "bool m_Entity_bStartDisabled"
// MNetworkVarNames "bool m_Entity_bDefaultEnvMap"
// MNetworkVarNames "bool m_Entity_bDefaultSpecEnvMap"
// MNetworkVarNames "bool m_Entity_bIndoorCubeMap"
// MNetworkVarNames "bool m_Entity_bCopyDiffuseFromDefaultCubemap"
// MNetworkVarNames "bool m_Entity_bEnabled"
class CEnvCubemap : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x80]; // 0x4b8
public:
	// MNetworkEnable
	CStrongHandle< InfoForResourceTypeCTextureBase > m_Entity_hCubemapTexture; // 0x538	
	// MNetworkEnable
	bool m_Entity_bCustomCubemapTexture; // 0x540	
private:
	[[maybe_unused]] uint8_t __pad0541[0x3]; // 0x541
public:
	// MNetworkEnable
	float m_Entity_flInfluenceRadius; // 0x544	
	// MNetworkEnable
	Vector m_Entity_vBoxProjectMins; // 0x548	
	// MNetworkEnable
	Vector m_Entity_vBoxProjectMaxs; // 0x554	
	// MNetworkEnable
	bool m_Entity_bMoveable; // 0x560	
private:
	[[maybe_unused]] uint8_t __pad0561[0x3]; // 0x561
public:
	// MNetworkEnable
	int32_t m_Entity_nHandshake; // 0x564	
	// MNetworkEnable
	int32_t m_Entity_nEnvCubeMapArrayIndex; // 0x568	
	// MNetworkEnable
	int32_t m_Entity_nPriority; // 0x56c	
	// MNetworkEnable
	float m_Entity_flEdgeFadeDist; // 0x570	
	// MNetworkEnable
	Vector m_Entity_vEdgeFadeDists; // 0x574	
	// MNetworkEnable
	float m_Entity_flDiffuseScale; // 0x580	
	// MNetworkEnable
	bool m_Entity_bStartDisabled; // 0x584	
	// MNetworkEnable
	bool m_Entity_bDefaultEnvMap; // 0x585	
	// MNetworkEnable
	bool m_Entity_bDefaultSpecEnvMap; // 0x586	
	// MNetworkEnable
	bool m_Entity_bIndoorCubeMap; // 0x587	
	// MNetworkEnable
	bool m_Entity_bCopyDiffuseFromDefaultCubemap; // 0x588	
private:
	[[maybe_unused]] uint8_t __pad0589[0xf]; // 0x589
public:
	// MNetworkEnable
	bool m_Entity_bEnabled; // 0x598	
	
	// Datamap fields:
	// void m_Entity_pSceneObject; // 0x590
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_GenericPerson_2 : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc18
// Has VTable
class CCitadel_Ability_Ghost_BloodShards : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x150]; // 0xab0
public:
	CUtlVector< CHandle< CBaseEntity > > m_vecDamagedTargets; // 0xc00	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_ReinforcingCasingsVData : public CCitadel_Modifier_Intrinsic_BaseVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6f0
// Has VTable
// 
// MNetworkIncludeByUserGroup "Origin"
// MNetworkVarNames "float32 m_flFadeInDuration"
// MNetworkVarNames "float32 m_flFadeOutDuration"
// MNetworkVarNames "float32 m_flMaxWeight"
// MNetworkVarNames "bool m_bEnabled"
// MNetworkVarNames "bool m_bMaster"
// MNetworkVarNames "bool m_bClientSide"
// MNetworkVarNames "bool m_bExclusive"
// MNetworkVarNames "float32 m_MinFalloff"
// MNetworkVarNames "float32 m_MaxFalloff"
// MNetworkVarNames "float32 m_flCurWeight"
// MNetworkVarNames "char m_netlookupFilename"
class CColorCorrection : public CBaseEntity
{
public:
	// MNetworkEnable
	float m_flFadeInDuration; // 0x4b8	
	// MNetworkEnable
	float m_flFadeOutDuration; // 0x4bc	
	float m_flStartFadeInWeight; // 0x4c0	
	float m_flStartFadeOutWeight; // 0x4c4	
	GameTime_t m_flTimeStartFadeIn; // 0x4c8	
	GameTime_t m_flTimeStartFadeOut; // 0x4cc	
	// MNetworkEnable
	float m_flMaxWeight; // 0x4d0	
	bool m_bStartDisabled; // 0x4d4	
	// MNetworkEnable
	bool m_bEnabled; // 0x4d5	
	// MNetworkEnable
	bool m_bMaster; // 0x4d6	
	// MNetworkEnable
	bool m_bClientSide; // 0x4d7	
	// MNetworkEnable
	bool m_bExclusive; // 0x4d8	
private:
	[[maybe_unused]] uint8_t __pad04d9[0x3]; // 0x4d9
public:
	// MNetworkEnable
	float m_MinFalloff; // 0x4dc	
	// MNetworkEnable
	float m_MaxFalloff; // 0x4e0	
	// MNetworkEnable
	float m_flCurWeight; // 0x4e4	
	// MNetworkEnable
	char m_netlookupFilename[512]; // 0x4e8	
	CUtlSymbolLarge m_lookupFilename; // 0x6e8	
	
	// Datamap fields:
	// void CColorCorrectionFadeInThink; // 0x0
	// void CColorCorrectionFadeOutThink; // 0x0
	// void m_netlookupFilename; // 0x4e8
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// float InputSetFadeInDuration; // 0x0
	// float InputSetFadeOutDuration; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1638
// Has VTable
class CNPC_TrooperNeutralNodeMover : public CNPC_TrooperNeutral
{
public:
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_MOVE_TO_NEW_NODE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutralNodeMover")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_HIDE_IN_NODE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutralNodeMover")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_COME_OUT_OF_NODE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutralNodeMover")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_TROOPERNEUTRAL_RETURN_TO_NODE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutralNodeMover")->GetStaticFields()[3]->m_pInstance);};
	static ConditionId_t &Get_COND_FAR_FROM_NODE(){return *reinterpret_cast<ConditionId_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutralNodeMover")->GetStaticFields()[4]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_PICK_NEW_NODE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutralNodeMover")->GetStaticFields()[5]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MOVE_TO_NEXT_MOVEMENT_NODE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutralNodeMover")->GetStaticFields()[6]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_HIDE_IN_NODE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutralNodeMover")->GetStaticFields()[7]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_COME_OUT_OF_NODE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutralNodeMover")->GetStaticFields()[8]->m_pInstance);};
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x920
// Has VTable
class CCitadel_Projectile_Cyclone : public CCitadelProjectile
{
public:
	CHandle< CCitadel_Ability_Thumper_4 > m_CycloneAbility; // 0x800	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf0
// Has VTable
class CCitadelModifier_Viscous_Goo_Aura : public CCitadelModifierAura
{
public:
	ParticleIndex_t m_AuraParticle; // 0xe8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x570
// Has VTable
class CSoundEventEntityAlias_snd_event_point : public CSoundEventEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Intimidated : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x278
// Has VTable
class CCitadel_Modifier_TargetPracticeEnemy : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xe8]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1
// Has Trivial Constructor
// Has Trivial Destructor
// 
// MPulseProvideFeatureTag "PulseEntities"
// MPulseLibraryBindings
class CBaseEntityAPI
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x1]; // 0x0
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierPowerGeneratorVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_EffectToTitan; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9a0
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_VoidSphereVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportStartParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportEndParticle; // 0x6d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportTrailParticle; // 0x7b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportModelParticle; // 0x898	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_BuffModifier; // 0x978	
	// MPropertyGroupName "Misc"
	float m_flPreTeleportDuration; // 0x988	
private:
	[[maybe_unused]] uint8_t __pad098c[0x4]; // 0x98c
public:
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strAmbientLoopingLocalPlayerSound; // 0x990	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1898
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Chrono_TimeWallVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AuraModifier; // 0x14e8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TimeWallParticle; // 0x14f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TimeWallChargeParticle; // 0x15d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TimeWallHitParticle; // 0x16b8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TimeWallHitTimerParticle; // 0x1798	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strWallCreated; // 0x1878	
	CSoundEventName m_strChargeUpSound; // 0x1888	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_GhostBloodShardDebuffVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_BloodShardDebuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x158
// Has VTable
class CAI_LocalNavigator : public CAI_LocalNavigatorBase
{
public:
	bool m_bLastWasClear; // 0x50	
private:
	[[maybe_unused]] uint8_t __pad0051[0xef]; // 0x51
public:
	CSimpleSimTimer m_FullDirectTimer; // 0x140	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf0
// Has VTable
class CCitadel_Modifier_DPSTracker : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x18]; // 0xc8
public:
	float m_flInterval; // 0xe0	
	float m_flProgress; // 0xe4	
	float m_flDistToTarget; // 0xe8	
	
	// Static fields:
	static float &Get_k_flHighestDPS(){return *reinterpret_cast<float*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CCitadel_Modifier_DPSTracker")->GetStaticFields()[0]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Slork_LastBreath : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd68
// Has VTable
class CCitadel_Ability_SunfireCataclysm : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x2a0]; // 0xab0
public:
	Vector m_vecCastPos; // 0xd50	
	ParticleIndex_t m_nFXPreviewParticle; // 0xd5c	
	ParticleIndex_t m_hChargingParticle; // 0xd60	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_Synth_Blitz : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Urn_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1788
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityChargedShotVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ChannelStartParticle; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ShootParticle; // 0x16a8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_Aerial_Assault : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x520
// Has VTable
class CPointPrefab : public CServerOnlyPointEntity
{
public:
	CUtlSymbolLarge m_targetMapName; // 0x4b8	
	CUtlSymbolLarge m_forceWorldGroupID; // 0x4c0	
	CUtlSymbolLarge m_associatedRelayTargetName; // 0x4c8	
	bool m_fixupNames; // 0x4d0	
	bool m_bLoadDynamic; // 0x4d1	
private:
	[[maybe_unused]] uint8_t __pad04d2[0x2]; // 0x4d2
public:
	CHandle< CPointPrefab > m_associatedRelayEntity; // 0x4d4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x158
// Has VTable
class CCitadel_Modifier_Dust_Storm_Aura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xbe8
// Has VTable
class CCitadel_Item_CheatDeath : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9d8
// Has VTable
class CRotDoor : public CBaseDoor
{
public:
	bool m_bSolidBsp; // 0x9d0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x228
// Has VTable
class CCitadel_Modifier_Chomp_Hobbled : public CCitadelModifier
{
public:
	GameTime_t m_LastUpdate; // 0xc8	
	float m_flDamageTime; // 0xcc	
	float m_flMovementTime; // 0xd0	
	CHandle< CBaseEntity > m_hGrappler; // 0xd4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierChompGrappleVData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1e0
// Has VTable
class CCitadel_Modifier_AirLift_Explode_Target : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x50]; // 0xc8
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1658
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityHookVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SelfModifier; // 0x14e8	
	CEmbeddedSubclass< CCitadelModifier > m_TargetModifier; // 0x14f8	
	CEmbeddedSubclass< CCitadelModifier > m_BulletAmpModifier; // 0x1508	
	CEmbeddedSubclass< CCitadelModifier > m_ShieldModifier; // 0x1518	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HookOutParticle; // 0x1528	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strHookSuccessSound; // 0x1608	
	CSoundEventName m_strHookAllySound; // 0x1618	
	CSoundEventName m_strHookMissSound; // 0x1628	
	CSoundEventName m_strHookImpactGeoSound; // 0x1638	
	CSoundEventName m_SelfBuffCastSound; // 0x1648	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb50
// Has VTable
// 
// MNetworkVarNames "bool m_bIcePathing"
// MNetworkVarNames "QAngle m_qLastAngles"
// MNetworkVarNames "Vector m_vLastVelocity"
// MNetworkVarNames "bool m_bFirstMovementTick"
class CCitadel_Ability_IcePath : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x70]; // 0xab0
public:
	Vector m_vInitialPosition; // 0xb20	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bIcePathing; // 0xb2c	
private:
	[[maybe_unused]] uint8_t __pad0b2d[0x3]; // 0xb2d
public:
	// MNetworkEnable
	QAngle m_qLastAngles; // 0xb30	
	// MNetworkEnable
	Vector m_vLastVelocity; // 0xb3c	
	// MNetworkEnable
	bool m_bFirstMovementTick; // 0xb48	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CCitadel_Modifier_LearningHeroAbility : public CCitadelModifier
{
public:
	CBufferString m_sDescription; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x9f0
// Has VTable
// 
// MNetworkVarNames "CBaseAnimGraphController m_animationController"
class CBodyComponentBaseAnimGraph : public CBodyComponentSkeletonInstance
{
public:
	// MNetworkEnable
	CBaseAnimGraphController m_animationController; // 0x470	
	
	// Static fields:
	static EntComponentInfo_t &Get_s_EntComponentInfo(){return *reinterpret_cast<EntComponentInfo_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBodyComponentBaseAnimGraph")->GetStaticFields()[0]->m_pInstance);};
	static int32_t &Get_entity_component_error_class_decl_says_contained_but_impl_is_referenced(){return *reinterpret_cast<int32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CBodyComponentBaseAnimGraph")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierVData_SetModelScale : public CCitadelModifierVData
{
public:
	CRangeFloat m_flScale; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f8
// Has VTable
class CTankTrainAI : public CPointEntity
{
public:
	CHandle< CFuncTrackTrain > m_hTrain; // 0x4b8	
	CHandle< CBaseEntity > m_hTargetEntity; // 0x4bc	
	int32_t m_soundPlaying; // 0x4c0	
private:
	[[maybe_unused]] uint8_t __pad04c4[0x14]; // 0x4c4
public:
	CUtlSymbolLarge m_startSoundName; // 0x4d8	
	CUtlSymbolLarge m_engineSoundName; // 0x4e0	
	CUtlSymbolLarge m_movementSoundName; // 0x4e8	
	CUtlSymbolLarge m_targetEntityName; // 0x4f0	
	
	// Datamap fields:
	// void m_soundTreads; // 0x4c8
	// void m_soundEngine; // 0x4d0
	// CUtlSymbolLarge InputTargetEntity; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e8
// Has VTable
class CGameGibManager : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x20]; // 0x4b8
public:
	bool m_bAllowNewGibs; // 0x4d8	
private:
	[[maybe_unused]] uint8_t __pad04d9[0x3]; // 0x4d9
public:
	int32_t m_iCurrentMaxPieces; // 0x4dc	
	int32_t m_iMaxPieces; // 0x4e0	
	int32_t m_iLastFrame; // 0x4e4	
	
	// Datamap fields:
	// int32_t InputSetMaxPieces; // 0x0
	// int32_t InputSetMaxPiecesDX8; // 0x0
	// void m_LRU; // 0x4b8
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xba8
// Has VTable
class CCitadel_Ability_Riptide : public CCitadelBaseAbility
{
public:
	CUtlVector< CHandle< CBaseEntity > > m_vTargets; // 0xab0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x150
// Has VTable
class CModifier_Mirage_Tornado_Lift : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0x70]; // 0xc8
public:
	Vector m_vecFloatDest; // 0x138	
	Vector m_vecStartingPos; // 0x144	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc58
// Has VTable
class CAbility_Rutger_ForceField : public CCitadelBaseAbility
{
public:
	ParticleIndex_t m_hChargingParticle; // 0xab0	
	ParticleIndex_t m_hExplodeParticle; // 0xab4	
	Vector m_vSpawnPos; // 0xab8	
	GameTime_t m_fTimeToDestroyForceField; // 0xac4	
	bool m_bFirstThink; // 0xac8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb58
// Has VTable
// 
// MNetworkVarNames "CCitadelAutoScaledTime m_flGroundDashSlideTime"
// MNetworkVarNames "GameTime_t m_flSlowGetupStartTime"
// MNetworkVarNames "bool m_bShouldTriggerSlowGetup"
// MNetworkVarNames "bool m_bWantsSlide"
// MNetworkVarNames "bool m_bAirborneWhenDuckPressed"
// MNetworkVarNames "bool m_bIsSliding"
// MNetworkVarNames "float m_flSpeedAdjust"
// MNetworkVarNames "GameTime_t m_flDuckPressedTime"
// MNetworkVarNames "float m_flVelocityAtDuckPressedTime"
// MNetworkVarNames "GameTime_t m_flSlideChangeTime"
// MNetworkVarNames "GameTime_t m_flSlidingOnFlatStartTime"
// MNetworkVarNames "int m_nJumpsThisSlideSession"
// MNetworkVarNames "GameTime_t m_flOnGroundStartTime"
// MNetworkVarNames "GameTime_t m_flDashSlideStartTime"
class CCitadel_Ability_Slide : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x58]; // 0xab0
public:
	// MNetworkEnable
	CCitadelAutoScaledTime m_flGroundDashSlideTime; // 0xb08	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flSlowGetupStartTime; // 0xb20	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bShouldTriggerSlowGetup; // 0xb24	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bWantsSlide; // 0xb25	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	bool m_bAirborneWhenDuckPressed; // 0xb26	
	// MNetworkEnable
	bool m_bIsSliding; // 0xb27	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	float m_flSpeedAdjust; // 0xb28	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flDuckPressedTime; // 0xb2c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	float m_flVelocityAtDuckPressedTime; // 0xb30	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flSlideChangeTime; // 0xb34	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flSlidingOnFlatStartTime; // 0xb38	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	int32_t m_nJumpsThisSlideSession; // 0xb3c	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flOnGroundStartTime; // 0xb40	
	// MNetworkEnable
	// MNetworkUserGroup "LocalPlayerOwnerExclusive"
	GameTime_t m_flDashSlideStartTime; // 0xb44	
	bool m_bStartedSlideViaProbeSlope; // 0xb48	
private:
	[[maybe_unused]] uint8_t __pad0b49[0x3]; // 0xb49
public:
	ParticleIndex_t m_nSlideEffectIndex; // 0xb4c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xaf8
// Has VTable
class CRagdollPropAlias_physics_prop_ragdoll : public CRagdollProp
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BreakablePropExtraGoldPickupVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Powerup Values"
	int32_t m_iBaseExtraGoldBounty; // 0x5f8	
	// MPropertyGroupName "Powerup Values"
	int32_t m_iPerMinuteExtraGoldBounty; // 0x5fc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4b8
// Has VTable
class CFuncPropRespawnZone : public CBaseEntity
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Astro_Shotgun_Toggle_VData : public CitadelAbilityVData
{
public:
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_MagicStormWatcherVData : public CCitadel_Modifier_Intrinsic_BaseVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_BuffModifier; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xe0
// Has VTable
class CCitadel_Modifier_TrooperDisabledInvulnerability : public CCitadelModifier
{
public:
	float m_flBulletResistancePctMax; // 0xc8	
	bool m_bShieldUp; // 0xcc	
private:
	[[maybe_unused]] uint8_t __pad00cd[0x3]; // 0xcd
public:
	GameTime_t m_flShieldUpTime; // 0xd0	
	ModifierTrackedParticle_t m_trackInfo; // 0xd4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x850
// Has VTable
class CFuncTrackAuto : public CFuncTrackChange
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x158
// Has VTable
class CCitadel_Modifier_FlameDashGroundAura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4f0
// Has VTable
class CEnvSpark : public CPointEntity
{
public:
	float m_flDelay; // 0x4b8	
	int32_t m_nMagnitude; // 0x4bc	
	int32_t m_nTrailLength; // 0x4c0	
	int32_t m_nType; // 0x4c4	
	CEntityIOOutput m_OnSpark; // 0x4c8	
	
	// Datamap fields:
	// void CEnvSparkSparkThink; // 0x0
	// void InputStartSpark; // 0x0
	// void InputStopSpark; // 0x0
	// void InputToggleSpark; // 0x0
	// void InputSparkOnce; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd78
// Has VTable
class CCitadel_Ability_Uppercut : public CCitadel_Ability_Melee_Base
{
public:
	CUtlStringToken m_TypeIDStickyBombAttached; // 0xb38	
private:
	[[maybe_unused]] uint8_t __pad0b3c[0x234]; // 0xb3c
public:
	bool m_bShouldUseResources; // 0xd70	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb00
// Has VTable
// 
// MNetworkVarNames "EHANDLE m_vecPulseTargets"
class CCitadel_Ability_PsychicPulse : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x38]; // 0xab0
public:
	// MNetworkEnable
	CNetworkUtlVectorBase< CHandle< CBaseEntity > > m_vecPulseTargets; // 0xae8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
// Is Abstract
class CPlayer_AutoaimServices : public CPlayerPawnComponent
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x810
// Has VTable
class CFuncTrain : public CBasePlatTrain
{
public:
	CHandle< CBaseEntity > m_hCurrentTarget; // 0x7f0	
	bool m_activated; // 0x7f4	
private:
	[[maybe_unused]] uint8_t __pad07f5[0x3]; // 0x7f5
public:
	CHandle< CBaseEntity > m_hEnemy; // 0x7f8	
	float m_flBlockDamage; // 0x7fc	
	GameTime_t m_flNextBlockTime; // 0x800	
private:
	[[maybe_unused]] uint8_t __pad0804[0x4]; // 0x804
public:
	CUtlSymbolLarge m_iszLastTarget; // 0x808	
	
	// Datamap fields:
	// void CFuncTrainWait; // 0x0
	// void CFuncTrainNext; // 0x0
	// void InputToggle; // 0x0
	// void InputStart; // 0x0
	// void InputStop; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xab0
// Has VTable
class CCitadel_Ability_Ult_Shadow : public CCitadelBaseAbility
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x198
// Has VTable
class CCitadel_Modifier_WingBlastApply : public CCitadelModifier
{
private:
	[[maybe_unused]] uint8_t __pad00c8[0xa8]; // 0xc8
public:
	Vector m_vStart; // 0x170	
	Vector m_vEnd; // 0x17c	
	Vector m_vPush; // 0x188	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_ImmobilizeTrap_Debuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x938
// Has VTable
class CNpcFootSweep : public CBaseTrigger
{
public:
	CUtlVector< FootSweepPusher_t > m_vecPushers; // 0x918	
	bool m_bUseCenterPusher; // 0x930	
	bool m_bUseForwardPusher; // 0x931	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x620
// Has VTable
class CNavLinkAreaEntity : public CPointEntity
{
public:
	float m_flWidth; // 0x4b8	
	Vector m_vLocatorOffset; // 0x4bc	
	QAngle m_qLocatorAnglesOffset; // 0x4c8	
private:
	[[maybe_unused]] uint8_t __pad04d4[0x4]; // 0x4d4
public:
	CUtlSymbolLarge m_strMovementForward; // 0x4d8	
	CUtlSymbolLarge m_strMovementReverse; // 0x4e0	
	int32_t m_nNavLinkIdForward; // 0x4e8	
	int32_t m_nNavLinkIdReverse; // 0x4ec	
	bool m_bEnabled; // 0x4f0	
private:
	[[maybe_unused]] uint8_t __pad04f1[0x7]; // 0x4f1
public:
	CUtlSymbolLarge m_strFilterName; // 0x4f8	
	CHandle< CBaseFilter > m_hFilter; // 0x500	
private:
	[[maybe_unused]] uint8_t __pad0504[0x4]; // 0x504
public:
	CUtlVectorFixedGrowable< CHandle< CAI_BaseNPC >, 6 > m_vecNpcUsers; // 0x508	
	CUtlSymbolLarge m_szListenForAnimTag; // 0x538	
	bool m_bIsListeningForAnimTag; // 0x540	
private:
	[[maybe_unused]] uint8_t __pad0541[0xf]; // 0x541
public:
	CEntityIOOutput m_OnAnimTagFired; // 0x550	
	CEntityIOOutput m_OnAnimTagStart; // 0x578	
	CEntityIOOutput m_OnAnimTagEnd; // 0x5a0	
	CEntityIOOutput m_OnNavLinkStart; // 0x5c8	
	CEntityIOOutput m_OnNavLinkFinish; // 0x5f0	
	bool m_bIsTerminus; // 0x618	
	
	// Datamap fields:
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x870
// Has VTable
class CFuncMoveLinearAlias_momentary_door : public CFuncMoveLinear
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x530
// Has VTable
class CCommentaryAuto : public CBaseEntity
{
public:
	CEntityIOOutput m_OnCommentaryNewGame; // 0x4b8	
	CEntityIOOutput m_OnCommentaryMidGame; // 0x4e0	
	CEntityIOOutput m_OnCommentaryMultiplayerSpawn; // 0x508	
	
	// Datamap fields:
	// void InputMultiplayerSpawned; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15c0
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityBullChargeVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Camera"
	CitadelCameraOperationsSequence_t m_cameraSequenceImpact; // 0x14e8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_ModifierTossAirControlLockout; // 0x1568	
	CEmbeddedSubclass< CBaseModifier > m_ModifierWeaponPowerIncrease; // 0x1578	
	CEmbeddedSubclass< CBaseModifier > m_ModifierChargeDragEnemy; // 0x1588	
	CEmbeddedSubclass< CBaseModifier > m_ModifierBullCharging; // 0x1598	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strWallSlamSound; // 0x15a8	
	// MPropertyStartGroup "GamePlay"
	float m_flWallStunLookAheadDist; // 0x15b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CCitadel_Modifier_MagicCarpet_Flying : public CCitadel_Modifier_Base
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc28
// Has VTable
// 
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkExcludeByName "m_baseLayer.m_hSequence"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByName "m_flEncodedController"
// MNetworkExcludeByName "m_flPoseParameter"
// MNetworkVarTypeOverride "CCitadelPlayer_ObserverServices m_pObserverServices"
// MNetworkIncludeByName "m_pObserverServices"
// MNetworkVarTypeOverride "CCitadelPlayer_CameraServices m_pCameraServices"
// MNetworkIncludeByName "m_pCameraServices"
// MNetworkVarTypeOverride "CCitadelObserver_MovementServices m_pMovementServices"
// MNetworkIncludeByName "m_pMovementServices"
class CCitadelObserverPawn : public CCitadelPlayerPawnBase
{
public:
	// Datamap fields:
	// CCitadelPlayer_ObserverServices m_pObserverServices; // 0xa90
	// CCitadelPlayer_CameraServices m_pCameraServices; // 0xab0
	// CCitadelObserver_MovementServices m_pMovementServices; // 0xab8
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x120
// Has VTable
class CCitadel_Modifier_Tier2Boss_RocketDamage_Aura : public CCitadelModifierAura
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x608
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_Rutger_Pulse_VData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Sounds"
	CSoundEventName m_strSilenceTargetSound; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x17e0
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityShivDashVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DashModifier; // 0x14e8	
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DashImpactEffect; // 0x14f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DashSwingEffect; // 0x15d8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DashLineEffect; // 0x16b8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strDashStartWithTargets; // 0x1798	
	CSoundEventName m_strDashStartEcho; // 0x17a8	
	CSoundEventName m_strDashStartMiss; // 0x17b8	
	CSoundEventName m_strDashHitEnemy; // 0x17c8	
	// MPropertyStartGroup "+Dash Properties"
	float m_flEchoDelay; // 0x17d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb00
// Has VTable
class CCitadel_Ability_MobileResupply : public CCitadelBaseAbility
{
public:
	Vector m_vDeployPosition; // 0xab0	
	QAngle m_angDeploy; // 0xabc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18a8
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityHornetSnipeVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AssassinateShotParticle; // 0x14e8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_AssassinateShotParticleOwnerOnly; // 0x15c8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaserSightParticle; // 0x16a8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_LaserSightParticleOwnerOnly; // 0x1788	
	// MPropertyGroupName "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SnipeModifier; // 0x1868	
	CEmbeddedSubclass< CCitadelModifier > m_BuffOnKillModifier; // 0x1878	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strSnipeImpactSound; // 0x1888	
	// MPropertyStartGroup "+Snipe Properties"
	float m_flMinScopeTimeToShoot; // 0x1898	
	float m_flScopeTimeToFullPower; // 0x189c	
	float m_flScopeMinPowerFrac; // 0x18a0	
	float m_flFadeToBlackTime; // 0x18a4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x140
// Has VTable
class CCitadel_Modifier_AblativeCoatResistBuff : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifierVitalitySuppressorVData : public CCitadelModifierVData
{
public:
	// MPropertyGroupName "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_DebuffParticle; // 0x5f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4c8
// Has VTable
class CInfoRemarkable : public CPointEntity
{
public:
	int32_t m_iTimesRemarkedUpon; // 0x4b8	
private:
	[[maybe_unused]] uint8_t __pad04bc[0x4]; // 0x4bc
public:
	CUtlSymbolLarge m_szRemarkContext; // 0x4c0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_WeaponUpgrade_BansheeSlugs : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1580
// Has VTable
// 
// MGetKV3ClassDefaults
class CAbilityCadenceSilenceContraptionsVData : public CBaseDashCastAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_SilenceContraptionsModifier; // 0x1570	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4e8
// Has VTable
class CLogicMeasureMovement : public CLogicalEntity
{
public:
	CUtlSymbolLarge m_strMeasureTarget; // 0x4b8	
	CUtlSymbolLarge m_strMeasureReference; // 0x4c0	
	CUtlSymbolLarge m_strTargetReference; // 0x4c8	
	CHandle< CBaseEntity > m_hMeasureTarget; // 0x4d0	
	CHandle< CBaseEntity > m_hMeasureReference; // 0x4d4	
	CHandle< CBaseEntity > m_hTarget; // 0x4d8	
	CHandle< CBaseEntity > m_hTargetReference; // 0x4dc	
	float m_flScale; // 0x4e0	
	int32_t m_nMeasureType; // 0x4e4	
	
	// Datamap fields:
	// CUtlSymbolLarge InputSetMeasureTarget; // 0x0
	// CUtlSymbolLarge InputSetMeasureReference; // 0x0
	// CUtlSymbolLarge InputSetTarget; // 0x0
	// CUtlSymbolLarge InputSetTargetReference; // 0x0
	// float InputSetTargetScale; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
	// void CLogicMeasureMovementMeasureThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CModifier_Synth_Barrage_Amp_VData : public CCitadelModifierVData
{
public:
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1508
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_Gravity_Lasso_VData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CBaseModifier > m_GravityLassoSelf; // 0x14e8	
	CEmbeddedSubclass< CBaseModifier > m_GravityLassoTarget; // 0x14f8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_MeleeCharge_VData : public CCitadel_Modifier_BaseEventProcVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_SwingParticle; // 0x628	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HitParticle; // 0x708	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1700
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Item_HealthRegenAuraVData : public CitadelItemVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_HealParticle; // 0x1530	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_CastHealParticle; // 0x1610	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_HealingPulseTrackerModifier; // 0x16f0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x178
// Has VTable
class CCitadel_Modifier_GalvanicStormTechShield : public CCitadel_Modifier_RegeneratingTechShield
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc8
// Has VTable
class CCitadel_Modifier_ImmobilizeTrap_Immobilize : public CCitadel_Modifier_Root
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x4d8
// Has VTable
// 
// MNetworkVarNames "CCitadelHeroComponent::Storage_t m_CCitadelHeroComponent"
class C_HeroPreview : public CBaseEntity
{
public:
	// MNetworkEnable
	// MNetworkUserGroup "CCitadelHeroComponent"
	// MNetworkAlias "CCitadelHeroComponent"
	// MNetworkTypeAlias "CCitadelHeroComponent"
	// -> m_nHeroID - 0x4cc
	// -> m_nHeroLoading - 0x4d0
	CCitadelHeroComponent m_CCitadelHeroComponent; // 0x4b8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x48
// Has VTable
// 
// MNetworkVarNames "FixAngleSet_t nType"
// MNetworkVarNames "QAngle qAngle"
// MNetworkVarNames "uint32 nIndex"
struct ViewAngleServerChange_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x30]; // 0x0
public:
	// MNetworkEnable
	FixAngleSet_t nType; // 0x30	
private:
	[[maybe_unused]] uint8_t __pad0031[0x3]; // 0x31
public:
	// MNetworkEnable
	// MNetworkEncoder "qangle_precise"
	QAngle qAngle; // 0x34	
	// MNetworkEnable
	uint32_t nIndex; // 0x40	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb08
// Has VTable
class CCitadel_ArmorUpgrade_Colossus : public CCitadel_Item
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1618
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Ability_GoldenIdolVData : public CCitadel_Ability_BaseHeldItemVData
{
public:
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_sIdolDropOffSound; // 0x15c8	
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_DropoffTimerModifier; // 0x15d8	
	CEmbeddedSubclass< CCitadelModifier > m_Bonus01; // 0x15e8	
	CEmbeddedSubclass< CCitadelModifier > m_Bonus02; // 0x15f8	
	// MPropertyStartGroup "Gameplay"
	float m_flInstantGoldPercentage; // 0x1608	
	int32_t m_iComebackBounty; // 0x160c	
	int32_t m_iComebackGoldThreshold; // 0x1610	
	float m_flCasterBonusPercent; // 0x1614	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x100
// Has VTable
class CCitadel_Modifier_Slork_Visible : public CCitadelModifier
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Slork_Raging_CurrentVData : public CitadelAbilityVData
{
public:
	// MPropertyStartGroup "Modifiers"
	CEmbeddedSubclass< CCitadelModifier > m_AuraModifier; // 0x14e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1b8
// Has VTable
class CCitadel_Modifier_Thumper_Ability_2 : public CCitadelModifier
{
public:
	Vector m_vLastPosition; // 0xc8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6f8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_BulletFlurryVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_ImpactParticle; // 0x5f8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_strAttackerHitSound; // 0x6d8	
	CSoundEventName m_strVictimHitSound; // 0x6e8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd18
// Has VTable
// 
// MNetworkVarNames "bool m_bCardIsFlying"
class CCitadel_Ability_CardToss : public CCitadelBaseAbility
{
public:
	CUtlVector< CCitadel_Ability_CardToss::Card_t > m_vecCards; // 0xab0	
private:
	[[maybe_unused]] uint8_t __pad0ac8[0x248]; // 0xac8
public:
	// MNetworkEnable
	bool m_bCardIsFlying; // 0xd10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x7e8
// Has VTable
// 
// MGetKV3ClassDefaults
class CCitadel_Modifier_TeleportToObjectiveVData : public CCitadelModifierVData
{
public:
	// MPropertyStartGroup "Visuals"
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportOriginParticle; // 0x5f8	
	CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > > m_TeleportDestinationParticle; // 0x6d8	
	// MPropertyStartGroup "Sounds"
	CSoundEventName m_TeleportStartSound; // 0x7b8	
	CSoundEventName m_TeleportCompleteSound; // 0x7c8	
	CSoundEventName m_TeleportArriveSound; // 0x7d8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has VTable
// 
// MNetworkVarNames "EntitySubclassID_t m_SourceModifierID"
// MNetworkVarNames "EModifierValue m_eValType"
// MNetworkVarNames "float m_flValue"
struct StatViewerModifierValues_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x30]; // 0x0
public:
	// MNetworkEnable
	CUtlStringToken m_SourceModifierID; // 0x30	
	// MNetworkEnable
	EModifierValue m_eValType; // 0x34	
	// MNetworkEnable
	float m_flValue; // 0x38	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x988
// Has VTable
class CCitadel_BreakablePropHealthPickup : public CCitadel_BreakablePropPickup
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8
// Has Trivial Destructor
struct Relationship_t
{
public:
	Disposition_t disposition; // 0x0	
	int32_t priority; // 0x4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18
// Has Trivial Constructor
// Has Trivial Destructor
struct AutoRoomDoorwayPairs_t
{
public:
	Vector vP1; // 0x0	
	Vector vP2; // 0xc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x10
// Has Trivial Destructor
class CPathfindInDirectionData
{
public:
	Vector m_vGoalDir; // 0x0	
	float m_flMinPathLength; // 0xc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x34
// Has Trivial Destructor
class CSound
{
public:
	CHandle< CBaseEntity > m_hOwner; // 0x0	
	CHandle< CBaseEntity > m_hTarget; // 0x4	
	int32_t m_iVolume; // 0x8	
	float m_flOcclusionScale; // 0xc	
	// -> nType - 0x10
	// -> nFlags - 0x12
	AISound_t m_Sound; // 0x10	
	int32_t m_iNextAudible; // 0x14	
	GameTime_t m_flExpireTime; // 0x18	
	int16_t m_iNext; // 0x1c	
	bool m_bNoExpirationTime; // 0x1e	
private:
	[[maybe_unused]] uint8_t __pad001f[0x1]; // 0x1f
public:
	int32_t m_ownerChannelIndex; // 0x20	
	Vector m_vecOrigin; // 0x24	
	bool m_bHasOwner; // 0x30	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x60
class CResponseQueue
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x48]; // 0x0
public:
	CUtlVector< CAI_Expresser* > m_ExpresserTargets; // 0x48	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5c0
// Has VTable
class CAI_CitadelNPC_GraphController : public CAI_BaseNPCGraphController
{
public:
	CAnimGraphParamOptionalRef< int32 > m_nHitLayerTrigger; // 0x558	
	CAnimGraphParamOptionalRef< char* > m_pszDamageState; // 0x578	
	CAnimGraphParamOptionalRef< float32 > m_fHealth; // 0x5a0	
	
	// Static fields:
	static uint32_t &Get_s_nControllerTypeID(){return *reinterpret_cast<uint32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC_GraphController")->GetStaticFields()[0]->m_pInstance);};
	static bool &Get_s_bSchemaTest(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_CitadelNPC_GraphController")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x40
// Has Trivial Destructor
struct lerpdata_t
{
public:
	CHandle< CBaseEntity > m_hEnt; // 0x0	
	MoveType_t m_MoveType; // 0x4	
private:
	[[maybe_unused]] uint8_t __pad0005[0x3]; // 0x5
public:
	GameTime_t m_flStartTime; // 0x8	
	Vector m_vecStartOrigin; // 0xc	
private:
	[[maybe_unused]] uint8_t __pad0018[0x8]; // 0x18
public:
	Quaternion m_qStartRot; // 0x20	
	ParticleIndex_t m_nFXIndex; // 0x30	
	
	// Datamap fields:
	// void m_nSound; // 0x34
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d0
// Has VTable
class CPhysHinge : public CPhysConstraint
{
private:
	[[maybe_unused]] uint8_t __pad0530[0x8]; // 0x530
public:
	// -> m_vSampler - 0x540
	// -> m_soundProfile - 0x558
	// -> m_forwardAxis - 0x578
	// -> m_iszTravelSoundFwd - 0x588
	// -> m_iszTravelSoundBack - 0x590
	// -> m_iszReversalSounds[3] - 0x5a0
	// -> m_bPlayTravelSound - 0x5b8
	// -> m_bPlayReversalSound - 0x5b9
	ConstraintSoundInfo m_soundInfo; // 0x538	
	CEntityIOOutput m_NotifyMinLimitReached; // 0x5c0	
	CEntityIOOutput m_NotifyMaxLimitReached; // 0x5e8	
	bool m_bAtMinLimit; // 0x610	
	bool m_bAtMaxLimit; // 0x611	
private:
	[[maybe_unused]] uint8_t __pad0612[0x2]; // 0x612
public:
	constraint_hingeparams_t m_hinge; // 0x614	
	float m_hingeFriction; // 0x654	
	float m_systemLoadScale; // 0x658	
	bool m_bIsAxisLocal; // 0x65c	
private:
	[[maybe_unused]] uint8_t __pad065d[0x3]; // 0x65d
public:
	float m_flMinRotation; // 0x660	
	float m_flMaxRotation; // 0x664	
	float m_flInitialRotation; // 0x668	
	float m_flMotorFrequency; // 0x66c	
	float m_flMotorDampingRatio; // 0x670	
	float m_flAngleSpeed; // 0x674	
	float m_flAngleSpeedThreshold; // 0x678	
private:
	[[maybe_unused]] uint8_t __pad067c[0x4]; // 0x67c
public:
	CEntityIOOutput m_OnStartMoving; // 0x680	
	CEntityIOOutput m_OnStopMoving; // 0x6a8	
	
	// Datamap fields:
	// Vector m_hinge.worldPosition; // 0x614
	// Vector m_hinge.worldAxisDirection; // 0x620
	// float InputSetMotorTargetAngle; // 0x0
	// float InputSetVelocity; // 0x0
	// float InputSetHingeFriction; // 0x0
	// float InputSetMinLimit; // 0x0
	// float InputSetMaxLimit; // 0x0
	// void CPhysHingeSoundThink; // 0x0
	// void CPhysHingeLimitThink; // 0x0
	// void CPhysHingeMoveThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18
// Has Trivial Destructor
struct HandshakeInfo_t
{
public:
	HandshakeState_t m_nHandshakeState; // 0x0	
	HandshakeScope_t m_nHandshakeScope; // 0x4	
	GameTick_t m_nLastHandshakeUpdateTick; // 0x8	
	bool m_bForceHandshakeRestartOnScriptedSequenceCompletion; // 0xc	
private:
	[[maybe_unused]] uint8_t __pad000d[0x3]; // 0xd
public:
	CGlobalSymbol m_sHandshakeName; // 0x10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x8
// Has Trivial Constructor
// Has Trivial Destructor
struct AI_SchedLoadStatus_t
{
public:
	bool bValid; // 0x0	
	int32_t nSignature; // 0x4	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x15d0
// Has VTable
class CNPC_MortarSentry : public CAI_CitadelNPC
{
private:
	[[maybe_unused]] uint8_t __pad1578[0xc]; // 0x1578
public:
	float m_flAttackCone; // 0x1584	
	float m_flLastAlertSound; // 0x1588	
	float m_flTrackingSpeed; // 0x158c	
	Vector m_vTargetPosition; // 0x1590	
	float m_flSearchRadius; // 0x159c	
	
	// Static fields:
	static CUtlSymbolLarge &Get_SCHED_MORTAR_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MortarSentry")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_SCHED_MORTAR_SENTRY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MortarSentry")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MORTAR_ATTACK(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MortarSentry")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_MORTAR_NO_TARGET_VOLLEY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MortarSentry")->GetStaticFields()[3]->m_pInstance);};
	
	// Datamap fields:
	// float m_flLifeTime; // 0x15a0
	// void m_nCurrentVolley; // 0x15b0
	// void m_nGrenadesPerVolley; // 0x15b4
	// void m_flNextAttackTime; // 0x15b8
	// void m_flAttackRateInnerVolley; // 0x15bc
	// void m_flAttackRate; // 0x15c0
	// void m_vLastTargetPos; // 0x15c4
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x18
// Has Trivial Destructor
struct ResponseContext_t
{
public:
	CUtlSymbolLarge m_iszName; // 0x0	
	CUtlSymbolLarge m_iszValue; // 0x8	
	GameTime_t m_fExpirationTime; // 0x10	
};

// Registered binary: server.dll (project 'navlib')
// Alignment: 8
// Size: 0x70
// Has VTable
// Is Abstract
class CNavVolume
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x70]; // 0x0
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 4
// Size: 0x6c
// Has Trivial Destructor
// 
// MGetKV3ClassDefaults
class CGameScriptedMoveData
{
public:
	Vector m_vAccumulatedRootMotion; // 0x0	
	Vector m_vDest; // 0xc	
	Vector m_vSrc; // 0x18	
	QAngle m_angSrc; // 0x24	
	QAngle m_angDst; // 0x30	
	QAngle m_angCurrent; // 0x3c	
	float m_flLockedSpeed; // 0x48	
	float m_flAngRate; // 0x4c	
	float m_flDuration; // 0x50	
	GameTime_t m_flStartTime; // 0x54	
	bool m_bActive; // 0x58	
	bool m_bTeleportOnEnd; // 0x59	
	bool m_bIgnoreRotation; // 0x5a	
private:
	[[maybe_unused]] uint8_t __pad005b[0x1]; // 0x5b
public:
	ScriptedMoveType_t m_nType; // 0x5c	
	bool m_bSuccess; // 0x60	
private:
	[[maybe_unused]] uint8_t __pad0061[0x3]; // 0x61
public:
	ForcedCrouchState_t m_nForcedCrouchState; // 0x64	
	bool m_bIgnoreCollisions; // 0x68	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5128
// Has VTable
class CAI_Pathfinder
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x5110]; // 0x0
public:
	float m_flNavMaxDetour; // 0x5110	
};

// Registered binary: server.dll (project 'navlib')
// Alignment: 8
// Size: 0x80
// Has VTable
class CNavVolumeSphere : public CNavVolume
{
public:
	Vector m_vCenter; // 0x70	
	float m_flRadius; // 0x7c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x78
// Has VTable
class CAI_Expresser
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x38]; // 0x0
public:
	GameTime_t m_flStopTalkTime; // 0x38	
	GameTime_t m_flStopTalkTimeWithoutDelay; // 0x3c	
	GameTime_t m_flBlockedTalkTime; // 0x40	
	int32_t m_voicePitch; // 0x44	
	GameTime_t m_flLastTimeAcceptedSpeak; // 0x48	
	bool m_bAllowSpeakingInterrupts; // 0x4c	
	bool m_bConsiderSceneInvolvementAsSpeech; // 0x4d	
	bool m_bSceneEntityDisabled; // 0x4e	
private:
	[[maybe_unused]] uint8_t __pad004f[0x1]; // 0x4f
public:
	int32_t m_nLastSpokenPriority; // 0x50	
private:
	[[maybe_unused]] uint8_t __pad0054[0x1c]; // 0x54
public:
	CBaseFlex* m_pOuter; // 0x70	
	
	// Datamap fields:
	// void m_pSink; // 0x8
	// void m_conceptCooldowns; // 0x10
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x10
// Has Trivial Destructor
class CAI_MoveMonitor
{
public:
	Vector m_vMark; // 0x0	
	float m_flMarkTolerance; // 0xc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x58
struct CitadelCurvedAbilityProjectileCreateInfo_t : public CitadelAbilityProjectileCreateInfo_t
{
public:
	float m_flTimeToReturn; // 0x50	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xc88
// Has VTable
class CCitadel_Ability_HornetSting : public CCitadelBaseAbility
{
private:
	[[maybe_unused]] uint8_t __pad0ab0[0x70]; // 0xab0
public:
	CitadelAbilityProjectileCreateInfo_t m_projInfo; // 0xb20	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6d0
// Has VTable
class CPhysHingeAlias_phys_hinge_local : public CPhysHinge
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x30
class CAI_BehaviorHost
{
public:
	CAI_Behavior* m_pActiveBehavior; // 0x0	
	CAI_BaseNPC* m_pOuter; // 0x8	
	CUtlVector< CAI_Behavior* > m_Behaviors; // 0x10	
	bool m_bCalledBehaviorSelectSchedule; // 0x28	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x670
// Has VTable
class CNPC_TrooperNeutral_GraphController : public CAI_CitadelNPC_GraphController
{
public:
	CAnimGraphParamOptionalRef< bool > m_bShielded; // 0x5c0	
	CAnimGraphParamOptionalRef< bool > m_bAlert; // 0x5e0	
	CAnimGraphParamOptionalRef< char* > m_pszAttackLeanPosition; // 0x600	
	CAnimGraphParamOptionalRef< char* > m_pszOrbDrop; // 0x628	
	CAnimGraphParamOptionalRef< bool > m_bHeavyMelee; // 0x650	
	
	// Static fields:
	static uint32_t &Get_s_nControllerTypeID(){return *reinterpret_cast<uint32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral_GraphController")->GetStaticFields()[0]->m_pInstance);};
	static bool &Get_s_bSchemaTest(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutral_GraphController")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x64
// Has Trivial Constructor
// Has Trivial Destructor
struct dynpitchvol_t : public dynpitchvol_base_t
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'navlib')
// Alignment: 8
// Size: 0x98
// Has VTable
class CNavVolumeVector : public CNavVolume
{
private:
	[[maybe_unused]] uint8_t __pad0070[0x8]; // 0x70
public:
	bool m_bHasBeenPreFiltered; // 0x78	
};

// Registered binary: server.dll (project 'navlib')
// Alignment: 8
// Size: 0x10
// Has Trivial Destructor
struct NavGravity_t
{
public:
	Vector m_vGravity; // 0x0	
	bool m_bDefault; // 0xc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1630
// Has VTable
class CNPC_SurveillanceDrone : public CNPC_FlyingDrone
{
public:
	int32_t m_iMinionHealth; // 0x15d0	
	float m_flLifetime; // 0x15d4	
private:
	[[maybe_unused]] uint8_t __pad15d8[0xc]; // 0x15d8
public:
	Vector m_vecHome; // 0x15e4	
private:
	[[maybe_unused]] uint8_t __pad15f0[0x10]; // 0x15f0
public:
	int32_t m_nAbilityLevel; // 0x1600	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x508
// Has VTable
class CEnvShake : public CPointEntity
{
public:
	CUtlSymbolLarge m_limitToEntity; // 0x4b8	
	float m_Amplitude; // 0x4c0	
	float m_Frequency; // 0x4c4	
	float m_Duration; // 0x4c8	
	float m_Radius; // 0x4cc	
	GameTime_t m_stopTime; // 0x4d0	
	GameTime_t m_nextShake; // 0x4d4	
	float m_currentAmp; // 0x4d8	
	Vector m_maxForce; // 0x4dc	
private:
	[[maybe_unused]] uint8_t __pad04e8[0x8]; // 0x4e8
public:
	CPhysicsShake m_shakeCallback; // 0x4f0	
	
	// Datamap fields:
	// void m_pShakeController; // 0x4e8
	// void InputStartShake; // 0x0
	// void InputStopShake; // 0x0
	// float InputAmplitude; // 0x0
	// float InputFrequency; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5e8
// Has VTable
class CPhysSlideConstraint : public CPhysConstraint
{
private:
	[[maybe_unused]] uint8_t __pad0530[0x8]; // 0x530
public:
	Vector m_axisEnd; // 0x538	
	float m_slideFriction; // 0x544	
	float m_systemLoadScale; // 0x548	
	float m_initialOffset; // 0x54c	
	bool m_bEnableLinearConstraint; // 0x550	
	bool m_bEnableAngularConstraint; // 0x551	
private:
	[[maybe_unused]] uint8_t __pad0552[0x2]; // 0x552
public:
	float m_flMotorFrequency; // 0x554	
	float m_flMotorDampingRatio; // 0x558	
	bool m_bUseEntityPivot; // 0x55c	
private:
	[[maybe_unused]] uint8_t __pad055d[0x3]; // 0x55d
public:
	// -> m_vSampler - 0x568
	// -> m_soundProfile - 0x580
	// -> m_forwardAxis - 0x5a0
	// -> m_iszTravelSoundFwd - 0x5b0
	// -> m_iszTravelSoundBack - 0x5b8
	// -> m_iszReversalSounds[3] - 0x5c8
	// -> m_bPlayTravelSound - 0x5e0
	// -> m_bPlayReversalSound - 0x5e1
	ConstraintSoundInfo m_soundInfo; // 0x560	
	
	// Datamap fields:
	// float InputSetOffset; // 0x0
	// float InputSetVelocity; // 0x0
	// float InputSetSlideFriction; // 0x0
	// void CPhysSlideConstraintSoundThink; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x138
// Has VTable
class CAI_Senses : public CAI_Component
{
public:
	float m_flLookDist; // 0x40	
	float m_flLookDistIdle; // 0x44	
	float m_flLastLookDist; // 0x48	
	GameTime_t m_TimeLastLook; // 0x4c	
	int32_t m_iAudibleList; // 0x50	
private:
	[[maybe_unused]] uint8_t __pad0054[0x4]; // 0x54
public:
	CUtlVector< CHandle< CBaseEntity > > m_SeenHighPriority; // 0x58	
	CUtlVector< CHandle< CBaseEntity > > m_SeenNPCs; // 0x70	
	CUtlVector< CHandle< CBaseEntity > > m_SeenMisc; // 0x88	
	CUtlVector< CHandle< CBaseEntity > > m_GatheredEntities; // 0xa0	
	CUtlVector< CHandle< CBaseEntity > > m_GatheredProxyEntities; // 0xb8	
	CUtlVector< CHandle< CBaseEntity > >* m_SeenArrays[3]; // 0xd0	
	GameTime_t m_TimeLastLookHighPriority; // 0xe8	
	GameTime_t m_TimeLastLookNPCs; // 0xec	
	GameTime_t m_TimeLastLookMisc; // 0xf0	
	int32_t m_iSensingFlags; // 0xf4	
	// -> m_hOwner - 0xf8
	// -> m_hTarget - 0xfc
	// -> m_iVolume - 0x100
	// -> m_flOcclusionScale - 0x104
	// -> m_Sound - 0x108
	// -> m_iNextAudible - 0x10c
	// -> m_flExpireTime - 0x110
	// -> m_iNext - 0x114
	// -> m_bNoExpirationTime - 0x116
	// -> m_ownerChannelIndex - 0x118
	// -> m_vecOrigin - 0x11c
	// -> m_bHasOwner - 0x128
	CSound m_CachedTaskSound; // 0xf8	
	float m_flHearingSensitivity; // 0x12c	
	int32_t m_nSoundInterests; // 0x130	
	
	// Datamap fields:
	// void m_SeenArrays; // 0xd0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x28
// Has VTable
// 
// MGetKV3ClassDefaults
struct SquadModeInfo_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x10]; // 0x0
public:
	CUtlVector< SquadSlotId_t > m_vecSlots; // 0x10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x88
// Has VTable
class CAI_FreePass : public CAI_Component
{
public:
	CHandle< CBaseEntity > m_hTarget; // 0x40	
	float m_FreePassTimeRemaining; // 0x44	
	// -> m_vMark - 0x48
	// -> m_flMarkTolerance - 0x54
	CAI_MoveMonitor m_FreePassMoveMonitor; // 0x48	
	// -> timeToTrigger - 0x60
	// -> duration - 0x64
	// -> moveTolerance - 0x68
	// -> refillRate - 0x6c
	// -> coverDist - 0x70
	// -> peekTime - 0x74
	// -> peekTimeAfterDamage - 0x78
	// -> peekEyeDist - 0x7c
	// -> peekEyeDistZ - 0x80
	AI_FreePassParams_t m_Params; // 0x58	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x98
// Has VTable
class CAI_AnimGraphServices : public CAI_Component
{
public:
	// -> m_nHandshakeState - 0x40
	// -> m_nHandshakeScope - 0x44
	// -> m_nLastHandshakeUpdateTick - 0x48
	// -> m_bForceHandshakeRestartOnScriptedSequenceCompletion - 0x4c
	// -> m_sHandshakeName - 0x50
	HandshakeInfo_t m_pHandshakeInfo[2]; // 0x40	
	float m_flMinFaceTolerance; // 0x70	
	// -> vecDir - 0x74
	// -> vecBoneLocalPos - 0x80
	// -> nHitboxBoneIndex - 0x8c
	// -> flHitStrength - 0x90
	// -> nDamageType - 0x94
	LastIncomingHit_t m_LastIncomingHit; // 0x74	
	
	// Static fields:
	static CUtlSymbolLarge &Get_TASK_GRAPH_START_HANDSHAKE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_AnimGraphServices")->GetStaticFields()[0]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GRAPH_WAIT_FOR_HANDSHAKE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_AnimGraphServices")->GetStaticFields()[1]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GRAPH_WAIT_FOR_HANDSHAKE_AND_FACE_ENEMY(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_AnimGraphServices")->GetStaticFields()[2]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GRAPH_WAIT_FOR_HANDSHAKE_TO_BECOME_ACTIVE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_AnimGraphServices")->GetStaticFields()[3]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GRAPH_WAIT_FOR_PREVIOUS_HANDSHAKE_TO_BECOME_INACTIVE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_AnimGraphServices")->GetStaticFields()[4]->m_pInstance);};
	static CUtlSymbolLarge &Get_TASK_GRAPH_CANCEL_HANDSHAKE(){return *reinterpret_cast<CUtlSymbolLarge*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CAI_AnimGraphServices")->GetStaticFields()[5]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x60
// Has VTable
class CCommentarySystem
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x11]; // 0x0
public:
	bool m_bCommentaryConvarsChanging; // 0x11	
	bool m_bCommentaryEnabledMidGame; // 0x12	
private:
	[[maybe_unused]] uint8_t __pad0013[0x1]; // 0x13
public:
	GameTime_t m_flNextTeleportTime; // 0x14	
	int32_t m_iTeleportStage; // 0x18	
	bool m_bCheatState; // 0x1c	
	bool m_bIsFirstSpawnGroupToLoad; // 0x1d	
private:
	[[maybe_unused]] uint8_t __pad001e[0x1a]; // 0x1e
public:
	CHandle< CPointCommentaryNode > m_hCurrentNode; // 0x38	
	CHandle< CPointCommentaryNode > m_hActiveCommentaryNode; // 0x3c	
	CHandle< CPointCommentaryNode > m_hLastCommentaryNode; // 0x40	
private:
	[[maybe_unused]] uint8_t __pad0044[0x4]; // 0x44
public:
	CUtlVector< CHandle< CPointCommentaryNode > > m_vecNodes; // 0x48	
	
	// Datamap fields:
	// void m_ModifiedConvars; // 0x20
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14
// Has Trivial Destructor
struct ChoreoEntityFacing_t
{
public:
	SceneEventId_t m_nSceneEventId; // 0x0	
	Vector m_vFacingTarget; // 0x4	
	float m_flImportance; // 0x10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
class CNPC_MidBoss_GraphController : public CAI_CitadelNPC_GraphController
{
public:
	CAnimGraphParamRef< char* > m_pszActivity; // 0x5c0	
	CAnimGraphTagRef m_sAbilityDeployActive; // 0x5e8	
	
	// Static fields:
	static uint32_t &Get_s_nControllerTypeID(){return *reinterpret_cast<uint32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss_GraphController")->GetStaticFields()[0]->m_pInstance);};
	static bool &Get_s_bSchemaTest(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_MidBoss_GraphController")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CAI_Path
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	CAI_WaypointList m_Waypoints; // 0x8	
	Vector m_vPrevWaypoint; // 0x10	
	Vector m_vPrevWaypointBase; // 0x1c	
	CAI_WaypointList m_WaypointsLocal; // 0x28	
private:
	[[maybe_unused]] uint8_t __pad0030[0x8]; // 0x30
public:
	uint32_t m_nLocalPathHash; // 0x38	
	float m_flGoalTolerance; // 0x3c	
	float m_flWaypointTolerance; // 0x40	
	CHandle< CBaseEntity > m_hTarget; // 0x44	
	Vector m_vTargetOffset; // 0x48	
	bool m_bArrivalRequiresCrouch; // 0x54	
	bool m_bGoalPosSet; // 0x55	
private:
	[[maybe_unused]] uint8_t __pad0056[0x2]; // 0x56
public:
	Vector m_vGoalActualPos; // 0x58	
	Vector m_vGoalBasePos; // 0x64	
	Vector m_vGoalActualPos_EntityInitial; // 0x70	
	Vector m_vGoalBasePos_EntityInitial; // 0x7c	
	Vector m_vGoalPosBlocked; // 0x88	
	// -> m_vGravity - 0x94
	// -> m_bDefault - 0xa0
	NavGravity_t m_GravityAtGoalPos; // 0x94	
	bool m_bGoalTypeSet; // 0xa4	
private:
	[[maybe_unused]] uint8_t __pad00a5[0x3]; // 0xa5
public:
	GoalType_t m_goalType; // 0xa8	
	AI_NavGoalFlags_t m_goalFlags; // 0xac	
	CUtlString m_pathRestrictionTag; // 0xb0	
	float m_flGoalMaxPathLength; // 0xb8	
	float m_flGoalMaxTravelDist; // 0xbc	
	GameTime_t m_flGoalChangeTime; // 0xc0	
	GameTime_t m_flPathChangeTime; // 0xc4	
	float m_flDistAdvancedToCurWaypoint; // 0xc8	
	Vector m_vGoalDirection; // 0xcc	
	CHandle< CBaseEntity > m_hGoalDirectionTarget; // 0xd8	
	float m_flGoalDirectionToleranceDot; // 0xdc	
private:
	[[maybe_unused]] uint8_t __pad00e0[0x8]; // 0xe0
public:
	uint32_t m_nConstrainedToMovableMeshId; // 0xe8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x30
// Has Trivial Destructor
class CPathfindLocalData
{
public:
	Vector m_vLocalStart; // 0x0	
	Vector m_vLocalEnd; // 0xc	
private:
	[[maybe_unused]] uint8_t __pad0018[0x8]; // 0x18
public:
	WaypointFlags_t m_nEndFlags; // 0x20	
	int32_t m_nBuildFlags; // 0x24	
	int32_t m_nodeID; // 0x28	
	float m_flYaw; // 0x2c	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x6b0
// Has VTable
class CNPC_Boss_Tier2_GraphController : public CAI_CitadelNPC_GraphController
{
public:
	CAnimGraphParamRef< char* > m_pszActivity; // 0x5c0	
	CAnimGraphParamRef< char* > m_pszStompAttack; // 0x5e8	
	CAnimGraphParamRef< char* > m_pszStaggerDirection; // 0x610	
	CAnimGraphParamRef< char* > m_pszElectricBeamPosition; // 0x638	
	CAnimGraphTagRef m_sStaggered; // 0x660	
	CAnimGraphTagRef m_sStomp; // 0x678	
	bool m_bHasStompStarted; // 0x690	
private:
	[[maybe_unused]] uint8_t __pad0691[0x7]; // 0x691
public:
	CAnimGraphTagRef m_sApplyStompDamage; // 0x698	
	
	// Static fields:
	static uint32_t &Get_s_nControllerTypeID(){return *reinterpret_cast<uint32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2_GraphController")->GetStaticFields()[0]->m_pInstance);};
	static bool &Get_s_bSchemaTest(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier2_GraphController")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14
// Has Trivial Destructor
struct AISquadSlotTargetInfo_t
{
public:
	CHandle< CBaseEntity > hTarget; // 0x0	
	CBitVec< 48 > slots; // 0x4	
	CBitVec< 48 > inactive_slots_by_mode; // 0xc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x20
// Has VTable
class CGameChoreoServices : public IChoreoServices
{
public:
	CHandle< CBaseAnimGraph > m_hOwner; // 0x8	
	CHandle< CScriptedSequence > m_hScriptedSequence; // 0xc	
	IChoreoServices::ScriptState_t m_scriptState; // 0x10	
	IChoreoServices::ChoreoState_t m_choreoState; // 0x14	
	GameTime_t m_flTimeStartedState; // 0x18	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb8
// Has VTable
class CShatterGlassShard
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	uint32_t m_hShardHandle; // 0x8	
private:
	[[maybe_unused]] uint8_t __pad000c[0x4]; // 0xc
public:
	CUtlVector< Vector2D > m_vecPanelVertices; // 0x10	
	Vector2D m_vLocalPanelSpaceOrigin; // 0x28	
	CStrongHandle< InfoForResourceTypeCModel > m_hModel; // 0x30	
	CHandle< CShatterGlassShardPhysics > m_hPhysicsEntity; // 0x38	
	CHandle< CFuncShatterglass > m_hParentPanel; // 0x3c	
	uint32_t m_hParentShard; // 0x40	
	ShatterGlassStressType m_ShatterStressType; // 0x44	
private:
	[[maybe_unused]] uint8_t __pad0045[0x3]; // 0x45
public:
	Vector m_vecStressVelocity; // 0x48	
	bool m_bCreatedModel; // 0x54	
private:
	[[maybe_unused]] uint8_t __pad0055[0x3]; // 0x55
public:
	float m_flLongestEdge; // 0x58	
	float m_flShortestEdge; // 0x5c	
	float m_flLongestAcross; // 0x60	
	float m_flShortestAcross; // 0x64	
	float m_flSumOfAllEdges; // 0x68	
	float m_flArea; // 0x6c	
	OnFrame m_nOnFrameEdge; // 0x70	
private:
	[[maybe_unused]] uint8_t __pad0071[0x3]; // 0x71
public:
	int32_t m_nSubShardGeneration; // 0x74	
	Vector2D m_vecAverageVertPosition; // 0x78	
	bool m_bAverageVertPositionIsValid; // 0x80	
private:
	[[maybe_unused]] uint8_t __pad0081[0x3]; // 0x81
public:
	Vector2D m_vecPanelSpaceStressPositionA; // 0x84	
	Vector2D m_vecPanelSpaceStressPositionB; // 0x8c	
	bool m_bStressPositionAIsValid; // 0x94	
	bool m_bStressPositionBIsValid; // 0x95	
	bool m_bFlaggedForRemoval; // 0x96	
private:
	[[maybe_unused]] uint8_t __pad0097[0x1]; // 0x97
public:
	GameTime_t m_flPhysicsEntitySpawnedAtTime; // 0x98	
	CHandle< CBaseEntity > m_hEntityHittingMe; // 0x9c	
	CUtlVector< uint32 > m_vecNeighbors; // 0xa0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x10
// Has Trivial Destructor
// 
// MGetKV3ClassDefaults
struct TaskThinkTime_t
{
public:
	CUtlSymbolLarge iTaskId; // 0x0	
	double flThinkTime; // 0x8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14
// Has Trivial Destructor
class CPathfindRandomData
{
public:
	Vector m_vCenter; // 0x0	
	float m_flMinRadius; // 0xc	
	float m_flMaxRadius; // 0x10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x10
// Has Trivial Destructor
struct magnetted_objects_t
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	CHandle< CBaseEntity > hEntity; // 0x8	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x510
// Has VTable
class CNodeEnt_InfoNodeHint : public CNodeEnt
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'navlib')
// Alignment: 8
// Size: 0x18
// 
// MVDataRoot
// MGetKV3ClassDefaults
class CNavHullPresetVData
{
public:
	// MPropertyFriendlyName "Nav Hulls"
	// MPropertyDescription "List of nav hulls belonging to this preset."
	// MPropertyAttributeEditor "VDataChoice( scripts/nav_hulls.vdata )"
	CUtlVector< CUtlString > m_vecNavHulls; // 0x0	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xf50
// Has VTable
class CPropDoorRotatingBreakable : public CPropDoorRotating
{
public:
	bool m_bBreakable; // 0xf30	
	bool m_isAbleToCloseAreaPortals; // 0xf31	
private:
	[[maybe_unused]] uint8_t __pad0f32[0x2]; // 0xf32
public:
	int32_t m_currentDamageState; // 0xf34	
	CUtlVector< CUtlSymbolLarge > m_damageStates; // 0xf38	
	
	// Datamap fields:
	// void InputSetUnbreakable; // 0x0
	// void InputSetBreakable; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x58
struct CitadelTrackedAbilityProjectileCreateInfo_t : public CitadelAbilityProjectileCreateInfo_t
{
public:
	CHandle< CBaseEntity > m_hTrackedTarget; // 0x50	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5d8
// Has VTable
class CNPC_Trooper_GraphController : public CAI_CitadelNPC_GraphController
{
public:
	CAnimGraphTagRef m_sUsingMelee; // 0x5c0	
	
	// Static fields:
	static uint32_t &Get_s_nControllerTypeID(){return *reinterpret_cast<uint32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper_GraphController")->GetStaticFields()[0]->m_pInstance);};
	static bool &Get_s_bSchemaTest(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Trooper_GraphController")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x20
// Has VTable
// Has Trivial Destructor
class CSmoothFunc
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	float m_flSmoothAmplitude; // 0x8	
	float m_flSmoothBias; // 0xc	
	float m_flSmoothDuration; // 0x10	
	float m_flSmoothRemainingTime; // 0x14	
	int32_t m_nSmoothDir; // 0x18	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x600
// Has VTable
class CNPC_Boss_Tier3_GraphController : public CAI_CitadelNPC_GraphController
{
public:
	CAnimGraphParamRef< char* > m_pszActivity; // 0x5c0	
	CAnimGraphTagOptionalRef m_sDeathExplode; // 0x5e8	
	
	// Static fields:
	static uint32_t &Get_s_nControllerTypeID(){return *reinterpret_cast<uint32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3_GraphController")->GetStaticFields()[0]->m_pInstance);};
	static bool &Get_s_bSchemaTest(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier3_GraphController")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x508
// Has VTable
class CPhysMotor : public CLogicalEntity
{
public:
	CUtlSymbolLarge m_nameAttach; // 0x4b8	
	CHandle< CBaseEntity > m_hAttachedObject; // 0x4c0	
	float m_spinUp; // 0x4c4	
	float m_additionalAcceleration; // 0x4c8	
	float m_angularAcceleration; // 0x4cc	
	GameTime_t m_lastTime; // 0x4d0	
private:
	[[maybe_unused]] uint8_t __pad04d4[0x14]; // 0x4d4
public:
	// -> m_speed - 0x4f0
	// -> m_maxTorque - 0x4f4
	// -> m_axis - 0x4f8
	// -> m_inertiaFactor - 0x504
	CMotorController m_motor; // 0x4e8	
	
	// Datamap fields:
	// float InputSetTargetSpeed; // 0x0
	// void InputTurnOn; // 0x0
	// void InputTurnOff; // 0x0
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x528
// Has VTable
class CPhysTorque : public CPhysForce
{
public:
	Vector m_axis; // 0x518	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x30
// Has Trivial Destructor
struct UnreachableTarget_t
{
public:
	UnreachableTargetType_t nTargetType; // 0x0	
	CHandle< CBaseEntity > hTargetEnt; // 0x4	
	Vector vecTargetWorldPos; // 0x8	
private:
	[[maybe_unused]] uint8_t __pad0014[0x4]; // 0x14
public:
	CGlobalSymbol sTargetSymbol; // 0x18	
	GameTime_t fExpireTime; // 0x20	
	Vector vecTargetLocationWhenUnreachable; // 0x24	
};

// Registered binary: server.dll (project 'navlib')
// Alignment: 8
// Size: 0x18
// Has Trivial Destructor
class Extent
{
public:
	Vector lo; // 0x0	
	Vector hi; // 0xc	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14
// Has Trivial Destructor
struct FootSweepPusher_t
{
public:
	Vector m_vC; // 0x0	
	float m_flR; // 0xc	
	bool m_bIsForward; // 0x10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x88
// Has VTable
class CAI_ExpresserWithFollowup : public CAI_Expresser
{
public:
	ResponseFollowup* m_pPostponedFollowup; // 0x78	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xd8
// Has VTable
class CNavVolumeMarkupVolume : public CNavVolume
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x60
struct AI_Waypoint_t
{
public:
	Vector m_vPos; // 0x0	
	WaypointFlags_t m_fWaypointFlags; // 0xc	
	Navigation_t m_nWpType; // 0x10	
private:
	[[maybe_unused]] uint8_t __pad0014[0x14]; // 0x14
public:
	int32_t m_nNodeId; // 0x28	
	float m_flYaw; // 0x2c	
	float m_flBoundaryDist; // 0x30	
	float m_flPathDistGoal; // 0x34	
	CHandle< CBaseEntity > m_hPathCorner; // 0x38	
	CHandle< CBaseEntity > m_hData; // 0x3c	
	uint32_t m_nGroundNavAreaId; // 0x40	
	uint32_t m_nNavLinkAreaId; // 0x44	
	// -> m_vGravity - 0x48
	// -> m_bDefault - 0x54
	NavGravity_t m_gravityOverride; // 0x48	
	bool m_bGravityOverrideSet; // 0x58	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x90
// Has VTable
class CMultiplayer_Expresser : public CAI_ExpresserWithFollowup
{
public:
	bool m_bAllowMultipleScenes; // 0x88	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x108
// Has VTable
class CAI_CitadelPlayerBotNavigator : public CAI_Navigator
{
public:
	bool m_bBlocked; // 0x100	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x648
// Has VTable
class CNPC_Boss_Tier1_GraphController : public CNPC_Trooper_GraphController
{
public:
	CAnimGraphParamRef< char* > m_pszActivity; // 0x5d8	
	CAnimGraphParamRef< char* > m_pszLaneSide; // 0x600	
	CAnimGraphParamRef< bool > m_bShieldMode; // 0x628	
	
	// Static fields:
	static uint32_t &Get_s_nControllerTypeID(){return *reinterpret_cast<uint32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier1_GraphController")->GetStaticFields()[0]->m_pInstance);};
	static bool &Get_s_bSchemaTest(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_Boss_Tier1_GraphController")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x34
// Has Trivial Destructor
class CAI_InterestTarget
{
public:
	CHandle< CBaseEntity > m_hTarget; // 0x0	
	Vector m_vPosition; // 0x4	
	Vector m_vDirection; // 0x10	
	bool m_bDiscardOutsideViewcone; // 0x1c	
private:
	[[maybe_unused]] uint8_t __pad001d[0x3]; // 0x1d
public:
	ChoreoLookAtMode_t m_nLookAtMode; // 0x20	
	ChoreoLookAtSpeed_t m_nLookAtSpeed; // 0x24	
	CAI_InterestTarget::Type_t m_eType; // 0x28	
	WorldGroupId_t m_nWorldGroupId; // 0x2c	
	GameTime_t m_flEndTime; // 0x30	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x5d0
// Has VTable
class CAI_ScriptConditions : public CBaseEntity
{
private:
	[[maybe_unused]] uint8_t __pad04b8[0x8]; // 0x4b8
public:
	CEntityIOOutput m_OnConditionsSatisfied; // 0x4c0	
	CEntityIOOutput m_OnConditionsTimeout; // 0x4e8	
	CEntityIOOutput m_NoValidActors; // 0x510	
	bool m_fDisabled; // 0x538	
	bool m_bLeaveAsleep; // 0x539	
private:
	[[maybe_unused]] uint8_t __pad053a[0x2]; // 0x53a
public:
	CHandle< CBaseEntity > m_hTarget; // 0x53c	
	float m_flRequiredDuration; // 0x540	
	NPC_STATE m_fMinState; // 0x544	
	NPC_STATE m_fMaxState; // 0x548	
	ThreeState_t m_fScriptStatus; // 0x54c	
	ThreeState_t m_fActorSeePlayer; // 0x550	
private:
	[[maybe_unused]] uint8_t __pad0554[0x4]; // 0x554
public:
	CUtlSymbolLarge m_Actor; // 0x558	
	float m_flPlayerActorProximity; // 0x560	
	CAI_ProxTester m_PlayerActorProxTester; // 0x564	
	float m_flPlayerActorFOV; // 0x56c	
	bool m_bPlayerActorFOVTrueCone; // 0x570	
private:
	[[maybe_unused]] uint8_t __pad0571[0x3]; // 0x571
public:
	ThreeState_t m_fPlayerActorLOS; // 0x574	
	ThreeState_t m_fActorSeeTarget; // 0x578	
	float m_flActorTargetProximity; // 0x57c	
	CAI_ProxTester m_ActorTargetProxTester; // 0x580	
	float m_flPlayerTargetProximity; // 0x588	
	CAI_ProxTester m_PlayerTargetProxTester; // 0x58c	
	float m_flPlayerTargetFOV; // 0x594	
	bool m_bPlayerTargetFOVTrueCone; // 0x598	
private:
	[[maybe_unused]] uint8_t __pad0599[0x3]; // 0x599
public:
	ThreeState_t m_fPlayerTargetLOS; // 0x59c	
	ThreeState_t m_fPlayerBlockingActor; // 0x5a0	
	ThreeState_t m_fActorInPVS; // 0x5a4	
	float m_flMinTimeout; // 0x5a8	
	float m_flMaxTimeout; // 0x5ac	
	ThreeState_t m_fActorInVehicle; // 0x5b0	
	ThreeState_t m_fPlayerInVehicle; // 0x5b4	
	CUtlVector< CAI_ScriptConditionsElement > m_ElementList; // 0x5b8	
	
	// Datamap fields:
	// void CAI_ScriptConditionsEvaluationThink; // 0x0
	// void InputEnable; // 0x0
	// void InputDisable; // 0x0
};

// Registered binary: server.dll (project 'navlib')
// Alignment: 4
// Size: 0x2c
// Has Trivial Destructor
// 
// MVDataRoot
// MGetKV3ClassDefaults
class CNavHullVData
{
public:
	// MPropertyFriendlyName "Enabled"
	// MPropertyDescription "Is this agent enabled for generation? ( will result in 0 nav areas for this agent if not )."
	bool m_bAgentEnabled; // 0x0	
	// MPropertyFriendlyName "Radius"
	// MPropertyDescription "Radius of navigating agent capsule."
	float m_agentRadius; // 0x4	
	// MPropertyFriendlyName "Height"
	// MPropertyDescription "Height of navigating agent capsule."
	float m_agentHeight; // 0x8	
	// MPropertyFriendlyName "Enable Short Height"
	// MPropertyDescription "Enable shorter navigating agent capsules ( e.g. crouch ) in addition to regular height capsules."
	bool m_agentShortHeightEnabled; // 0xc	
private:
	[[maybe_unused]] uint8_t __pad000d[0x3]; // 0xd
public:
	// MPropertyFriendlyName "Short height"
	// MPropertyDescription "Short Height of navigating agent capsules if enabled."
	float m_agentShortHeight; // 0x10	
	// MPropertyFriendlyName "Max Climb"
	// MPropertyDescription "Max vertical offset that the agent simply ignores and walks over."
	float m_agentMaxClimb; // 0x14	
	// MPropertyFriendlyName "Max Slope"
	// MPropertyDescription "Max ground slope to be considered walkable."
	int32_t m_agentMaxSlope; // 0x18	
	// MPropertyFriendlyName "Max Jump Down Distance"
	// MPropertyDescription "Max vertical offset at which to create a jump connection ( possibly one-way )."
	float m_agentMaxJumpDownDist; // 0x1c	
	// MPropertyFriendlyName "Max Horizontal Jump Distance"
	// MPropertyDescription "Max horizontal offset over which to create a jump connection ( actually a parameter into the true threshold function )."
	float m_agentMaxJumpHorizDistBase; // 0x20	
	// MPropertyFriendlyName "Max Jump Up Distance"
	// MPropertyDescription "Max vertical offset at which to make a jump connection two-way."
	float m_agentMaxJumpUpDist; // 0x24	
	// MPropertyFriendlyName "Border Erosion"
	// MPropertyDescription "Border erosion in voxel units ( -1 to use default value based on agent radius )."
	int32_t m_agentBorderErosion; // 0x28	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x14
// Has Trivial Destructor
struct SoundOpvarTraceResult_t
{
public:
	Vector vPos; // 0x0	
	bool bDidHit; // 0xc	
private:
	[[maybe_unused]] uint8_t __pad000d[0x3]; // 0xd
public:
	float flDistSqrToCenter; // 0x10	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x98
// Has VTable
// Is Abstract
class CNavVolumeCalculatedVector : public CNavVolume
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x688
// Has VTable
class CNPC_TrooperNeutralNodeMover_GraphController : public CNPC_TrooperNeutral_GraphController
{
public:
	CAnimGraphTagRef m_sHidingInNode; // 0x670	
	
	// Static fields:
	static uint32_t &Get_s_nControllerTypeID(){return *reinterpret_cast<uint32_t*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutralNodeMover_GraphController")->GetStaticFields()[0]->m_pInstance);};
	static bool &Get_s_bSchemaTest(){return *reinterpret_cast<bool*>(interfaces::g_schema->FindTypeScopeForModule("server.dll")->FindDeclaredClass("CNPC_TrooperNeutralNodeMover_GraphController")->GetStaticFields()[1]->m_pInstance);};
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x230
class CResponseQueue::CDeferredResponse
{
private:
	[[maybe_unused]] uint8_t __pad0000[0x8]; // 0x0
public:
	CResponseCriteriaSet m_contexts; // 0x8	
	float m_fDispatchTime; // 0x30	
	CHandle< CBaseEntity > m_hIssuer; // 0x34	
private:
	[[maybe_unused]] uint8_t __pad0038[0x8]; // 0x38
public:
	CRR_Response m_response; // 0x40	
	bool m_bResponseValid; // 0x228	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0xb8
// Has VTable
class CNavVolumeBreadthFirstSearch : public CNavVolumeCalculatedVector
{
private:
	[[maybe_unused]] uint8_t __pad0098[0x8]; // 0x98
public:
	Vector m_vStartPos; // 0xa0	
	float m_flSearchDist; // 0xac	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x550
// Has VTable
class CAmbientGeneric : public CPointEntity
{
public:
	float m_radius; // 0x4b8	
	float m_flMaxRadius; // 0x4bc	
	soundlevel_t m_iSoundLevel; // 0x4c0	
	dynpitchvol_t m_dpv; // 0x4c4	
	bool m_fActive; // 0x528	
	bool m_fLooping; // 0x529	
private:
	[[maybe_unused]] uint8_t __pad052a[0x6]; // 0x52a
public:
	CUtlSymbolLarge m_iszSound; // 0x530	
	CUtlSymbolLarge m_sSourceEntName; // 0x538	
	CHandle< CBaseEntity > m_hSoundSource; // 0x540	
	CEntityIndex m_nSoundSourceEntIndex; // 0x544	
	
	// Datamap fields:
	// void m_nGUID; // 0x548
	// void CAmbientGenericRampThink; // 0x0
	// void InputPlaySound; // 0x0
	// void InputStopSound; // 0x0
	// void InputToggleSound; // 0x0
	// float InputPitch; // 0x0
	// float InputVolume; // 0x0
	// float InputFadeIn; // 0x0
	// float InputFadeOut; // 0x0
	// int32_t fadein; // 0x7fffffff
	// int32_t fadeout; // 0x7fffffff
	// int32_t fadeinsecs; // 0x7fffffff
	// int32_t fadeoutsecs; // 0x7fffffff
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x60
struct CitadelPositionHomingAbilityProjectileCreateInfo_t : public CitadelAbilityProjectileCreateInfo_t
{
public:
	Vector m_vecHomingPosition; // 0x50	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x1c
// Has Trivial Destructor
class CAI_ScriptConditionsElement
{
public:
	CHandle< CBaseEntity > m_hActor; // 0x0	
	CSimTimer m_Timer; // 0x4	
	CSimTimer m_Timeout; // 0x10	
};

// Registered binary: server.dll (project 'navlib')
// Alignment: 8
// Size: 0x98
// Has VTable
class CNavVolumeAll : public CNavVolumeVector
{
public:
	// No schema binary for binding
};

// Registered binary: server.dll (project 'navlib')
// Alignment: 8
// Size: 0x88
// Has VTable
class CNavVolumeSphericalShell : public CNavVolumeSphere
{
public:
	float m_flRadiusInner; // 0x80	
};

// Registered binary: server.dll (project 'server')
// Alignment: 8
// Size: 0x10
// Has Trivial Destructor
struct RelationshipOverride_t : public Relationship_t
{
public:
	CHandle< CBaseEntity > entity; // 0x8	
	Class_T classType; // 0xc	
};

